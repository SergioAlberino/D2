
CESE/RTOS_1/D2/out/D2.elf:     file format elf32-littlearm
CESE/RTOS_1/D2/out/D2.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00058d

Program Header:
0x70000001 off    0x000184f0 vaddr 0x1a0084f0 paddr 0x1a0084f0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002ba8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000084f8 memsz 0x000084f8 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0084f8 align 2**16
         filesz 0x000009ec memsz 0x000009ec flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000084ec  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009ec  10000000  1a0084f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000209ec  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000209ec  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000209ec  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000209ec  2**2
                  CONTENTS
  6 .bss          000021bc  100009ec  100009ec  000009ec  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000209ec  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000209ec  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000209ec  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000209ec  2**2
                  CONTENTS
 11 .init_array   00000004  1a0084ec  1a0084ec  000184ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0084f0  1a0084f0  000184f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000209ec  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000209ec  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000209ec  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000209ec  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000209ec  2**2
                  CONTENTS
 18 .noinit       00000000  10002ba8  10002ba8  000209ec  2**2
                  CONTENTS
 19 .debug_info   00021077  00000000  00000000  000209ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004bb3  00000000  00000000  00041a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00008931  00000000  00000000  00046616  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000b68  00000000  00000000  0004ef47  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000c68  00000000  00000000  0004faaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000de64  00000000  00000000  00050717  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00013d11  00000000  00000000  0005e57b  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002d618  00000000  00000000  0007228c  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  0009f8a4  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  0009f90c  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002c6c  00000000  00000000  0009f940  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100009ec l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0084ec l    d  .init_array	00000000 .init_array
1a0084f0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002ba8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 keys.c
1a000300 l     F .text	0000001c keys_ButtonError
1a00031c l     F .text	00000020 buttonPressed
1a00036c l     F .text	00000030 buttonReleased
00000000 l    df *ABS*	00000000 D2.c
00000000 l    df *ABS*	00000000 system.c
100009ec l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_1.c
100009f4 l     O .bss	00002000 ucHeap
100009f0 l     O .bss	00000004 pucAlignedHeap.11506
100029f4 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a00083c l     F .text	0000002c prvResetNextTaskUnblockTime
1a000868 l     F .text	00000012 prvDeleteTCB
1a00087a l     F .text	00000090 prvInitialiseNewTask
1a00090c l     F .text	0000005c prvInitialiseTaskLists
1a000968 l     F .text	000000a8 prvAddNewTaskToReadyList
1a000a10 l     F .text	0000004c prvCheckTasksWaitingTermination
1a000a5c l     F .text	00000028 prvIdleTask
1a000a84 l     F .text	0000007c prvAddCurrentTaskToDelayedList
100029fc l     O .bss	00000004 pxDelayedTaskList
10002a00 l     O .bss	00000004 pxOverflowDelayedTaskList
10002a04 l     O .bss	0000008c pxReadyTasksLists
10002a90 l     O .bss	00000004 uxCurrentNumberOfTasks
10002a94 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002a98 l     O .bss	00000004 uxPendedTicks
10002a9c l     O .bss	00000004 uxSchedulerSuspended
10002aa0 l     O .bss	00000004 uxTaskNumber
10002aa4 l     O .bss	00000004 uxTopReadyPriority
10002aa8 l     O .bss	00000014 xDelayedTaskList1
10002abc l     O .bss	00000014 xDelayedTaskList2
10002ad0 l     O .bss	00000004 xIdleTaskHandle
10002ad4 l     O .bss	00000004 xNextTaskUnblockTime
10002ad8 l     O .bss	00000004 xNumOfOverflows
10002adc l     O .bss	00000014 xPendingReadyList
10002af0 l     O .bss	00000004 xSchedulerRunning
10002af4 l     O .bss	00000014 xTasksWaitingTermination
10002b08 l     O .bss	00000004 xTickCount
10002b0c l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 port.c
1a000fcc l     F .text	00000040 prvTaskExitError
1a00100c l     F .text	00000022 prvPortStartFirstTask
1a001034 l     F .text	0000000e vPortEnableVFP
1a0010a0 l       .text	00000000 pxCurrentTCBConst2
1a001180 l       .text	00000000 pxCurrentTCBConst
10002b10 l     O .bss	00000001 ucMaxSysCallPriority
10002b14 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a001318 l     F .text	00000044 Board_LED_Init
1a00135c l     F .text	00000040 Board_TEC_Init
1a00139c l     F .text	00000040 Board_GPIO_Init
1a0013dc l     F .text	00000030 Board_ADC_Init
1a00140c l     F .text	00000038 Board_SPI_Init
1a001444 l     F .text	00000024 Board_I2C_Init
1a008008 l     O .text	00000008 GpioButtons
1a008010 l     O .text	0000000c GpioLeds
1a00801c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a008034 l     O .text	00000004 InitClkStates
1a008038 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0015b8 l     F .text	0000002c Chip_UART_GetIndex
1a0080ac l     O .text	00000008 UART_BClock
1a0080b4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001714 l     F .text	00000014 Chip_ADC_GetClockIndex
1a001728 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0017f0 l     F .text	000000a0 pll_calc_divs
1a001890 l     F .text	0000010c pll_get_frac
1a00199c l     F .text	0000004c Chip_Clock_FindBaseClock
1a001c10 l     F .text	00000022 Chip_Clock_GetDivRate
10002b1c l     O .bss	00000008 audio_usb_pll_freq
1a0080c8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a008134 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001f54 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001f68 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00205c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b24 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0031c0 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a005ab4 l     F .text	00000084 __sbprintf
1a0083b0 l     O .text	00000010 blanks.8693
1a0083c0 l     O .text	00000010 zeroes.8694
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a005c08 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a0084d0 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a007b60 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
10000048 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a0084f0 l       .init_array	00000000 __init_array_end
1a0084ec l       .bss_RAM5	00000000 __preinit_array_end
1a0084ec l       .init_array	00000000 __init_array_start
1a0084ec l       .bss_RAM5	00000000 __preinit_array_start
1a007e88 g     F .text	0000002c .hidden __aeabi_dcmpun
1a001a34 g     F .text	0000001c Chip_Clock_GetDividerSource
1a00062c g     F .text	00000012 _isatty_r
1a002c08 g     F .text	00000012 .hidden __aeabi_dcmple
1a003d44 g     F .text	0000009c _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a002b44 g     F .text	0000007a .hidden __cmpdf2
1a00063e g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a002b44 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0010e8 g     F .text	0000002c vPortExitCritical
1a0026b4 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a003d1c g     F .text	00000028 printf
1a0014fe g     F .text	00000008 __stdio_init
10002b84 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a007e38 g     F .text	00000034 _wcrtomb_r
1a003e54 g     F .text	00000020 __sseek
1a00321c g     F .text	00000054 __sinit
1a007d88 g     F .text	000000b0 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a0017ce g     F .text	0000000c Chip_ADC_SetResolution
1a003d10 g     F .text	0000000c __malloc_unlock
1a001184 g     F .text	0000002c SysTick_Handler
10002b88 g     O .bss	00000001 __lock___arc4random_mutex
1a000588  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0014a0 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a007030 g     F .text	000000ce memmove
1a001120 g     F .text	00000064 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a007100 g     F .text	0000004c _Balloc
1a0084f8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a002b34 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
100029f8 g     O .bss	00000004 pxCurrentTCB
1a000622 g     F .text	0000000a _fstat_r
53ff7302 g       *ABS*	00000000 __valid_user_code_checksum
1a0084f8 g       .ARM.exidx	00000000 _etext
1a007f1c g     O .text	00000002 keys_config
1a002bd0 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001cb2 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0011e8 g     F .text	00000110 xPortStartScheduler
1a003b30 g     F .text	00000134 memcpy
1a002bc0 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003210 g     F .text	0000000c _cleanup_r
1a00263c g     F .text	00000022 .hidden __floatsidf
1a0011b0  w    F .text	00000038 vPortSetupTimerInterrupt
1a002b3c g     F .text	00000082 .hidden __ltdf2
1a002c44 g     F .text	00000000 .hidden __aeabi_uldivmod
10002ba8 g       .noinit	00000000 _noinit
1a003de0 g     F .text	00000010 puts
1a000750 g     F .text	00000016 vPortFree
10002b7c g     O .bss	00000004 SystemCoreClock
1a0015e4 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a008408 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a001d30 g     F .text	0000004c Chip_Clock_GetRate
1a000782 g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
10002b58 g     O .bss	00000004 __malloc_top_pad
1a001540 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00261c g     F .text	0000001e .hidden __aeabi_ui2d
1a006e8c g     F .text	00000008 _localeconv_r
1a00728c g     F .text	00000012 __i2b
1a006b84 g     F .text	00000308 __sfvwrite_r
1a002c74 g     F .text	000002d0 .hidden __udivmoddi4
1a002398 g     F .text	00000000 .hidden __aeabi_drsub
1a0006c0 g     F .text	00000020 _sbrk_r
1a008004 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000648 g     F .text	0000004e _read_r
1a00077c g     F .text	00000006 vListInitialiseItem
1a002bf4 g     F .text	00000012 .hidden __aeabi_dcmplt
1a002f48 g     F .text	000000ce _fclose_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
10002b50 g     O .bss	00000004 __malloc_max_sbrked_mem
1a002660 g     F .text	00000042 .hidden __extendsfdf2
1a002964 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0023a4 g     F .text	00000276 .hidden __adddf3
1a0084f0 g       .ARM.exidx	00000000 __exidx_start
10002b8c g     O .bss	00000001 __lock___env_recursive_mutex
1a002710 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10002b90 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a007714 g     F .text	0000036c _realloc_r
1a003568 g     F .text	00000048 __libc_init_array
1a007cec g     F .text	00000064 _fputwc_r
1a0083e0 g     O .text	00000028 __mprec_bigtens
1a00261c g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a007524 g     F .text	00000038 __mcmp
1a0006e0 g     F .text	00000070 pvPortMalloc
1a0014bc g     F .text	00000030 Board_Init
1a000616  w    F .text	00000002 _init
1a000766 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a000bf0 g     F .text	0000000c xTaskGetTickCount
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002ba8 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00058c g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0071ec g     F .text	00000040 __hi0bits
1a001dc0 g     F .text	00000038 Chip_I2C_SetClockRate
1a007eb4 g     F .text	0000004e .hidden __fixdfsi
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0019e8 g     F .text	0000004c Chip_Clock_EnableCrystal
10002b94 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a000568 g     F .text	00000020 vApplicationMallocFailedHook
1a0023a4 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a002b3c g     F .text	00000082 .hidden __ledf2
1a0073d0 g     F .text	000000a0 __pow5mult
1a0026a4 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a001d9c g     F .text	00000024 Chip_I2C_Init
1a00039c g     F .text	0000007c keys_Init
1a0035bc g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001ba4 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00817c g     O .text	000000e6 gpioPinsInit
1a0007f4  w    F .text	0000002c vAssertCalled
1a001f80 g     F .text	00000012 Chip_SSP_SetClockRate
1a002c30 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a003270 g     F .text	0000000c __sfp_lock_acquire
1a006f90 g     F .text	00000000 memchr
1a003328 g     F .text	000001ec _free_r
1a001c8c g     F .text	00000026 Chip_Clock_GetBaseClock
1a007d50 g     F .text	0000000c __locale_mb_cur_max
1a002c1c g     F .text	00000012 .hidden __aeabi_dcmpge
100009ec g       .bss	00000000 _bss
1a00179c g     F .text	00000032 Chip_ADC_SetSampleRate
1a0023a0 g     F .text	0000027a .hidden __aeabi_dsub
10000878 g     O .data	00000004 __malloc_sbrk_base
10002b18 g     O .bss	00000004 freeRtosInterruptCallback
1a000be0 g     F .text	00000010 vTaskSuspendAll
1a0026a4 g     F .text	0000006a .hidden __floatundidf
1a007470 g     F .text	000000b2 __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a001f92 g     F .text	0000003e Chip_SSP_SetBitRate
1a0007cc g     F .text	00000026 uxListRemove
1a001df8 g     F .text	00000002 Chip_GPIO_Init
1a008030 g     O .text	00000004 OscRateIn
1a0072a0 g     F .text	00000130 __multiply
10002ba8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a007aec g     F .text	00000072 strncpy
10002b28 g     O .bss	00000028 __malloc_current_mallinfo
1a007654 g     F .text	000000be __d2b
1a000f00 g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000618 g     F .text	0000000a _close_r
1a00263c g     F .text	00000022 .hidden __aeabi_i2d
1a002090 g     F .text	000001ac gpioInit
1a0035b4 g     F .text	00000002 __retarget_lock_close_recursive
1a005b38 g     F .text	000000d0 __swsetup_r
1a000820  w    F .text	0000001c vApplicationStackOverflowHook
1a002f44  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002964 g     F .text	000001d0 .hidden __divdf3
10000470 g     O .data	00000408 __malloc_av_
1a002710 g     F .text	00000254 .hidden __muldf3
1a003df0 g     F .text	00000022 __sread
1a002310 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a003d04 g     F .text	0000000c __malloc_lock
1a00148c g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003164 g     F .text	0000005a _fflush_r
1a007bec g     F .text	0000005e _calloc_r
1a001a50 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0035b8 g     F .text	00000002 __retarget_lock_acquire_recursive
1a003c64 g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a00050c g     F .text	0000005c main
10002b54 g     O .bss	00000004 __malloc_max_total_mem
1a0035b0 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a000798 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a001080 g     F .text	00000024 SVC_Handler
1a003e74 g     F .text	00000008 __sclose
1a005d30 g     F .text	00000e54 _dtoa_r
1a0035c0 g     F .text	00000570 _malloc_r
1a007e6c g     F .text	0000001a __ascii_wctomb
1a0026b4 g     F .text	0000005a .hidden __aeabi_l2d
1a000e10 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001cc0 g     F .text	0000003c Chip_Clock_EnableOpts
1a0014f6 g     F .text	00000008 __stdio_getchar
1a003288 g     F .text	000000a0 _malloc_trim_r
1a001a6c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001b24 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000354 g     F .text	00000018 clear_diff
1a002008 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002b44 g     F .text	0000007a .hidden __nedf2
1a00223c g     F .text	0000006a gpioWrite
1a000614  w    F .text	00000002 _fini
1a000d14 g     F .text	000000fc xTaskResumeAll
1a000b64 g     F .text	0000007c vTaskStartScheduler
1a000418 g     F .text	00000098 keys_Update
1a00175c g     F .text	00000040 Chip_ADC_Init
10002b80 g     O .bss	00000004 g_pUsbApi
1a001508 g     F .text	00000038 Board_SetupMuxing
1a001638 g     F .text	000000dc Chip_UART_SetBaudFDR
1a000696 g     F .text	00000028 _write_r
10002b5c g     O .bss	00000020 keys_data
1a0004d0 g     F .text	0000003a task_led
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000040 g     O .data	00000004 _impure_ptr
1a003018 g     F .text	0000014a __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0004b0 g     F .text	00000010 task_tecla1
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a00033c g     F .text	00000018 get_diff
1a007d5c g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
10002ba8 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001fd0 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a000bfc g     F .text	00000118 xTaskIncrementTick
1a006e94 g     F .text	0000005c __swhatbuf_r
1a0012f8 g     F .text	00000020 DAC_IRQHandler
1a001468 g     F .text	00000024 Board_Debug_Init
1a002be0 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a0014ec g     F .text	0000000a __stdio_putchar
100009ec g       .data	00000000 _edata
1a001d7c g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a007c4c g     F .text	0000009e __fputwc
10002b98 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a000b00 g     F .text	00000062 xTaskCreate
1a001dfc g     F .text	00000158 Chip_SetupCoreClock
1a003e14 g     F .text	0000003e __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1000087c g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a003514 g     F .text	00000052 _fwalk_reent
1a0017dc g     F .text	00000014 SystemCoreClockUpdate
1a00755c g     F .text	000000f8 __mdiff
1a007eb4 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a000eb4 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00327c g     F .text	0000000c __sfp_lock_release
1a008264 g     O .text	00000101 _ctype_
1a002f44  w    F .text	00000002 .hidden __aeabi_idiv0
1a007e88 g     F .text	0000002c .hidden __unorddf2
1a00017e  w    F .text	00000002 BusFault_Handler
10002b9c g     O .bss	00000001 __lock___dd_hash_mutex
1a006ef0 g     F .text	00000094 __smakebuf_r
10002ba0 g     O .bss	00000001 __lock___tz_mutex
1a003e80 g     F .text	000000dc strlen
1a001048 g     F .text	0000002c pxPortInitialiseStack
1a0004c0 g     F .text	00000010 task_tecla2
1a001cfc g     F .text	00000034 Chip_Clock_Enable
1a002bd0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a002b34 g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a007bd8 g     F .text	00000014 __sprint_r
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0022a6 g     F .text	00000068 gpioRead
1a002660 g     F .text	00000042 .hidden __aeabi_f2d
1a00232c g     F .text	0000006c boardInit
1a0010a4 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0023a0 g     F .text	0000027a .hidden __subdf3
1a003f60 g     F .text	00001b54 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a00722c g     F .text	00000060 __lo0bits
1a007a80 g     F .text	0000006c frexp
10000880 g     O .data	0000016c __global_locale
1a001c34 g     F .text	00000058 Chip_Clock_SetBaseClock
1a002040 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10002ba4 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0015ac g     F .text	0000000c Board_SystemInit
1a007160 g     F .text	0000008a __multadd
1a00714c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 8d 05 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 02 73 ff 53     }............s.S
	...
1a00002c:	81 10 00 1a 85 01 00 1a 00 00 00 00 21 11 00 1a     ............!...
1a00003c:	85 11 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	f9 12 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	11 23 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .#..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0084f8 	.word	0x1a0084f8
1a000118:	10000000 	.word	0x10000000
1a00011c:	000009ec 	.word	0x000009ec
1a000120:	1a0084f8 	.word	0x1a0084f8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0084f8 	.word	0x1a0084f8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0084f8 	.word	0x1a0084f8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0084f8 	.word	0x1a0084f8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100009ec 	.word	0x100009ec
1a000154:	000021bc 	.word	0x000021bc
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <keys_ButtonError>:
	}
	else clear_diff();
}

static void keys_ButtonError( uint32_t index )
{
1a000300:	b510      	push	{r4, lr}
1a000302:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000304:	f000 fece 	bl	1a0010a4 <vPortEnterCritical>
	keys_data[index].state = BUTTON_UP_STATE;
1a000308:	0124      	lsls	r4, r4, #4
1a00030a:	4b03      	ldr	r3, [pc, #12]	; (1a000318 <keys_ButtonError+0x18>)
1a00030c:	2200      	movs	r2, #0
1a00030e:	551a      	strb	r2, [r3, r4]
	taskEXIT_CRITICAL();
1a000310:	f000 feea 	bl	1a0010e8 <vPortExitCritical>
}
1a000314:	bd10      	pop	{r4, pc}
1a000316:	bf00      	nop
1a000318:	10002b5c 	.word	0x10002b5c

1a00031c <buttonPressed>:
{
1a00031c:	b538      	push	{r3, r4, r5, lr}
1a00031e:	4605      	mov	r5, r0
	TickType_t current_tick_count = xTaskGetTickCount();
1a000320:	f000 fc66 	bl	1a000bf0 <xTaskGetTickCount>
1a000324:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000326:	f000 febd 	bl	1a0010a4 <vPortEnterCritical>
	keys_data[index].time_down = current_tick_count;
1a00032a:	4803      	ldr	r0, [pc, #12]	; (1a000338 <buttonPressed+0x1c>)
1a00032c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
1a000330:	6044      	str	r4, [r0, #4]
	taskEXIT_CRITICAL();
1a000332:	f000 fed9 	bl	1a0010e8 <vPortExitCritical>
}
1a000336:	bd38      	pop	{r3, r4, r5, pc}
1a000338:	10002b5c 	.word	0x10002b5c

1a00033c <get_diff>:
{
1a00033c:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
1a00033e:	f000 feb1 	bl	1a0010a4 <vPortEnterCritical>
	tiempo = keys_data[0].time_diff;
1a000342:	4b03      	ldr	r3, [pc, #12]	; (1a000350 <get_diff+0x14>)
1a000344:	68dc      	ldr	r4, [r3, #12]
	taskEXIT_CRITICAL();
1a000346:	f000 fecf 	bl	1a0010e8 <vPortExitCritical>
}
1a00034a:	4620      	mov	r0, r4
1a00034c:	bd10      	pop	{r4, pc}
1a00034e:	bf00      	nop
1a000350:	10002b5c 	.word	0x10002b5c

1a000354 <clear_diff>:
{
1a000354:	b508      	push	{r3, lr}
	taskENTER_CRITICAL();
1a000356:	f000 fea5 	bl	1a0010a4 <vPortEnterCritical>
	keys_data[0].time_diff = 0;
1a00035a:	4b03      	ldr	r3, [pc, #12]	; (1a000368 <clear_diff+0x14>)
1a00035c:	2200      	movs	r2, #0
1a00035e:	60da      	str	r2, [r3, #12]
	taskEXIT_CRITICAL();
1a000360:	f000 fec2 	bl	1a0010e8 <vPortExitCritical>
}
1a000364:	bd08      	pop	{r3, pc}
1a000366:	bf00      	nop
1a000368:	10002b5c 	.word	0x10002b5c

1a00036c <buttonReleased>:
{
1a00036c:	b538      	push	{r3, r4, r5, lr}
1a00036e:	4605      	mov	r5, r0
	TickType_t current_tick_count = xTaskGetTickCount();
1a000370:	f000 fc3e 	bl	1a000bf0 <xTaskGetTickCount>
	if(index==0){
1a000374:	b965      	cbnz	r5, 1a000390 <buttonReleased+0x24>
1a000376:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
1a000378:	f000 fe94 	bl	1a0010a4 <vPortEnterCritical>
		keys_data[index].time_up    = current_tick_count;
1a00037c:	4b06      	ldr	r3, [pc, #24]	; (1a000398 <buttonReleased+0x2c>)
1a00037e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
1a000382:	609c      	str	r4, [r3, #8]
		keys_data[index].time_diff  = keys_data[index].time_up - keys_data[index].time_down;
1a000384:	685a      	ldr	r2, [r3, #4]
1a000386:	1aa4      	subs	r4, r4, r2
1a000388:	60dc      	str	r4, [r3, #12]
		taskEXIT_CRITICAL();
1a00038a:	f000 fead 	bl	1a0010e8 <vPortExitCritical>
}
1a00038e:	bd38      	pop	{r3, r4, r5, pc}
	else clear_diff();
1a000390:	f7ff ffe0 	bl	1a000354 <clear_diff>
}
1a000394:	e7fb      	b.n	1a00038e <buttonReleased+0x22>
1a000396:	bf00      	nop
1a000398:	10002b5c 	.word	0x10002b5c

1a00039c <keys_Init>:
{
1a00039c:	b570      	push	{r4, r5, r6, lr}
1a00039e:	b082      	sub	sp, #8
	for(n=0; n<key_count;n++){
1a0003a0:	2300      	movs	r3, #0
1a0003a2:	e00b      	b.n	1a0003bc <keys_Init+0x20>
		keys_data[n].state          = BUTTON_UP_STATE;  	// Set initial state
1a0003a4:	4817      	ldr	r0, [pc, #92]	; (1a000404 <keys_Init+0x68>)
1a0003a6:	0119      	lsls	r1, r3, #4
1a0003a8:	1842      	adds	r2, r0, r1
1a0003aa:	2400      	movs	r4, #0
1a0003ac:	5444      	strb	r4, [r0, r1]
		keys_data[n].time_down      = KEYS_INVALID_TIME;
1a0003ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0003b2:	6051      	str	r1, [r2, #4]
		keys_data[n].time_up        = KEYS_INVALID_TIME;
1a0003b4:	6091      	str	r1, [r2, #8]
		keys_data[n].time_diff      = KEYS_INVALID_TIME;
1a0003b6:	60d1      	str	r1, [r2, #12]
	for(n=0; n<key_count;n++){
1a0003b8:	3301      	adds	r3, #1
1a0003ba:	b2db      	uxtb	r3, r3
1a0003bc:	2b01      	cmp	r3, #1
1a0003be:	d9f1      	bls.n	1a0003a4 <keys_Init+0x8>
	res1 = xTaskCreate (
1a0003c0:	2400      	movs	r4, #0
1a0003c2:	9401      	str	r4, [sp, #4]
1a0003c4:	2501      	movs	r5, #1
1a0003c6:	9500      	str	r5, [sp, #0]
1a0003c8:	4623      	mov	r3, r4
1a0003ca:	22b4      	movs	r2, #180	; 0xb4
1a0003cc:	490e      	ldr	r1, [pc, #56]	; (1a000408 <keys_Init+0x6c>)
1a0003ce:	480f      	ldr	r0, [pc, #60]	; (1a00040c <keys_Init+0x70>)
1a0003d0:	f000 fb96 	bl	1a000b00 <xTaskCreate>
1a0003d4:	4606      	mov	r6, r0
	res2 = xTaskCreate (
1a0003d6:	9401      	str	r4, [sp, #4]
1a0003d8:	9500      	str	r5, [sp, #0]
1a0003da:	4623      	mov	r3, r4
1a0003dc:	22b4      	movs	r2, #180	; 0xb4
1a0003de:	490c      	ldr	r1, [pc, #48]	; (1a000410 <keys_Init+0x74>)
1a0003e0:	480c      	ldr	r0, [pc, #48]	; (1a000414 <keys_Init+0x78>)
1a0003e2:	f000 fb8d 	bl	1a000b00 <xTaskCreate>
	configASSERT( (res1 == pdPASS)|| (res2 == pdPASS));
1a0003e6:	42ae      	cmp	r6, r5
1a0003e8:	d00a      	beq.n	1a000400 <keys_Init+0x64>
1a0003ea:	42a8      	cmp	r0, r5
1a0003ec:	d008      	beq.n	1a000400 <keys_Init+0x64>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0003ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0003f2:	f383 8811 	msr	BASEPRI, r3
1a0003f6:	f3bf 8f6f 	isb	sy
1a0003fa:	f3bf 8f4f 	dsb	sy
1a0003fe:	e7fe      	b.n	1a0003fe <keys_Init+0x62>
}
1a000400:	b002      	add	sp, #8
1a000402:	bd70      	pop	{r4, r5, r6, pc}
1a000404:	10002b5c 	.word	0x10002b5c
1a000408:	1a007f04 	.word	0x1a007f04
1a00040c:	1a0004b1 	.word	0x1a0004b1
1a000410:	1a007f10 	.word	0x1a007f10
1a000414:	1a0004c1 	.word	0x1a0004c1

1a000418 <keys_Update>:
{
1a000418:	b510      	push	{r4, lr}
1a00041a:	4604      	mov	r4, r0
	switch( keys_data[index].state )
1a00041c:	0103      	lsls	r3, r0, #4
1a00041e:	4a22      	ldr	r2, [pc, #136]	; (1a0004a8 <keys_Update+0x90>)
1a000420:	5cd3      	ldrb	r3, [r2, r3]
1a000422:	2b03      	cmp	r3, #3
1a000424:	d83c      	bhi.n	1a0004a0 <keys_Update+0x88>
1a000426:	e8df f003 	tbb	[pc, r3]
1a00042a:	1e02      	.short	0x1e02
1a00042c:	290c      	.short	0x290c
			if( !gpioRead( keys_config[index].tecla ))
1a00042e:	4b1f      	ldr	r3, [pc, #124]	; (1a0004ac <keys_Update+0x94>)
1a000430:	5618      	ldrsb	r0, [r3, r0]
1a000432:	f001 ff38 	bl	1a0022a6 <gpioRead>
1a000436:	b968      	cbnz	r0, 1a000454 <keys_Update+0x3c>
				keys_data[index].state = BUTTON_FALLING_STATE;
1a000438:	0124      	lsls	r4, r4, #4
1a00043a:	4b1b      	ldr	r3, [pc, #108]	; (1a0004a8 <keys_Update+0x90>)
1a00043c:	2202      	movs	r2, #2
1a00043e:	551a      	strb	r2, [r3, r4]
1a000440:	e008      	b.n	1a000454 <keys_Update+0x3c>
			if( !gpioRead( keys_config[index].tecla ) )
1a000442:	4b1a      	ldr	r3, [pc, #104]	; (1a0004ac <keys_Update+0x94>)
1a000444:	5618      	ldrsb	r0, [r3, r0]
1a000446:	f001 ff2e 	bl	1a0022a6 <gpioRead>
1a00044a:	b120      	cbz	r0, 1a000456 <keys_Update+0x3e>
				keys_data[index].state = BUTTON_UP_STATE;
1a00044c:	0124      	lsls	r4, r4, #4
1a00044e:	4b16      	ldr	r3, [pc, #88]	; (1a0004a8 <keys_Update+0x90>)
1a000450:	2200      	movs	r2, #0
1a000452:	551a      	strb	r2, [r3, r4]
}
1a000454:	bd10      	pop	{r4, pc}
				keys_data[index].state = BUTTON_DOWN_STATE;
1a000456:	0123      	lsls	r3, r4, #4
1a000458:	4a13      	ldr	r2, [pc, #76]	; (1a0004a8 <keys_Update+0x90>)
1a00045a:	2101      	movs	r1, #1
1a00045c:	54d1      	strb	r1, [r2, r3]
				buttonPressed( index );
1a00045e:	4620      	mov	r0, r4
1a000460:	f7ff ff5c 	bl	1a00031c <buttonPressed>
1a000464:	e7f6      	b.n	1a000454 <keys_Update+0x3c>
			if( gpioRead( keys_config[index].tecla ) )
1a000466:	4b11      	ldr	r3, [pc, #68]	; (1a0004ac <keys_Update+0x94>)
1a000468:	5618      	ldrsb	r0, [r3, r0]
1a00046a:	f001 ff1c 	bl	1a0022a6 <gpioRead>
1a00046e:	2800      	cmp	r0, #0
1a000470:	d0f0      	beq.n	1a000454 <keys_Update+0x3c>
				keys_data[index].state = BUTTON_RISING_STATE;
1a000472:	0124      	lsls	r4, r4, #4
1a000474:	4b0c      	ldr	r3, [pc, #48]	; (1a0004a8 <keys_Update+0x90>)
1a000476:	2203      	movs	r2, #3
1a000478:	551a      	strb	r2, [r3, r4]
1a00047a:	e7eb      	b.n	1a000454 <keys_Update+0x3c>
			if( gpioRead( keys_config[index].tecla ) )
1a00047c:	4b0b      	ldr	r3, [pc, #44]	; (1a0004ac <keys_Update+0x94>)
1a00047e:	5618      	ldrsb	r0, [r3, r0]
1a000480:	f001 ff11 	bl	1a0022a6 <gpioRead>
1a000484:	b920      	cbnz	r0, 1a000490 <keys_Update+0x78>
				keys_data[index].state = BUTTON_DOWN_STATE;
1a000486:	0124      	lsls	r4, r4, #4
1a000488:	4b07      	ldr	r3, [pc, #28]	; (1a0004a8 <keys_Update+0x90>)
1a00048a:	2201      	movs	r2, #1
1a00048c:	551a      	strb	r2, [r3, r4]
1a00048e:	e7e1      	b.n	1a000454 <keys_Update+0x3c>
				keys_data[index].state = BUTTON_UP_STATE;
1a000490:	0123      	lsls	r3, r4, #4
1a000492:	4a05      	ldr	r2, [pc, #20]	; (1a0004a8 <keys_Update+0x90>)
1a000494:	2100      	movs	r1, #0
1a000496:	54d1      	strb	r1, [r2, r3]
				buttonReleased( index );
1a000498:	4620      	mov	r0, r4
1a00049a:	f7ff ff67 	bl	1a00036c <buttonReleased>
1a00049e:	e7d9      	b.n	1a000454 <keys_Update+0x3c>
			keys_ButtonError( index );
1a0004a0:	f7ff ff2e 	bl	1a000300 <keys_ButtonError>
}
1a0004a4:	e7d6      	b.n	1a000454 <keys_Update+0x3c>
1a0004a6:	bf00      	nop
1a0004a8:	10002b5c 	.word	0x10002b5c
1a0004ac:	1a007f1c 	.word	0x1a007f1c

1a0004b0 <task_tecla1>:

/*=====[Implementations of private functions]=================================*/
void task_tecla1( void* taskParmPtr )
{
1a0004b0:	b508      	push	{r3, lr}
	while( 1 )
	{
		keys_Update( 0 );
1a0004b2:	2000      	movs	r0, #0
1a0004b4:	f7ff ffb0 	bl	1a000418 <keys_Update>
		vTaskDelay( DEBOUNCE_TIME / portTICK_RATE_MS );
1a0004b8:	2028      	movs	r0, #40	; 0x28
1a0004ba:	f000 fcfb 	bl	1a000eb4 <vTaskDelay>
1a0004be:	e7f8      	b.n	1a0004b2 <task_tecla1+0x2>

1a0004c0 <task_tecla2>:
	}
}

void task_tecla2( void* taskParmPtr )
{
1a0004c0:	b508      	push	{r3, lr}
	while( 1 )
	{
		keys_Update( 1 );
1a0004c2:	2001      	movs	r0, #1
1a0004c4:	f7ff ffa8 	bl	1a000418 <keys_Update>
		vTaskDelay( DEBOUNCE_TIME / portTICK_RATE_MS );
1a0004c8:	2028      	movs	r0, #40	; 0x28
1a0004ca:	f000 fcf3 	bl	1a000eb4 <vTaskDelay>
1a0004ce:	e7f8      	b.n	1a0004c2 <task_tecla2+0x2>

1a0004d0 <task_led>:
	configASSERT( 0 );
	return 0;
}

void task_led( void* taskParmPtr )
{
1a0004d0:	b510      	push	{r4, lr}
1a0004d2:	b082      	sub	sp, #8
	TickType_t xPeriodicity = pdMS_TO_TICKS( PERIODE_LED_MSEG ); // Tarea periodica

	TickType_t xLastWakeTime = xTaskGetTickCount();
1a0004d4:	f000 fb8c 	bl	1a000bf0 <xTaskGetTickCount>
1a0004d8:	9001      	str	r0, [sp, #4]
1a0004da:	e004      	b.n	1a0004e6 <task_led+0x16>
			vTaskDelay( dif );
			gpioWrite( LEDB, OFF );
		}

		// Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
		vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0004dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a0004e0:	a801      	add	r0, sp, #4
1a0004e2:	f000 fc95 	bl	1a000e10 <vTaskDelayUntil>
		TickType_t dif = get_diff();
1a0004e6:	f7ff ff29 	bl	1a00033c <get_diff>
1a0004ea:	4604      	mov	r4, r0
		if( dif != KEYS_INVALID_TIME )
1a0004ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0004f0:	d0f4      	beq.n	1a0004dc <task_led+0xc>
			gpioWrite( LEDB, ON );
1a0004f2:	2101      	movs	r1, #1
1a0004f4:	202a      	movs	r0, #42	; 0x2a
1a0004f6:	f001 fea1 	bl	1a00223c <gpioWrite>
			vTaskDelay( dif );
1a0004fa:	4620      	mov	r0, r4
1a0004fc:	f000 fcda 	bl	1a000eb4 <vTaskDelay>
			gpioWrite( LEDB, OFF );
1a000500:	2100      	movs	r1, #0
1a000502:	202a      	movs	r0, #42	; 0x2a
1a000504:	f001 fe9a 	bl	1a00223c <gpioWrite>
1a000508:	e7e8      	b.n	1a0004dc <task_led+0xc>
1a00050a:	Address 0x000000001a00050a is out of bounds.


1a00050c <main>:
{
1a00050c:	b500      	push	{lr}
1a00050e:	b083      	sub	sp, #12
	boardConfig();  // Inicializar y configurar la plataforma
1a000510:	f001 ff0c 	bl	1a00232c <boardInit>
	printf( "msj_1" );
1a000514:	4811      	ldr	r0, [pc, #68]	; (1a00055c <main+0x50>)
1a000516:	f003 fc01 	bl	1a003d1c <printf>
	res = xTaskCreate (
1a00051a:	2300      	movs	r3, #0
1a00051c:	9301      	str	r3, [sp, #4]
1a00051e:	2201      	movs	r2, #1
1a000520:	9200      	str	r2, [sp, #0]
1a000522:	22b4      	movs	r2, #180	; 0xb4
1a000524:	490e      	ldr	r1, [pc, #56]	; (1a000560 <main+0x54>)
1a000526:	480f      	ldr	r0, [pc, #60]	; (1a000564 <main+0x58>)
1a000528:	f000 faea 	bl	1a000b00 <xTaskCreate>
	configASSERT( res == pdPASS );
1a00052c:	2801      	cmp	r0, #1
1a00052e:	d008      	beq.n	1a000542 <main+0x36>
1a000530:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000534:	f383 8811 	msr	BASEPRI, r3
1a000538:	f3bf 8f6f 	isb	sy
1a00053c:	f3bf 8f4f 	dsb	sy
1a000540:	e7fe      	b.n	1a000540 <main+0x34>
	keys_Init();
1a000542:	f7ff ff2b 	bl	1a00039c <keys_Init>
	vTaskStartScheduler();					// Enciende tick | Crea idle y pone en ready | Evalua las tareas creadas | Prioridad mas alta pasa a running
1a000546:	f000 fb0d 	bl	1a000b64 <vTaskStartScheduler>
1a00054a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00054e:	f383 8811 	msr	BASEPRI, r3
1a000552:	f3bf 8f6f 	isb	sy
1a000556:	f3bf 8f4f 	dsb	sy
	configASSERT( 0 );
1a00055a:	e7fe      	b.n	1a00055a <main+0x4e>
1a00055c:	1a007f20 	.word	0x1a007f20
1a000560:	1a007f28 	.word	0x1a007f28
1a000564:	1a0004d1 	.word	0x1a0004d1

1a000568 <vApplicationMallocFailedHook>:
	}
}

/* hook que se ejecuta si al necesitar un objeto dinamico, no hay memoria disponible */
void vApplicationMallocFailedHook()
{
1a000568:	b508      	push	{r3, lr}
	printf( "Malloc Failed Hook!\n" );
1a00056a:	4806      	ldr	r0, [pc, #24]	; (1a000584 <vApplicationMallocFailedHook+0x1c>)
1a00056c:	f003 fc38 	bl	1a003de0 <puts>
1a000570:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000574:	f383 8811 	msr	BASEPRI, r3
1a000578:	f3bf 8f6f 	isb	sy
1a00057c:	f3bf 8f4f 	dsb	sy
	configASSERT( 0 );
1a000580:	e7fe      	b.n	1a000580 <vApplicationMallocFailedHook+0x18>
1a000582:	bf00      	nop
1a000584:	1a007f34 	.word	0x1a007f34

1a000588 <initialise_monitor_handles>:
}
1a000588:	4770      	bx	lr
1a00058a:	Address 0x000000001a00058a is out of bounds.


1a00058c <Reset_Handler>:
void Reset_Handler(void) {
1a00058c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00058e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000590:	4b19      	ldr	r3, [pc, #100]	; (1a0005f8 <Reset_Handler+0x6c>)
1a000592:	4a1a      	ldr	r2, [pc, #104]	; (1a0005fc <Reset_Handler+0x70>)
1a000594:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000596:	3304      	adds	r3, #4
1a000598:	4a19      	ldr	r2, [pc, #100]	; (1a000600 <Reset_Handler+0x74>)
1a00059a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00059c:	2300      	movs	r3, #0
1a00059e:	e005      	b.n	1a0005ac <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0005a0:	4a18      	ldr	r2, [pc, #96]	; (1a000604 <Reset_Handler+0x78>)
1a0005a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0005a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0005aa:	3301      	adds	r3, #1
1a0005ac:	2b07      	cmp	r3, #7
1a0005ae:	d9f7      	bls.n	1a0005a0 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0005b0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0005b2:	4b15      	ldr	r3, [pc, #84]	; (1a000608 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0005b4:	e007      	b.n	1a0005c6 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0005b6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0005ba:	689a      	ldr	r2, [r3, #8]
1a0005bc:	6859      	ldr	r1, [r3, #4]
1a0005be:	6818      	ldr	r0, [r3, #0]
1a0005c0:	f7ff fde3 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0005c4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0005c6:	4a11      	ldr	r2, [pc, #68]	; (1a00060c <Reset_Handler+0x80>)
1a0005c8:	4293      	cmp	r3, r2
1a0005ca:	d3f4      	bcc.n	1a0005b6 <Reset_Handler+0x2a>
1a0005cc:	e006      	b.n	1a0005dc <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0005ce:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0005d0:	6859      	ldr	r1, [r3, #4]
1a0005d2:	f854 0b08 	ldr.w	r0, [r4], #8
1a0005d6:	f7ff fde7 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0005da:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0005dc:	4a0c      	ldr	r2, [pc, #48]	; (1a000610 <Reset_Handler+0x84>)
1a0005de:	4293      	cmp	r3, r2
1a0005e0:	d3f5      	bcc.n	1a0005ce <Reset_Handler+0x42>
    SystemInit();
1a0005e2:	f001 fd11 	bl	1a002008 <SystemInit>
    __libc_init_array();
1a0005e6:	f002 ffbf 	bl	1a003568 <__libc_init_array>
    initialise_monitor_handles();
1a0005ea:	f7ff ffcd 	bl	1a000588 <initialise_monitor_handles>
    main();
1a0005ee:	f7ff ff8d 	bl	1a00050c <main>
        __asm__ volatile("wfi");
1a0005f2:	bf30      	wfi
1a0005f4:	e7fd      	b.n	1a0005f2 <Reset_Handler+0x66>
1a0005f6:	bf00      	nop
1a0005f8:	40053100 	.word	0x40053100
1a0005fc:	10df1000 	.word	0x10df1000
1a000600:	01dff7ff 	.word	0x01dff7ff
1a000604:	e000e280 	.word	0xe000e280
1a000608:	1a000114 	.word	0x1a000114
1a00060c:	1a000150 	.word	0x1a000150
1a000610:	1a000178 	.word	0x1a000178

1a000614 <_fini>:
void _fini(void) {}
1a000614:	4770      	bx	lr

1a000616 <_init>:
void _init(void) {}
1a000616:	4770      	bx	lr

1a000618 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000618:	2309      	movs	r3, #9
1a00061a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00061c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000620:	4770      	bx	lr

1a000622 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000622:	2358      	movs	r3, #88	; 0x58
1a000624:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00062a:	4770      	bx	lr

1a00062c <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a00062c:	2902      	cmp	r1, #2
1a00062e:	d904      	bls.n	1a00063a <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000630:	2309      	movs	r3, #9
1a000632:	6003      	str	r3, [r0, #0]
       return -1;
1a000634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000638:	4770      	bx	lr
       return 1;
1a00063a:	2001      	movs	r0, #1
   }
}
1a00063c:	4770      	bx	lr

1a00063e <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00063e:	2358      	movs	r3, #88	; 0x58
1a000640:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000646:	4770      	bx	lr

1a000648 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000648:	2902      	cmp	r1, #2
1a00064a:	d81f      	bhi.n	1a00068c <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a00064c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000650:	461d      	mov	r5, r3
1a000652:	4617      	mov	r7, r2
1a000654:	4606      	mov	r6, r0
  size_t i = 0;
1a000656:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000658:	42ac      	cmp	r4, r5
1a00065a:	d211      	bcs.n	1a000680 <_read_r+0x38>
         int c = __stdio_getchar();
1a00065c:	f000 ff4b 	bl	1a0014f6 <__stdio_getchar>
         if( c != -1 ){
1a000660:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000664:	d0f8      	beq.n	1a000658 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000666:	f104 0801 	add.w	r8, r4, #1
1a00066a:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a00066c:	280d      	cmp	r0, #13
1a00066e:	d003      	beq.n	1a000678 <_read_r+0x30>
1a000670:	280a      	cmp	r0, #10
1a000672:	d001      	beq.n	1a000678 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000674:	4644      	mov	r4, r8
1a000676:	e7ef      	b.n	1a000658 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000678:	f000 ff3d 	bl	1a0014f6 <__stdio_getchar>
               return i;
1a00067c:	4640      	mov	r0, r8
1a00067e:	e003      	b.n	1a000688 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000680:	2313      	movs	r3, #19
1a000682:	6033      	str	r3, [r6, #0]
      return -1;
1a000684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a00068c:	2313      	movs	r3, #19
1a00068e:	6003      	str	r3, [r0, #0]
      return -1;
1a000690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000694:	4770      	bx	lr

1a000696 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000696:	2902      	cmp	r1, #2
1a000698:	d80c      	bhi.n	1a0006b4 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00069a:	b570      	push	{r4, r5, r6, lr}
1a00069c:	461d      	mov	r5, r3
1a00069e:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0006a0:	2400      	movs	r4, #0
1a0006a2:	42ac      	cmp	r4, r5
1a0006a4:	d204      	bcs.n	1a0006b0 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a0006a6:	5d30      	ldrb	r0, [r6, r4]
1a0006a8:	f000 ff20 	bl	1a0014ec <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0006ac:	3401      	adds	r4, #1
1a0006ae:	e7f8      	b.n	1a0006a2 <_write_r+0xc>
       return n;
1a0006b0:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0006b2:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0006b4:	2313      	movs	r3, #19
1a0006b6:	6003      	str	r3, [r0, #0]
       return -1;
1a0006b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0006bc:	4770      	bx	lr
1a0006be:	Address 0x000000001a0006be is out of bounds.


1a0006c0 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0006c0:	4b05      	ldr	r3, [pc, #20]	; (1a0006d8 <_sbrk_r+0x18>)
1a0006c2:	681b      	ldr	r3, [r3, #0]
1a0006c4:	b123      	cbz	r3, 1a0006d0 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0006c6:	4b04      	ldr	r3, [pc, #16]	; (1a0006d8 <_sbrk_r+0x18>)
1a0006c8:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0006ca:	4401      	add	r1, r0
1a0006cc:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0006ce:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0006d0:	4b01      	ldr	r3, [pc, #4]	; (1a0006d8 <_sbrk_r+0x18>)
1a0006d2:	4a02      	ldr	r2, [pc, #8]	; (1a0006dc <_sbrk_r+0x1c>)
1a0006d4:	601a      	str	r2, [r3, #0]
1a0006d6:	e7f6      	b.n	1a0006c6 <_sbrk_r+0x6>
1a0006d8:	100009ec 	.word	0x100009ec
1a0006dc:	10002ba8 	.word	0x10002ba8

1a0006e0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a0006e0:	b538      	push	{r3, r4, r5, lr}
1a0006e2:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a0006e4:	f010 0f07 	tst.w	r0, #7
1a0006e8:	d002      	beq.n	1a0006f0 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0006ea:	f020 0407 	bic.w	r4, r0, #7
1a0006ee:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a0006f0:	f000 fa76 	bl	1a000be0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a0006f4:	4b13      	ldr	r3, [pc, #76]	; (1a000744 <pvPortMalloc+0x64>)
1a0006f6:	681b      	ldr	r3, [r3, #0]
1a0006f8:	b17b      	cbz	r3, 1a00071a <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0006fa:	4b13      	ldr	r3, [pc, #76]	; (1a000748 <pvPortMalloc+0x68>)
1a0006fc:	681b      	ldr	r3, [r3, #0]
1a0006fe:	441c      	add	r4, r3
1a000700:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a000704:	4294      	cmp	r4, r2
1a000706:	d80e      	bhi.n	1a000726 <pvPortMalloc+0x46>
1a000708:	42a3      	cmp	r3, r4
1a00070a:	d310      	bcc.n	1a00072e <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a00070c:	f000 fb02 	bl	1a000d14 <xTaskResumeAll>
void *pvReturn = NULL;
1a000710:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a000712:	f7ff ff29 	bl	1a000568 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a000716:	4628      	mov	r0, r5
1a000718:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a00071a:	4b0c      	ldr	r3, [pc, #48]	; (1a00074c <pvPortMalloc+0x6c>)
1a00071c:	f023 0307 	bic.w	r3, r3, #7
1a000720:	4a08      	ldr	r2, [pc, #32]	; (1a000744 <pvPortMalloc+0x64>)
1a000722:	6013      	str	r3, [r2, #0]
1a000724:	e7e9      	b.n	1a0006fa <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a000726:	f000 faf5 	bl	1a000d14 <xTaskResumeAll>
void *pvReturn = NULL;
1a00072a:	2500      	movs	r5, #0
1a00072c:	e7f1      	b.n	1a000712 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a00072e:	4a05      	ldr	r2, [pc, #20]	; (1a000744 <pvPortMalloc+0x64>)
1a000730:	6815      	ldr	r5, [r2, #0]
1a000732:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a000734:	4b04      	ldr	r3, [pc, #16]	; (1a000748 <pvPortMalloc+0x68>)
1a000736:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a000738:	f000 faec 	bl	1a000d14 <xTaskResumeAll>
		if( pvReturn == NULL )
1a00073c:	2d00      	cmp	r5, #0
1a00073e:	d1ea      	bne.n	1a000716 <pvPortMalloc+0x36>
1a000740:	e7e7      	b.n	1a000712 <pvPortMalloc+0x32>
1a000742:	bf00      	nop
1a000744:	100009f0 	.word	0x100009f0
1a000748:	100029f4 	.word	0x100029f4
1a00074c:	100009fc 	.word	0x100009fc

1a000750 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000750:	b140      	cbz	r0, 1a000764 <vPortFree+0x14>
1a000752:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000756:	f383 8811 	msr	BASEPRI, r3
1a00075a:	f3bf 8f6f 	isb	sy
1a00075e:	f3bf 8f4f 	dsb	sy
1a000762:	e7fe      	b.n	1a000762 <vPortFree+0x12>
}
1a000764:	4770      	bx	lr

1a000766 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000766:	f100 0308 	add.w	r3, r0, #8
1a00076a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00076c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000770:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000772:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000774:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000776:	2300      	movs	r3, #0
1a000778:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a00077a:	4770      	bx	lr

1a00077c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a00077c:	2300      	movs	r3, #0
1a00077e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a000780:	4770      	bx	lr

1a000782 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000782:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000784:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000786:	689a      	ldr	r2, [r3, #8]
1a000788:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00078a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a00078c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00078e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000790:	6803      	ldr	r3, [r0, #0]
1a000792:	3301      	adds	r3, #1
1a000794:	6003      	str	r3, [r0, #0]
}
1a000796:	4770      	bx	lr

1a000798 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000798:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a00079a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a00079c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0007a0:	d002      	beq.n	1a0007a8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0007a2:	f100 0208 	add.w	r2, r0, #8
1a0007a6:	e002      	b.n	1a0007ae <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0007a8:	6902      	ldr	r2, [r0, #16]
1a0007aa:	e004      	b.n	1a0007b6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0007ac:	461a      	mov	r2, r3
1a0007ae:	6853      	ldr	r3, [r2, #4]
1a0007b0:	681c      	ldr	r4, [r3, #0]
1a0007b2:	42ac      	cmp	r4, r5
1a0007b4:	d9fa      	bls.n	1a0007ac <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0007b6:	6853      	ldr	r3, [r2, #4]
1a0007b8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a0007ba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a0007bc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0007be:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0007c0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0007c2:	6803      	ldr	r3, [r0, #0]
1a0007c4:	3301      	adds	r3, #1
1a0007c6:	6003      	str	r3, [r0, #0]
}
1a0007c8:	bc30      	pop	{r4, r5}
1a0007ca:	4770      	bx	lr

1a0007cc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0007cc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0007ce:	6841      	ldr	r1, [r0, #4]
1a0007d0:	6882      	ldr	r2, [r0, #8]
1a0007d2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0007d4:	6841      	ldr	r1, [r0, #4]
1a0007d6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0007d8:	685a      	ldr	r2, [r3, #4]
1a0007da:	4282      	cmp	r2, r0
1a0007dc:	d006      	beq.n	1a0007ec <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0007de:	2200      	movs	r2, #0
1a0007e0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0007e2:	681a      	ldr	r2, [r3, #0]
1a0007e4:	3a01      	subs	r2, #1
1a0007e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0007e8:	6818      	ldr	r0, [r3, #0]
}
1a0007ea:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0007ec:	6882      	ldr	r2, [r0, #8]
1a0007ee:	605a      	str	r2, [r3, #4]
1a0007f0:	e7f5      	b.n	1a0007de <uxListRemove+0x12>
1a0007f2:	Address 0x000000001a0007f2 is out of bounds.


1a0007f4 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a0007f4:	b510      	push	{r4, lr}
1a0007f6:	b082      	sub	sp, #8
1a0007f8:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a0007fa:	9001      	str	r0, [sp, #4]
1a0007fc:	2300      	movs	r3, #0
1a0007fe:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a000800:	f000 fc50 	bl	1a0010a4 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a000804:	9901      	ldr	r1, [sp, #4]
1a000806:	4622      	mov	r2, r4
1a000808:	4804      	ldr	r0, [pc, #16]	; (1a00081c <vAssertCalled+0x28>)
1a00080a:	f003 fa87 	bl	1a003d1c <printf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a00080e:	9b00      	ldr	r3, [sp, #0]
1a000810:	2b00      	cmp	r3, #0
1a000812:	d0fc      	beq.n	1a00080e <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a000814:	f000 fc68 	bl	1a0010e8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a000818:	b002      	add	sp, #8
1a00081a:	bd10      	pop	{r4, pc}
1a00081c:	1a007fbc 	.word	0x1a007fbc

1a000820 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a000820:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a000822:	4804      	ldr	r0, [pc, #16]	; (1a000834 <vApplicationStackOverflowHook+0x14>)
1a000824:	f003 fa7a 	bl	1a003d1c <printf>
   vAssertCalled( __LINE__, __FILE__ );
1a000828:	4903      	ldr	r1, [pc, #12]	; (1a000838 <vApplicationStackOverflowHook+0x18>)
1a00082a:	2050      	movs	r0, #80	; 0x50
1a00082c:	f7ff ffe2 	bl	1a0007f4 <vAssertCalled>
}
1a000830:	bd08      	pop	{r3, pc}
1a000832:	bf00      	nop
1a000834:	1a007f8c 	.word	0x1a007f8c
1a000838:	1a007f6c 	.word	0x1a007f6c

1a00083c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00083c:	4b08      	ldr	r3, [pc, #32]	; (1a000860 <prvResetNextTaskUnblockTime+0x24>)
1a00083e:	681b      	ldr	r3, [r3, #0]
1a000840:	681b      	ldr	r3, [r3, #0]
1a000842:	b923      	cbnz	r3, 1a00084e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a000844:	4b07      	ldr	r3, [pc, #28]	; (1a000864 <prvResetNextTaskUnblockTime+0x28>)
1a000846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00084a:	601a      	str	r2, [r3, #0]
1a00084c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00084e:	4b04      	ldr	r3, [pc, #16]	; (1a000860 <prvResetNextTaskUnblockTime+0x24>)
1a000850:	681b      	ldr	r3, [r3, #0]
1a000852:	68db      	ldr	r3, [r3, #12]
1a000854:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000856:	685a      	ldr	r2, [r3, #4]
1a000858:	4b02      	ldr	r3, [pc, #8]	; (1a000864 <prvResetNextTaskUnblockTime+0x28>)
1a00085a:	601a      	str	r2, [r3, #0]
	}
}
1a00085c:	4770      	bx	lr
1a00085e:	bf00      	nop
1a000860:	100029fc 	.word	0x100029fc
1a000864:	10002ad4 	.word	0x10002ad4

1a000868 <prvDeleteTCB>:
	{
1a000868:	b510      	push	{r4, lr}
1a00086a:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
1a00086c:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00086e:	f7ff ff6f 	bl	1a000750 <vPortFree>
			vPortFree( pxTCB );
1a000872:	4620      	mov	r0, r4
1a000874:	f7ff ff6c 	bl	1a000750 <vPortFree>
	}
1a000878:	bd10      	pop	{r4, pc}

1a00087a <prvInitialiseNewTask>:
{
1a00087a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00087e:	4681      	mov	r9, r0
1a000880:	460d      	mov	r5, r1
1a000882:	4617      	mov	r7, r2
1a000884:	469a      	mov	sl, r3
1a000886:	9e08      	ldr	r6, [sp, #32]
1a000888:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00088c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a00088e:	0092      	lsls	r2, r2, #2
1a000890:	21a5      	movs	r1, #165	; 0xa5
1a000892:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000894:	f003 f9e6 	bl	1a003c64 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000898:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00089a:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a00089e:	3a01      	subs	r2, #1
1a0008a0:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a0008a4:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0008a8:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0008aa:	2300      	movs	r3, #0
1a0008ac:	2b0f      	cmp	r3, #15
1a0008ae:	d806      	bhi.n	1a0008be <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0008b0:	5cea      	ldrb	r2, [r5, r3]
1a0008b2:	18e1      	adds	r1, r4, r3
1a0008b4:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0008b8:	b10a      	cbz	r2, 1a0008be <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0008ba:	3301      	adds	r3, #1
1a0008bc:	e7f6      	b.n	1a0008ac <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0008be:	2300      	movs	r3, #0
1a0008c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0008c4:	2e06      	cmp	r6, #6
1a0008c6:	d900      	bls.n	1a0008ca <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0008c8:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a0008ca:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a0008cc:	64a6      	str	r6, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
1a0008ce:	2500      	movs	r5, #0
1a0008d0:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0008d2:	1d20      	adds	r0, r4, #4
1a0008d4:	f7ff ff52 	bl	1a00077c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0008d8:	f104 0018 	add.w	r0, r4, #24
1a0008dc:	f7ff ff4e 	bl	1a00077c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0008e0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0008e2:	f1c6 0607 	rsb	r6, r6, #7
1a0008e6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0008e8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a0008ea:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0008ec:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a0008f0:	4652      	mov	r2, sl
1a0008f2:	4649      	mov	r1, r9
1a0008f4:	4638      	mov	r0, r7
1a0008f6:	f000 fba7 	bl	1a001048 <pxPortInitialiseStack>
1a0008fa:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a0008fc:	f1b8 0f00 	cmp.w	r8, #0
1a000900:	d001      	beq.n	1a000906 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a000902:	f8c8 4000 	str.w	r4, [r8]
}
1a000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00090a:	Address 0x000000001a00090a is out of bounds.


1a00090c <prvInitialiseTaskLists>:
{
1a00090c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00090e:	2400      	movs	r4, #0
1a000910:	2c06      	cmp	r4, #6
1a000912:	d808      	bhi.n	1a000926 <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a000914:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a000918:	0093      	lsls	r3, r2, #2
1a00091a:	480c      	ldr	r0, [pc, #48]	; (1a00094c <prvInitialiseTaskLists+0x40>)
1a00091c:	4418      	add	r0, r3
1a00091e:	f7ff ff22 	bl	1a000766 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000922:	3401      	adds	r4, #1
1a000924:	e7f4      	b.n	1a000910 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a000926:	4d0a      	ldr	r5, [pc, #40]	; (1a000950 <prvInitialiseTaskLists+0x44>)
1a000928:	4628      	mov	r0, r5
1a00092a:	f7ff ff1c 	bl	1a000766 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a00092e:	4c09      	ldr	r4, [pc, #36]	; (1a000954 <prvInitialiseTaskLists+0x48>)
1a000930:	4620      	mov	r0, r4
1a000932:	f7ff ff18 	bl	1a000766 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a000936:	4808      	ldr	r0, [pc, #32]	; (1a000958 <prvInitialiseTaskLists+0x4c>)
1a000938:	f7ff ff15 	bl	1a000766 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a00093c:	4807      	ldr	r0, [pc, #28]	; (1a00095c <prvInitialiseTaskLists+0x50>)
1a00093e:	f7ff ff12 	bl	1a000766 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a000942:	4b07      	ldr	r3, [pc, #28]	; (1a000960 <prvInitialiseTaskLists+0x54>)
1a000944:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a000946:	4b07      	ldr	r3, [pc, #28]	; (1a000964 <prvInitialiseTaskLists+0x58>)
1a000948:	601c      	str	r4, [r3, #0]
}
1a00094a:	bd38      	pop	{r3, r4, r5, pc}
1a00094c:	10002a04 	.word	0x10002a04
1a000950:	10002aa8 	.word	0x10002aa8
1a000954:	10002abc 	.word	0x10002abc
1a000958:	10002adc 	.word	0x10002adc
1a00095c:	10002af4 	.word	0x10002af4
1a000960:	100029fc 	.word	0x100029fc
1a000964:	10002a00 	.word	0x10002a00

1a000968 <prvAddNewTaskToReadyList>:
{
1a000968:	b510      	push	{r4, lr}
1a00096a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00096c:	f000 fb9a 	bl	1a0010a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a000970:	4a20      	ldr	r2, [pc, #128]	; (1a0009f4 <prvAddNewTaskToReadyList+0x8c>)
1a000972:	6813      	ldr	r3, [r2, #0]
1a000974:	3301      	adds	r3, #1
1a000976:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a000978:	4b1f      	ldr	r3, [pc, #124]	; (1a0009f8 <prvAddNewTaskToReadyList+0x90>)
1a00097a:	681b      	ldr	r3, [r3, #0]
1a00097c:	b15b      	cbz	r3, 1a000996 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a00097e:	4b1f      	ldr	r3, [pc, #124]	; (1a0009fc <prvAddNewTaskToReadyList+0x94>)
1a000980:	681b      	ldr	r3, [r3, #0]
1a000982:	b96b      	cbnz	r3, 1a0009a0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a000984:	4b1c      	ldr	r3, [pc, #112]	; (1a0009f8 <prvAddNewTaskToReadyList+0x90>)
1a000986:	681b      	ldr	r3, [r3, #0]
1a000988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00098a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00098c:	429a      	cmp	r2, r3
1a00098e:	d807      	bhi.n	1a0009a0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a000990:	4b19      	ldr	r3, [pc, #100]	; (1a0009f8 <prvAddNewTaskToReadyList+0x90>)
1a000992:	601c      	str	r4, [r3, #0]
1a000994:	e004      	b.n	1a0009a0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a000996:	4b18      	ldr	r3, [pc, #96]	; (1a0009f8 <prvAddNewTaskToReadyList+0x90>)
1a000998:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00099a:	6813      	ldr	r3, [r2, #0]
1a00099c:	2b01      	cmp	r3, #1
1a00099e:	d026      	beq.n	1a0009ee <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
1a0009a0:	4a17      	ldr	r2, [pc, #92]	; (1a000a00 <prvAddNewTaskToReadyList+0x98>)
1a0009a2:	6813      	ldr	r3, [r2, #0]
1a0009a4:	3301      	adds	r3, #1
1a0009a6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
1a0009a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0009aa:	2201      	movs	r2, #1
1a0009ac:	409a      	lsls	r2, r3
1a0009ae:	4915      	ldr	r1, [pc, #84]	; (1a000a04 <prvAddNewTaskToReadyList+0x9c>)
1a0009b0:	6808      	ldr	r0, [r1, #0]
1a0009b2:	4302      	orrs	r2, r0
1a0009b4:	600a      	str	r2, [r1, #0]
1a0009b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0009ba:	009a      	lsls	r2, r3, #2
1a0009bc:	1d21      	adds	r1, r4, #4
1a0009be:	4812      	ldr	r0, [pc, #72]	; (1a000a08 <prvAddNewTaskToReadyList+0xa0>)
1a0009c0:	4410      	add	r0, r2
1a0009c2:	f7ff fede 	bl	1a000782 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0009c6:	f000 fb8f 	bl	1a0010e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0009ca:	4b0c      	ldr	r3, [pc, #48]	; (1a0009fc <prvAddNewTaskToReadyList+0x94>)
1a0009cc:	681b      	ldr	r3, [r3, #0]
1a0009ce:	b16b      	cbz	r3, 1a0009ec <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0009d0:	4b09      	ldr	r3, [pc, #36]	; (1a0009f8 <prvAddNewTaskToReadyList+0x90>)
1a0009d2:	681b      	ldr	r3, [r3, #0]
1a0009d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0009d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0009d8:	429a      	cmp	r2, r3
1a0009da:	d207      	bcs.n	1a0009ec <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
1a0009dc:	4b0b      	ldr	r3, [pc, #44]	; (1a000a0c <prvAddNewTaskToReadyList+0xa4>)
1a0009de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0009e2:	601a      	str	r2, [r3, #0]
1a0009e4:	f3bf 8f4f 	dsb	sy
1a0009e8:	f3bf 8f6f 	isb	sy
}
1a0009ec:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a0009ee:	f7ff ff8d 	bl	1a00090c <prvInitialiseTaskLists>
1a0009f2:	e7d5      	b.n	1a0009a0 <prvAddNewTaskToReadyList+0x38>
1a0009f4:	10002a90 	.word	0x10002a90
1a0009f8:	100029f8 	.word	0x100029f8
1a0009fc:	10002af0 	.word	0x10002af0
1a000a00:	10002aa0 	.word	0x10002aa0
1a000a04:	10002aa4 	.word	0x10002aa4
1a000a08:	10002a04 	.word	0x10002a04
1a000a0c:	e000ed04 	.word	0xe000ed04

1a000a10 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000a10:	4b0f      	ldr	r3, [pc, #60]	; (1a000a50 <prvCheckTasksWaitingTermination+0x40>)
1a000a12:	681b      	ldr	r3, [r3, #0]
1a000a14:	b1d3      	cbz	r3, 1a000a4c <prvCheckTasksWaitingTermination+0x3c>
{
1a000a16:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a000a18:	f000 fb44 	bl	1a0010a4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a000a1c:	4b0d      	ldr	r3, [pc, #52]	; (1a000a54 <prvCheckTasksWaitingTermination+0x44>)
1a000a1e:	68db      	ldr	r3, [r3, #12]
1a000a20:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a000a22:	1d20      	adds	r0, r4, #4
1a000a24:	f7ff fed2 	bl	1a0007cc <uxListRemove>
				--uxCurrentNumberOfTasks;
1a000a28:	4a0b      	ldr	r2, [pc, #44]	; (1a000a58 <prvCheckTasksWaitingTermination+0x48>)
1a000a2a:	6813      	ldr	r3, [r2, #0]
1a000a2c:	3b01      	subs	r3, #1
1a000a2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a000a30:	4a07      	ldr	r2, [pc, #28]	; (1a000a50 <prvCheckTasksWaitingTermination+0x40>)
1a000a32:	6813      	ldr	r3, [r2, #0]
1a000a34:	3b01      	subs	r3, #1
1a000a36:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a000a38:	f000 fb56 	bl	1a0010e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a000a3c:	4620      	mov	r0, r4
1a000a3e:	f7ff ff13 	bl	1a000868 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000a42:	4b03      	ldr	r3, [pc, #12]	; (1a000a50 <prvCheckTasksWaitingTermination+0x40>)
1a000a44:	681b      	ldr	r3, [r3, #0]
1a000a46:	2b00      	cmp	r3, #0
1a000a48:	d1e6      	bne.n	1a000a18 <prvCheckTasksWaitingTermination+0x8>
}
1a000a4a:	bd10      	pop	{r4, pc}
1a000a4c:	4770      	bx	lr
1a000a4e:	bf00      	nop
1a000a50:	10002a94 	.word	0x10002a94
1a000a54:	10002af4 	.word	0x10002af4
1a000a58:	10002a90 	.word	0x10002a90

1a000a5c <prvIdleTask>:
{
1a000a5c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a000a5e:	f7ff ffd7 	bl	1a000a10 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a000a62:	4b06      	ldr	r3, [pc, #24]	; (1a000a7c <prvIdleTask+0x20>)
1a000a64:	681b      	ldr	r3, [r3, #0]
1a000a66:	2b01      	cmp	r3, #1
1a000a68:	d9f9      	bls.n	1a000a5e <prvIdleTask+0x2>
				taskYIELD();
1a000a6a:	4b05      	ldr	r3, [pc, #20]	; (1a000a80 <prvIdleTask+0x24>)
1a000a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a70:	601a      	str	r2, [r3, #0]
1a000a72:	f3bf 8f4f 	dsb	sy
1a000a76:	f3bf 8f6f 	isb	sy
1a000a7a:	e7f0      	b.n	1a000a5e <prvIdleTask+0x2>
1a000a7c:	10002a04 	.word	0x10002a04
1a000a80:	e000ed04 	.word	0xe000ed04

1a000a84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a000a84:	b538      	push	{r3, r4, r5, lr}
1a000a86:	4604      	mov	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a000a88:	4b17      	ldr	r3, [pc, #92]	; (1a000ae8 <prvAddCurrentTaskToDelayedList+0x64>)
1a000a8a:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a000a8c:	4b17      	ldr	r3, [pc, #92]	; (1a000aec <prvAddCurrentTaskToDelayedList+0x68>)
1a000a8e:	6818      	ldr	r0, [r3, #0]
1a000a90:	3004      	adds	r0, #4
1a000a92:	f7ff fe9b 	bl	1a0007cc <uxListRemove>
1a000a96:	b950      	cbnz	r0, 1a000aae <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a000a98:	4b14      	ldr	r3, [pc, #80]	; (1a000aec <prvAddCurrentTaskToDelayedList+0x68>)
1a000a9a:	681b      	ldr	r3, [r3, #0]
1a000a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000a9e:	2301      	movs	r3, #1
1a000aa0:	fa03 f202 	lsl.w	r2, r3, r2
1a000aa4:	4912      	ldr	r1, [pc, #72]	; (1a000af0 <prvAddCurrentTaskToDelayedList+0x6c>)
1a000aa6:	680b      	ldr	r3, [r1, #0]
1a000aa8:	ea23 0302 	bic.w	r3, r3, r2
1a000aac:	600b      	str	r3, [r1, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
1a000aae:	442c      	add	r4, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a000ab0:	4b0e      	ldr	r3, [pc, #56]	; (1a000aec <prvAddCurrentTaskToDelayedList+0x68>)
1a000ab2:	681b      	ldr	r3, [r3, #0]
1a000ab4:	605c      	str	r4, [r3, #4]

		if( xTimeToWake < xConstTickCount )
1a000ab6:	42a5      	cmp	r5, r4
1a000ab8:	d907      	bls.n	1a000aca <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000aba:	4b0e      	ldr	r3, [pc, #56]	; (1a000af4 <prvAddCurrentTaskToDelayedList+0x70>)
1a000abc:	6818      	ldr	r0, [r3, #0]
1a000abe:	4b0b      	ldr	r3, [pc, #44]	; (1a000aec <prvAddCurrentTaskToDelayedList+0x68>)
1a000ac0:	6819      	ldr	r1, [r3, #0]
1a000ac2:	3104      	adds	r1, #4
1a000ac4:	f7ff fe68 	bl	1a000798 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a000ac8:	bd38      	pop	{r3, r4, r5, pc}
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000aca:	4b0b      	ldr	r3, [pc, #44]	; (1a000af8 <prvAddCurrentTaskToDelayedList+0x74>)
1a000acc:	6818      	ldr	r0, [r3, #0]
1a000ace:	4b07      	ldr	r3, [pc, #28]	; (1a000aec <prvAddCurrentTaskToDelayedList+0x68>)
1a000ad0:	6819      	ldr	r1, [r3, #0]
1a000ad2:	3104      	adds	r1, #4
1a000ad4:	f7ff fe60 	bl	1a000798 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
1a000ad8:	4b08      	ldr	r3, [pc, #32]	; (1a000afc <prvAddCurrentTaskToDelayedList+0x78>)
1a000ada:	681b      	ldr	r3, [r3, #0]
1a000adc:	42a3      	cmp	r3, r4
1a000ade:	d9f3      	bls.n	1a000ac8 <prvAddCurrentTaskToDelayedList+0x44>
				xNextTaskUnblockTime = xTimeToWake;
1a000ae0:	4b06      	ldr	r3, [pc, #24]	; (1a000afc <prvAddCurrentTaskToDelayedList+0x78>)
1a000ae2:	601c      	str	r4, [r3, #0]
}
1a000ae4:	e7f0      	b.n	1a000ac8 <prvAddCurrentTaskToDelayedList+0x44>
1a000ae6:	bf00      	nop
1a000ae8:	10002b08 	.word	0x10002b08
1a000aec:	100029f8 	.word	0x100029f8
1a000af0:	10002aa4 	.word	0x10002aa4
1a000af4:	10002a00 	.word	0x10002a00
1a000af8:	100029fc 	.word	0x100029fc
1a000afc:	10002ad4 	.word	0x10002ad4

1a000b00 <xTaskCreate>:
	{
1a000b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a000b04:	b085      	sub	sp, #20
1a000b06:	4607      	mov	r7, r0
1a000b08:	4688      	mov	r8, r1
1a000b0a:	4614      	mov	r4, r2
1a000b0c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000b0e:	0090      	lsls	r0, r2, #2
1a000b10:	f7ff fde6 	bl	1a0006e0 <pvPortMalloc>
			if( pxStack != NULL )
1a000b14:	b1e8      	cbz	r0, 1a000b52 <xTaskCreate+0x52>
1a000b16:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a000b18:	2058      	movs	r0, #88	; 0x58
1a000b1a:	f7ff fde1 	bl	1a0006e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a000b1e:	4605      	mov	r5, r0
1a000b20:	b198      	cbz	r0, 1a000b4a <xTaskCreate+0x4a>
					pxNewTCB->pxStack = pxStack;
1a000b22:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a000b24:	b1d5      	cbz	r5, 1a000b5c <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a000b26:	2300      	movs	r3, #0
1a000b28:	9303      	str	r3, [sp, #12]
1a000b2a:	9502      	str	r5, [sp, #8]
1a000b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a000b2e:	9301      	str	r3, [sp, #4]
1a000b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a000b32:	9300      	str	r3, [sp, #0]
1a000b34:	464b      	mov	r3, r9
1a000b36:	4622      	mov	r2, r4
1a000b38:	4641      	mov	r1, r8
1a000b3a:	4638      	mov	r0, r7
1a000b3c:	f7ff fe9d 	bl	1a00087a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a000b40:	4628      	mov	r0, r5
1a000b42:	f7ff ff11 	bl	1a000968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a000b46:	2001      	movs	r0, #1
1a000b48:	e005      	b.n	1a000b56 <xTaskCreate+0x56>
					vPortFree( pxStack );
1a000b4a:	4630      	mov	r0, r6
1a000b4c:	f7ff fe00 	bl	1a000750 <vPortFree>
1a000b50:	e7e8      	b.n	1a000b24 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a000b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a000b56:	b005      	add	sp, #20
1a000b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a000b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a000b60:	e7f9      	b.n	1a000b56 <xTaskCreate+0x56>
1a000b62:	Address 0x000000001a000b62 is out of bounds.


1a000b64 <vTaskStartScheduler>:
{
1a000b64:	b500      	push	{lr}
1a000b66:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
1a000b68:	4b17      	ldr	r3, [pc, #92]	; (1a000bc8 <vTaskStartScheduler+0x64>)
1a000b6a:	9301      	str	r3, [sp, #4]
1a000b6c:	2300      	movs	r3, #0
1a000b6e:	9300      	str	r3, [sp, #0]
1a000b70:	225a      	movs	r2, #90	; 0x5a
1a000b72:	4916      	ldr	r1, [pc, #88]	; (1a000bcc <vTaskStartScheduler+0x68>)
1a000b74:	4816      	ldr	r0, [pc, #88]	; (1a000bd0 <vTaskStartScheduler+0x6c>)
1a000b76:	f7ff ffc3 	bl	1a000b00 <xTaskCreate>
	if( xReturn == pdPASS )
1a000b7a:	2801      	cmp	r0, #1
1a000b7c:	d005      	beq.n	1a000b8a <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a000b7e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000b82:	d017      	beq.n	1a000bb4 <vTaskStartScheduler+0x50>
}
1a000b84:	b003      	add	sp, #12
1a000b86:	f85d fb04 	ldr.w	pc, [sp], #4
1a000b8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b8e:	f383 8811 	msr	BASEPRI, r3
1a000b92:	f3bf 8f6f 	isb	sy
1a000b96:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a000b9a:	4b0e      	ldr	r3, [pc, #56]	; (1a000bd4 <vTaskStartScheduler+0x70>)
1a000b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000ba0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a000ba2:	4b0d      	ldr	r3, [pc, #52]	; (1a000bd8 <vTaskStartScheduler+0x74>)
1a000ba4:	2201      	movs	r2, #1
1a000ba6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a000ba8:	4b0c      	ldr	r3, [pc, #48]	; (1a000bdc <vTaskStartScheduler+0x78>)
1a000baa:	2200      	movs	r2, #0
1a000bac:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a000bae:	f000 fb1b 	bl	1a0011e8 <xPortStartScheduler>
1a000bb2:	e7e7      	b.n	1a000b84 <vTaskStartScheduler+0x20>
1a000bb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bb8:	f383 8811 	msr	BASEPRI, r3
1a000bbc:	f3bf 8f6f 	isb	sy
1a000bc0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a000bc4:	e7fe      	b.n	1a000bc4 <vTaskStartScheduler+0x60>
1a000bc6:	bf00      	nop
1a000bc8:	10002ad0 	.word	0x10002ad0
1a000bcc:	1a007ffc 	.word	0x1a007ffc
1a000bd0:	1a000a5d 	.word	0x1a000a5d
1a000bd4:	10002ad4 	.word	0x10002ad4
1a000bd8:	10002af0 	.word	0x10002af0
1a000bdc:	10002b08 	.word	0x10002b08

1a000be0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a000be0:	4a02      	ldr	r2, [pc, #8]	; (1a000bec <vTaskSuspendAll+0xc>)
1a000be2:	6813      	ldr	r3, [r2, #0]
1a000be4:	3301      	adds	r3, #1
1a000be6:	6013      	str	r3, [r2, #0]
}
1a000be8:	4770      	bx	lr
1a000bea:	bf00      	nop
1a000bec:	10002a9c 	.word	0x10002a9c

1a000bf0 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a000bf0:	4b01      	ldr	r3, [pc, #4]	; (1a000bf8 <xTaskGetTickCount+0x8>)
1a000bf2:	6818      	ldr	r0, [r3, #0]
}
1a000bf4:	4770      	bx	lr
1a000bf6:	bf00      	nop
1a000bf8:	10002b08 	.word	0x10002b08

1a000bfc <xTaskIncrementTick>:
{
1a000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a000bfe:	4b3a      	ldr	r3, [pc, #232]	; (1a000ce8 <xTaskIncrementTick+0xec>)
1a000c00:	681b      	ldr	r3, [r3, #0]
1a000c02:	2b00      	cmp	r3, #0
1a000c04:	d164      	bne.n	1a000cd0 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a000c06:	4b39      	ldr	r3, [pc, #228]	; (1a000cec <xTaskIncrementTick+0xf0>)
1a000c08:	681d      	ldr	r5, [r3, #0]
1a000c0a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a000c0c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a000c0e:	b9c5      	cbnz	r5, 1a000c42 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a000c10:	4b37      	ldr	r3, [pc, #220]	; (1a000cf0 <xTaskIncrementTick+0xf4>)
1a000c12:	681b      	ldr	r3, [r3, #0]
1a000c14:	681b      	ldr	r3, [r3, #0]
1a000c16:	b143      	cbz	r3, 1a000c2a <xTaskIncrementTick+0x2e>
1a000c18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c1c:	f383 8811 	msr	BASEPRI, r3
1a000c20:	f3bf 8f6f 	isb	sy
1a000c24:	f3bf 8f4f 	dsb	sy
1a000c28:	e7fe      	b.n	1a000c28 <xTaskIncrementTick+0x2c>
1a000c2a:	4a31      	ldr	r2, [pc, #196]	; (1a000cf0 <xTaskIncrementTick+0xf4>)
1a000c2c:	6811      	ldr	r1, [r2, #0]
1a000c2e:	4b31      	ldr	r3, [pc, #196]	; (1a000cf4 <xTaskIncrementTick+0xf8>)
1a000c30:	6818      	ldr	r0, [r3, #0]
1a000c32:	6010      	str	r0, [r2, #0]
1a000c34:	6019      	str	r1, [r3, #0]
1a000c36:	4a30      	ldr	r2, [pc, #192]	; (1a000cf8 <xTaskIncrementTick+0xfc>)
1a000c38:	6813      	ldr	r3, [r2, #0]
1a000c3a:	3301      	adds	r3, #1
1a000c3c:	6013      	str	r3, [r2, #0]
1a000c3e:	f7ff fdfd 	bl	1a00083c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a000c42:	4b2e      	ldr	r3, [pc, #184]	; (1a000cfc <xTaskIncrementTick+0x100>)
1a000c44:	681b      	ldr	r3, [r3, #0]
1a000c46:	42ab      	cmp	r3, r5
1a000c48:	d938      	bls.n	1a000cbc <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a000c4a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a000c4c:	4b2c      	ldr	r3, [pc, #176]	; (1a000d00 <xTaskIncrementTick+0x104>)
1a000c4e:	681b      	ldr	r3, [r3, #0]
1a000c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a000c52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000c56:	009a      	lsls	r2, r3, #2
1a000c58:	4b2a      	ldr	r3, [pc, #168]	; (1a000d04 <xTaskIncrementTick+0x108>)
1a000c5a:	589b      	ldr	r3, [r3, r2]
1a000c5c:	2b01      	cmp	r3, #1
1a000c5e:	d93c      	bls.n	1a000cda <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a000c60:	2401      	movs	r4, #1
1a000c62:	e03a      	b.n	1a000cda <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a000c64:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000c66:	4b22      	ldr	r3, [pc, #136]	; (1a000cf0 <xTaskIncrementTick+0xf4>)
1a000c68:	681b      	ldr	r3, [r3, #0]
1a000c6a:	681b      	ldr	r3, [r3, #0]
1a000c6c:	b343      	cbz	r3, 1a000cc0 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000c6e:	4b20      	ldr	r3, [pc, #128]	; (1a000cf0 <xTaskIncrementTick+0xf4>)
1a000c70:	681b      	ldr	r3, [r3, #0]
1a000c72:	68db      	ldr	r3, [r3, #12]
1a000c74:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a000c76:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a000c78:	429d      	cmp	r5, r3
1a000c7a:	d326      	bcc.n	1a000cca <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a000c7c:	1d37      	adds	r7, r6, #4
1a000c7e:	4638      	mov	r0, r7
1a000c80:	f7ff fda4 	bl	1a0007cc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a000c84:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a000c86:	b11b      	cbz	r3, 1a000c90 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a000c88:	f106 0018 	add.w	r0, r6, #24
1a000c8c:	f7ff fd9e 	bl	1a0007cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a000c90:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a000c92:	2201      	movs	r2, #1
1a000c94:	409a      	lsls	r2, r3
1a000c96:	491c      	ldr	r1, [pc, #112]	; (1a000d08 <xTaskIncrementTick+0x10c>)
1a000c98:	6808      	ldr	r0, [r1, #0]
1a000c9a:	4302      	orrs	r2, r0
1a000c9c:	600a      	str	r2, [r1, #0]
1a000c9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000ca2:	009a      	lsls	r2, r3, #2
1a000ca4:	4639      	mov	r1, r7
1a000ca6:	4817      	ldr	r0, [pc, #92]	; (1a000d04 <xTaskIncrementTick+0x108>)
1a000ca8:	4410      	add	r0, r2
1a000caa:	f7ff fd6a 	bl	1a000782 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a000cae:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a000cb0:	4b13      	ldr	r3, [pc, #76]	; (1a000d00 <xTaskIncrementTick+0x104>)
1a000cb2:	681b      	ldr	r3, [r3, #0]
1a000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a000cb6:	429a      	cmp	r2, r3
1a000cb8:	d2d4      	bcs.n	1a000c64 <xTaskIncrementTick+0x68>
1a000cba:	e7d4      	b.n	1a000c66 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a000cbc:	2400      	movs	r4, #0
1a000cbe:	e7d2      	b.n	1a000c66 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000cc0:	4b0e      	ldr	r3, [pc, #56]	; (1a000cfc <xTaskIncrementTick+0x100>)
1a000cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000cc6:	601a      	str	r2, [r3, #0]
					break;
1a000cc8:	e7c0      	b.n	1a000c4c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a000cca:	4a0c      	ldr	r2, [pc, #48]	; (1a000cfc <xTaskIncrementTick+0x100>)
1a000ccc:	6013      	str	r3, [r2, #0]
						break;
1a000cce:	e7bd      	b.n	1a000c4c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a000cd0:	4a0e      	ldr	r2, [pc, #56]	; (1a000d0c <xTaskIncrementTick+0x110>)
1a000cd2:	6813      	ldr	r3, [r2, #0]
1a000cd4:	3301      	adds	r3, #1
1a000cd6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a000cd8:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a000cda:	4b0d      	ldr	r3, [pc, #52]	; (1a000d10 <xTaskIncrementTick+0x114>)
1a000cdc:	681b      	ldr	r3, [r3, #0]
1a000cde:	b103      	cbz	r3, 1a000ce2 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a000ce0:	2401      	movs	r4, #1
}
1a000ce2:	4620      	mov	r0, r4
1a000ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000ce6:	bf00      	nop
1a000ce8:	10002a9c 	.word	0x10002a9c
1a000cec:	10002b08 	.word	0x10002b08
1a000cf0:	100029fc 	.word	0x100029fc
1a000cf4:	10002a00 	.word	0x10002a00
1a000cf8:	10002ad8 	.word	0x10002ad8
1a000cfc:	10002ad4 	.word	0x10002ad4
1a000d00:	100029f8 	.word	0x100029f8
1a000d04:	10002a04 	.word	0x10002a04
1a000d08:	10002aa4 	.word	0x10002aa4
1a000d0c:	10002a98 	.word	0x10002a98
1a000d10:	10002b0c 	.word	0x10002b0c

1a000d14 <xTaskResumeAll>:
{
1a000d14:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a000d16:	4b35      	ldr	r3, [pc, #212]	; (1a000dec <xTaskResumeAll+0xd8>)
1a000d18:	681b      	ldr	r3, [r3, #0]
1a000d1a:	b943      	cbnz	r3, 1a000d2e <xTaskResumeAll+0x1a>
1a000d1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d20:	f383 8811 	msr	BASEPRI, r3
1a000d24:	f3bf 8f6f 	isb	sy
1a000d28:	f3bf 8f4f 	dsb	sy
1a000d2c:	e7fe      	b.n	1a000d2c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a000d2e:	f000 f9b9 	bl	1a0010a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a000d32:	4b2e      	ldr	r3, [pc, #184]	; (1a000dec <xTaskResumeAll+0xd8>)
1a000d34:	681a      	ldr	r2, [r3, #0]
1a000d36:	3a01      	subs	r2, #1
1a000d38:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a000d3a:	681b      	ldr	r3, [r3, #0]
1a000d3c:	2b00      	cmp	r3, #0
1a000d3e:	d14d      	bne.n	1a000ddc <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a000d40:	4b2b      	ldr	r3, [pc, #172]	; (1a000df0 <xTaskResumeAll+0xdc>)
1a000d42:	681b      	ldr	r3, [r3, #0]
1a000d44:	b90b      	cbnz	r3, 1a000d4a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a000d46:	2400      	movs	r4, #0
1a000d48:	e049      	b.n	1a000dde <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a000d4a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a000d4c:	4b29      	ldr	r3, [pc, #164]	; (1a000df4 <xTaskResumeAll+0xe0>)
1a000d4e:	681b      	ldr	r3, [r3, #0]
1a000d50:	b31b      	cbz	r3, 1a000d9a <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a000d52:	4b28      	ldr	r3, [pc, #160]	; (1a000df4 <xTaskResumeAll+0xe0>)
1a000d54:	68db      	ldr	r3, [r3, #12]
1a000d56:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a000d58:	f104 0018 	add.w	r0, r4, #24
1a000d5c:	f7ff fd36 	bl	1a0007cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a000d60:	1d25      	adds	r5, r4, #4
1a000d62:	4628      	mov	r0, r5
1a000d64:	f7ff fd32 	bl	1a0007cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a000d68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000d6a:	2201      	movs	r2, #1
1a000d6c:	409a      	lsls	r2, r3
1a000d6e:	4922      	ldr	r1, [pc, #136]	; (1a000df8 <xTaskResumeAll+0xe4>)
1a000d70:	6808      	ldr	r0, [r1, #0]
1a000d72:	4302      	orrs	r2, r0
1a000d74:	600a      	str	r2, [r1, #0]
1a000d76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000d7a:	009a      	lsls	r2, r3, #2
1a000d7c:	4629      	mov	r1, r5
1a000d7e:	481f      	ldr	r0, [pc, #124]	; (1a000dfc <xTaskResumeAll+0xe8>)
1a000d80:	4410      	add	r0, r2
1a000d82:	f7ff fcfe 	bl	1a000782 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a000d86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a000d88:	4b1d      	ldr	r3, [pc, #116]	; (1a000e00 <xTaskResumeAll+0xec>)
1a000d8a:	681b      	ldr	r3, [r3, #0]
1a000d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a000d8e:	429a      	cmp	r2, r3
1a000d90:	d3dc      	bcc.n	1a000d4c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a000d92:	4b1c      	ldr	r3, [pc, #112]	; (1a000e04 <xTaskResumeAll+0xf0>)
1a000d94:	2201      	movs	r2, #1
1a000d96:	601a      	str	r2, [r3, #0]
1a000d98:	e7d8      	b.n	1a000d4c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a000d9a:	b10c      	cbz	r4, 1a000da0 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a000d9c:	f7ff fd4e 	bl	1a00083c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a000da0:	4b19      	ldr	r3, [pc, #100]	; (1a000e08 <xTaskResumeAll+0xf4>)
1a000da2:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a000da4:	b974      	cbnz	r4, 1a000dc4 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a000da6:	4b17      	ldr	r3, [pc, #92]	; (1a000e04 <xTaskResumeAll+0xf0>)
1a000da8:	681b      	ldr	r3, [r3, #0]
1a000daa:	b1e3      	cbz	r3, 1a000de6 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a000dac:	4b17      	ldr	r3, [pc, #92]	; (1a000e0c <xTaskResumeAll+0xf8>)
1a000dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000db2:	601a      	str	r2, [r3, #0]
1a000db4:	f3bf 8f4f 	dsb	sy
1a000db8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a000dbc:	2401      	movs	r4, #1
1a000dbe:	e00e      	b.n	1a000dde <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a000dc0:	3c01      	subs	r4, #1
1a000dc2:	d007      	beq.n	1a000dd4 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a000dc4:	f7ff ff1a 	bl	1a000bfc <xTaskIncrementTick>
1a000dc8:	2800      	cmp	r0, #0
1a000dca:	d0f9      	beq.n	1a000dc0 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a000dcc:	4b0d      	ldr	r3, [pc, #52]	; (1a000e04 <xTaskResumeAll+0xf0>)
1a000dce:	2201      	movs	r2, #1
1a000dd0:	601a      	str	r2, [r3, #0]
1a000dd2:	e7f5      	b.n	1a000dc0 <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a000dd4:	4b0c      	ldr	r3, [pc, #48]	; (1a000e08 <xTaskResumeAll+0xf4>)
1a000dd6:	2200      	movs	r2, #0
1a000dd8:	601a      	str	r2, [r3, #0]
1a000dda:	e7e4      	b.n	1a000da6 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a000ddc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000dde:	f000 f983 	bl	1a0010e8 <vPortExitCritical>
}
1a000de2:	4620      	mov	r0, r4
1a000de4:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a000de6:	2400      	movs	r4, #0
1a000de8:	e7f9      	b.n	1a000dde <xTaskResumeAll+0xca>
1a000dea:	bf00      	nop
1a000dec:	10002a9c 	.word	0x10002a9c
1a000df0:	10002a90 	.word	0x10002a90
1a000df4:	10002adc 	.word	0x10002adc
1a000df8:	10002aa4 	.word	0x10002aa4
1a000dfc:	10002a04 	.word	0x10002a04
1a000e00:	100029f8 	.word	0x100029f8
1a000e04:	10002b0c 	.word	0x10002b0c
1a000e08:	10002a98 	.word	0x10002a98
1a000e0c:	e000ed04 	.word	0xe000ed04

1a000e10 <vTaskDelayUntil>:
	{
1a000e10:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a000e12:	b150      	cbz	r0, 1a000e2a <vTaskDelayUntil+0x1a>
1a000e14:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a000e16:	b989      	cbnz	r1, 1a000e3c <vTaskDelayUntil+0x2c>
1a000e18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e1c:	f383 8811 	msr	BASEPRI, r3
1a000e20:	f3bf 8f6f 	isb	sy
1a000e24:	f3bf 8f4f 	dsb	sy
1a000e28:	e7fe      	b.n	1a000e28 <vTaskDelayUntil+0x18>
1a000e2a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e2e:	f383 8811 	msr	BASEPRI, r3
1a000e32:	f3bf 8f6f 	isb	sy
1a000e36:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
1a000e3a:	e7fe      	b.n	1a000e3a <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a000e3c:	4b1a      	ldr	r3, [pc, #104]	; (1a000ea8 <vTaskDelayUntil+0x98>)
1a000e3e:	681b      	ldr	r3, [r3, #0]
1a000e40:	b143      	cbz	r3, 1a000e54 <vTaskDelayUntil+0x44>
1a000e42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e46:	f383 8811 	msr	BASEPRI, r3
1a000e4a:	f3bf 8f6f 	isb	sy
1a000e4e:	f3bf 8f4f 	dsb	sy
1a000e52:	e7fe      	b.n	1a000e52 <vTaskDelayUntil+0x42>
1a000e54:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a000e56:	f7ff fec3 	bl	1a000be0 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a000e5a:	4b14      	ldr	r3, [pc, #80]	; (1a000eac <vTaskDelayUntil+0x9c>)
1a000e5c:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a000e5e:	682a      	ldr	r2, [r5, #0]
1a000e60:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a000e62:	4282      	cmp	r2, r0
1a000e64:	d909      	bls.n	1a000e7a <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a000e66:	42a2      	cmp	r2, r4
1a000e68:	d801      	bhi.n	1a000e6e <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
1a000e6a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a000e6c:	e00e      	b.n	1a000e8c <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a000e6e:	42a0      	cmp	r0, r4
1a000e70:	d301      	bcc.n	1a000e76 <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
1a000e72:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a000e74:	e00a      	b.n	1a000e8c <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a000e76:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a000e78:	e004      	b.n	1a000e84 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a000e7a:	42a2      	cmp	r2, r4
1a000e7c:	d801      	bhi.n	1a000e82 <vTaskDelayUntil+0x72>
1a000e7e:	42a0      	cmp	r0, r4
1a000e80:	d210      	bcs.n	1a000ea4 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a000e82:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a000e84:	2100      	movs	r1, #0
1a000e86:	1a20      	subs	r0, r4, r0
1a000e88:	f7ff fdfc 	bl	1a000a84 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
1a000e8c:	f7ff ff42 	bl	1a000d14 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a000e90:	b938      	cbnz	r0, 1a000ea2 <vTaskDelayUntil+0x92>
			portYIELD_WITHIN_API();
1a000e92:	4b07      	ldr	r3, [pc, #28]	; (1a000eb0 <vTaskDelayUntil+0xa0>)
1a000e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e98:	601a      	str	r2, [r3, #0]
1a000e9a:	f3bf 8f4f 	dsb	sy
1a000e9e:	f3bf 8f6f 	isb	sy
	}
1a000ea2:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
1a000ea4:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a000ea6:	e7f1      	b.n	1a000e8c <vTaskDelayUntil+0x7c>
1a000ea8:	10002a9c 	.word	0x10002a9c
1a000eac:	10002b08 	.word	0x10002b08
1a000eb0:	e000ed04 	.word	0xe000ed04

1a000eb4 <vTaskDelay>:
	{
1a000eb4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a000eb6:	b1a8      	cbz	r0, 1a000ee4 <vTaskDelay+0x30>
1a000eb8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a000eba:	4b0f      	ldr	r3, [pc, #60]	; (1a000ef8 <vTaskDelay+0x44>)
1a000ebc:	681b      	ldr	r3, [r3, #0]
1a000ebe:	b143      	cbz	r3, 1a000ed2 <vTaskDelay+0x1e>
1a000ec0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ec4:	f383 8811 	msr	BASEPRI, r3
1a000ec8:	f3bf 8f6f 	isb	sy
1a000ecc:	f3bf 8f4f 	dsb	sy
1a000ed0:	e7fe      	b.n	1a000ed0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a000ed2:	f7ff fe85 	bl	1a000be0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a000ed6:	2100      	movs	r1, #0
1a000ed8:	4620      	mov	r0, r4
1a000eda:	f7ff fdd3 	bl	1a000a84 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a000ede:	f7ff ff19 	bl	1a000d14 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a000ee2:	b938      	cbnz	r0, 1a000ef4 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a000ee4:	4b05      	ldr	r3, [pc, #20]	; (1a000efc <vTaskDelay+0x48>)
1a000ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000eea:	601a      	str	r2, [r3, #0]
1a000eec:	f3bf 8f4f 	dsb	sy
1a000ef0:	f3bf 8f6f 	isb	sy
	}
1a000ef4:	bd10      	pop	{r4, pc}
1a000ef6:	bf00      	nop
1a000ef8:	10002a9c 	.word	0x10002a9c
1a000efc:	e000ed04 	.word	0xe000ed04

1a000f00 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a000f00:	4b2d      	ldr	r3, [pc, #180]	; (1a000fb8 <vTaskSwitchContext+0xb8>)
1a000f02:	681b      	ldr	r3, [r3, #0]
1a000f04:	b11b      	cbz	r3, 1a000f0e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a000f06:	4b2d      	ldr	r3, [pc, #180]	; (1a000fbc <vTaskSwitchContext+0xbc>)
1a000f08:	2201      	movs	r2, #1
1a000f0a:	601a      	str	r2, [r3, #0]
1a000f0c:	4770      	bx	lr
{
1a000f0e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a000f10:	4b2a      	ldr	r3, [pc, #168]	; (1a000fbc <vTaskSwitchContext+0xbc>)
1a000f12:	2200      	movs	r2, #0
1a000f14:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a000f16:	4b2a      	ldr	r3, [pc, #168]	; (1a000fc0 <vTaskSwitchContext+0xc0>)
1a000f18:	681b      	ldr	r3, [r3, #0]
1a000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a000f1c:	681a      	ldr	r2, [r3, #0]
1a000f1e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a000f22:	d103      	bne.n	1a000f2c <vTaskSwitchContext+0x2c>
1a000f24:	685a      	ldr	r2, [r3, #4]
1a000f26:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a000f2a:	d01b      	beq.n	1a000f64 <vTaskSwitchContext+0x64>
1a000f2c:	4b24      	ldr	r3, [pc, #144]	; (1a000fc0 <vTaskSwitchContext+0xc0>)
1a000f2e:	6818      	ldr	r0, [r3, #0]
1a000f30:	6819      	ldr	r1, [r3, #0]
1a000f32:	3134      	adds	r1, #52	; 0x34
1a000f34:	f7ff fc74 	bl	1a000820 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a000f38:	4b22      	ldr	r3, [pc, #136]	; (1a000fc4 <vTaskSwitchContext+0xc4>)
1a000f3a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a000f3c:	fab3 f383 	clz	r3, r3
1a000f40:	b2db      	uxtb	r3, r3
1a000f42:	f1c3 031f 	rsb	r3, r3, #31
1a000f46:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a000f4a:	008a      	lsls	r2, r1, #2
1a000f4c:	491e      	ldr	r1, [pc, #120]	; (1a000fc8 <vTaskSwitchContext+0xc8>)
1a000f4e:	588a      	ldr	r2, [r1, r2]
1a000f50:	b98a      	cbnz	r2, 1a000f76 <vTaskSwitchContext+0x76>
	__asm volatile
1a000f52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f56:	f383 8811 	msr	BASEPRI, r3
1a000f5a:	f3bf 8f6f 	isb	sy
1a000f5e:	f3bf 8f4f 	dsb	sy
1a000f62:	e7fe      	b.n	1a000f62 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a000f64:	689a      	ldr	r2, [r3, #8]
1a000f66:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a000f6a:	d1df      	bne.n	1a000f2c <vTaskSwitchContext+0x2c>
1a000f6c:	68db      	ldr	r3, [r3, #12]
1a000f6e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a000f72:	d1db      	bne.n	1a000f2c <vTaskSwitchContext+0x2c>
1a000f74:	e7e0      	b.n	1a000f38 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a000f76:	4814      	ldr	r0, [pc, #80]	; (1a000fc8 <vTaskSwitchContext+0xc8>)
1a000f78:	009a      	lsls	r2, r3, #2
1a000f7a:	18d4      	adds	r4, r2, r3
1a000f7c:	00a1      	lsls	r1, r4, #2
1a000f7e:	4401      	add	r1, r0
1a000f80:	684c      	ldr	r4, [r1, #4]
1a000f82:	6864      	ldr	r4, [r4, #4]
1a000f84:	604c      	str	r4, [r1, #4]
1a000f86:	441a      	add	r2, r3
1a000f88:	0091      	lsls	r1, r2, #2
1a000f8a:	3108      	adds	r1, #8
1a000f8c:	4408      	add	r0, r1
1a000f8e:	4284      	cmp	r4, r0
1a000f90:	d009      	beq.n	1a000fa6 <vTaskSwitchContext+0xa6>
1a000f92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000f96:	009a      	lsls	r2, r3, #2
1a000f98:	4b0b      	ldr	r3, [pc, #44]	; (1a000fc8 <vTaskSwitchContext+0xc8>)
1a000f9a:	4413      	add	r3, r2
1a000f9c:	685b      	ldr	r3, [r3, #4]
1a000f9e:	68da      	ldr	r2, [r3, #12]
1a000fa0:	4b07      	ldr	r3, [pc, #28]	; (1a000fc0 <vTaskSwitchContext+0xc0>)
1a000fa2:	601a      	str	r2, [r3, #0]
}
1a000fa4:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a000fa6:	6860      	ldr	r0, [r4, #4]
1a000fa8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a000fac:	0091      	lsls	r1, r2, #2
1a000fae:	4a06      	ldr	r2, [pc, #24]	; (1a000fc8 <vTaskSwitchContext+0xc8>)
1a000fb0:	440a      	add	r2, r1
1a000fb2:	6050      	str	r0, [r2, #4]
1a000fb4:	e7ed      	b.n	1a000f92 <vTaskSwitchContext+0x92>
1a000fb6:	bf00      	nop
1a000fb8:	10002a9c 	.word	0x10002a9c
1a000fbc:	10002b0c 	.word	0x10002b0c
1a000fc0:	100029f8 	.word	0x100029f8
1a000fc4:	10002aa4 	.word	0x10002aa4
1a000fc8:	10002a04 	.word	0x10002a04

1a000fcc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a000fcc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a000fce:	2300      	movs	r3, #0
1a000fd0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a000fd2:	4b0d      	ldr	r3, [pc, #52]	; (1a001008 <prvTaskExitError+0x3c>)
1a000fd4:	681b      	ldr	r3, [r3, #0]
1a000fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000fda:	d008      	beq.n	1a000fee <prvTaskExitError+0x22>
1a000fdc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fe0:	f383 8811 	msr	BASEPRI, r3
1a000fe4:	f3bf 8f6f 	isb	sy
1a000fe8:	f3bf 8f4f 	dsb	sy
1a000fec:	e7fe      	b.n	1a000fec <prvTaskExitError+0x20>
1a000fee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ff2:	f383 8811 	msr	BASEPRI, r3
1a000ff6:	f3bf 8f6f 	isb	sy
1a000ffa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a000ffe:	9b01      	ldr	r3, [sp, #4]
1a001000:	2b00      	cmp	r3, #0
1a001002:	d0fc      	beq.n	1a000ffe <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001004:	b002      	add	sp, #8
1a001006:	4770      	bx	lr
1a001008:	10000000 	.word	0x10000000

1a00100c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a00100c:	4808      	ldr	r0, [pc, #32]	; (1a001030 <prvPortStartFirstTask+0x24>)
1a00100e:	6800      	ldr	r0, [r0, #0]
1a001010:	6800      	ldr	r0, [r0, #0]
1a001012:	f380 8808 	msr	MSP, r0
1a001016:	f04f 0000 	mov.w	r0, #0
1a00101a:	f380 8814 	msr	CONTROL, r0
1a00101e:	b662      	cpsie	i
1a001020:	b661      	cpsie	f
1a001022:	f3bf 8f4f 	dsb	sy
1a001026:	f3bf 8f6f 	isb	sy
1a00102a:	df00      	svc	0
1a00102c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a00102e:	0000      	.short	0x0000
1a001030:	e000ed08 	.word	0xe000ed08

1a001034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001044 <vPortEnableVFP+0x10>
1a001038:	6801      	ldr	r1, [r0, #0]
1a00103a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00103e:	6001      	str	r1, [r0, #0]
1a001040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a001042:	0000      	.short	0x0000
1a001044:	e000ed88 	.word	0xe000ed88

1a001048 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a00104c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001050:	f021 0101 	bic.w	r1, r1, #1
1a001054:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001058:	4b05      	ldr	r3, [pc, #20]	; (1a001070 <pxPortInitialiseStack+0x28>)
1a00105a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a00105e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001062:	f06f 0302 	mvn.w	r3, #2
1a001066:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00106a:	3844      	subs	r0, #68	; 0x44
1a00106c:	4770      	bx	lr
1a00106e:	bf00      	nop
1a001070:	1a000fcd 	.word	0x1a000fcd
1a001074:	ffffffff 	.word	0xffffffff
1a001078:	ffffffff 	.word	0xffffffff
1a00107c:	ffffffff 	.word	0xffffffff

1a001080 <SVC_Handler>:
	__asm volatile (
1a001080:	4b07      	ldr	r3, [pc, #28]	; (1a0010a0 <pxCurrentTCBConst2>)
1a001082:	6819      	ldr	r1, [r3, #0]
1a001084:	6808      	ldr	r0, [r1, #0]
1a001086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00108a:	f380 8809 	msr	PSP, r0
1a00108e:	f3bf 8f6f 	isb	sy
1a001092:	f04f 0000 	mov.w	r0, #0
1a001096:	f380 8811 	msr	BASEPRI, r0
1a00109a:	4770      	bx	lr
1a00109c:	f3af 8000 	nop.w

1a0010a0 <pxCurrentTCBConst2>:
1a0010a0:	100029f8 	.word	0x100029f8

1a0010a4 <vPortEnterCritical>:
1a0010a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010a8:	f383 8811 	msr	BASEPRI, r3
1a0010ac:	f3bf 8f6f 	isb	sy
1a0010b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a0010b4:	4a0a      	ldr	r2, [pc, #40]	; (1a0010e0 <vPortEnterCritical+0x3c>)
1a0010b6:	6813      	ldr	r3, [r2, #0]
1a0010b8:	3301      	adds	r3, #1
1a0010ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a0010bc:	2b01      	cmp	r3, #1
1a0010be:	d000      	beq.n	1a0010c2 <vPortEnterCritical+0x1e>
}
1a0010c0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a0010c2:	4b08      	ldr	r3, [pc, #32]	; (1a0010e4 <vPortEnterCritical+0x40>)
1a0010c4:	681b      	ldr	r3, [r3, #0]
1a0010c6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0010ca:	d0f9      	beq.n	1a0010c0 <vPortEnterCritical+0x1c>
1a0010cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010d0:	f383 8811 	msr	BASEPRI, r3
1a0010d4:	f3bf 8f6f 	isb	sy
1a0010d8:	f3bf 8f4f 	dsb	sy
1a0010dc:	e7fe      	b.n	1a0010dc <vPortEnterCritical+0x38>
1a0010de:	bf00      	nop
1a0010e0:	10000000 	.word	0x10000000
1a0010e4:	e000ed04 	.word	0xe000ed04

1a0010e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0010e8:	4b09      	ldr	r3, [pc, #36]	; (1a001110 <vPortExitCritical+0x28>)
1a0010ea:	681b      	ldr	r3, [r3, #0]
1a0010ec:	b943      	cbnz	r3, 1a001100 <vPortExitCritical+0x18>
1a0010ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010f2:	f383 8811 	msr	BASEPRI, r3
1a0010f6:	f3bf 8f6f 	isb	sy
1a0010fa:	f3bf 8f4f 	dsb	sy
1a0010fe:	e7fe      	b.n	1a0010fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a001100:	3b01      	subs	r3, #1
1a001102:	4a03      	ldr	r2, [pc, #12]	; (1a001110 <vPortExitCritical+0x28>)
1a001104:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a001106:	b90b      	cbnz	r3, 1a00110c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001108:	f383 8811 	msr	BASEPRI, r3
}
1a00110c:	4770      	bx	lr
1a00110e:	bf00      	nop
1a001110:	10000000 	.word	0x10000000
1a001114:	ffffffff 	.word	0xffffffff
1a001118:	ffffffff 	.word	0xffffffff
1a00111c:	ffffffff 	.word	0xffffffff

1a001120 <PendSV_Handler>:
	__asm volatile
1a001120:	f3ef 8009 	mrs	r0, PSP
1a001124:	f3bf 8f6f 	isb	sy
1a001128:	4b15      	ldr	r3, [pc, #84]	; (1a001180 <pxCurrentTCBConst>)
1a00112a:	681a      	ldr	r2, [r3, #0]
1a00112c:	f01e 0f10 	tst.w	lr, #16
1a001130:	bf08      	it	eq
1a001132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a001136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00113a:	6010      	str	r0, [r2, #0]
1a00113c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a001140:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a001144:	f380 8811 	msr	BASEPRI, r0
1a001148:	f3bf 8f4f 	dsb	sy
1a00114c:	f3bf 8f6f 	isb	sy
1a001150:	f7ff fed6 	bl	1a000f00 <vTaskSwitchContext>
1a001154:	f04f 0000 	mov.w	r0, #0
1a001158:	f380 8811 	msr	BASEPRI, r0
1a00115c:	bc09      	pop	{r0, r3}
1a00115e:	6819      	ldr	r1, [r3, #0]
1a001160:	6808      	ldr	r0, [r1, #0]
1a001162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001166:	f01e 0f10 	tst.w	lr, #16
1a00116a:	bf08      	it	eq
1a00116c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a001170:	f380 8809 	msr	PSP, r0
1a001174:	f3bf 8f6f 	isb	sy
1a001178:	4770      	bx	lr
1a00117a:	bf00      	nop
1a00117c:	f3af 8000 	nop.w

1a001180 <pxCurrentTCBConst>:
1a001180:	100029f8 	.word	0x100029f8

1a001184 <SysTick_Handler>:
{
1a001184:	b508      	push	{r3, lr}
	__asm volatile
1a001186:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00118a:	f383 8811 	msr	BASEPRI, r3
1a00118e:	f3bf 8f6f 	isb	sy
1a001192:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a001196:	f7ff fd31 	bl	1a000bfc <xTaskIncrementTick>
1a00119a:	b118      	cbz	r0, 1a0011a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00119c:	4b03      	ldr	r3, [pc, #12]	; (1a0011ac <SysTick_Handler+0x28>)
1a00119e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011a2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0011a4:	2300      	movs	r3, #0
1a0011a6:	f383 8811 	msr	BASEPRI, r3
}
1a0011aa:	bd08      	pop	{r3, pc}
1a0011ac:	e000ed04 	.word	0xe000ed04

1a0011b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0011b0:	4a08      	ldr	r2, [pc, #32]	; (1a0011d4 <vPortSetupTimerInterrupt+0x24>)
1a0011b2:	2300      	movs	r3, #0
1a0011b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0011b6:	4908      	ldr	r1, [pc, #32]	; (1a0011d8 <vPortSetupTimerInterrupt+0x28>)
1a0011b8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0011ba:	4b08      	ldr	r3, [pc, #32]	; (1a0011dc <vPortSetupTimerInterrupt+0x2c>)
1a0011bc:	681b      	ldr	r3, [r3, #0]
1a0011be:	4908      	ldr	r1, [pc, #32]	; (1a0011e0 <vPortSetupTimerInterrupt+0x30>)
1a0011c0:	fba1 1303 	umull	r1, r3, r1, r3
1a0011c4:	099b      	lsrs	r3, r3, #6
1a0011c6:	3b01      	subs	r3, #1
1a0011c8:	4906      	ldr	r1, [pc, #24]	; (1a0011e4 <vPortSetupTimerInterrupt+0x34>)
1a0011ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0011cc:	2307      	movs	r3, #7
1a0011ce:	6013      	str	r3, [r2, #0]
}
1a0011d0:	4770      	bx	lr
1a0011d2:	bf00      	nop
1a0011d4:	e000e010 	.word	0xe000e010
1a0011d8:	e000e018 	.word	0xe000e018
1a0011dc:	10002b7c 	.word	0x10002b7c
1a0011e0:	10624dd3 	.word	0x10624dd3
1a0011e4:	e000e014 	.word	0xe000e014

1a0011e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0011e8:	4b3a      	ldr	r3, [pc, #232]	; (1a0012d4 <xPortStartScheduler+0xec>)
1a0011ea:	681a      	ldr	r2, [r3, #0]
1a0011ec:	4b3a      	ldr	r3, [pc, #232]	; (1a0012d8 <xPortStartScheduler+0xf0>)
1a0011ee:	429a      	cmp	r2, r3
1a0011f0:	d029      	beq.n	1a001246 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0011f2:	4b38      	ldr	r3, [pc, #224]	; (1a0012d4 <xPortStartScheduler+0xec>)
1a0011f4:	681a      	ldr	r2, [r3, #0]
1a0011f6:	4b39      	ldr	r3, [pc, #228]	; (1a0012dc <xPortStartScheduler+0xf4>)
1a0011f8:	429a      	cmp	r2, r3
1a0011fa:	d02d      	beq.n	1a001258 <xPortStartScheduler+0x70>
{
1a0011fc:	b510      	push	{r4, lr}
1a0011fe:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a001200:	4b37      	ldr	r3, [pc, #220]	; (1a0012e0 <xPortStartScheduler+0xf8>)
1a001202:	781a      	ldrb	r2, [r3, #0]
1a001204:	b2d2      	uxtb	r2, r2
1a001206:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a001208:	22ff      	movs	r2, #255	; 0xff
1a00120a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a00120c:	781b      	ldrb	r3, [r3, #0]
1a00120e:	b2db      	uxtb	r3, r3
1a001210:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a001214:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001218:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a00121c:	4a31      	ldr	r2, [pc, #196]	; (1a0012e4 <xPortStartScheduler+0xfc>)
1a00121e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a001220:	4b31      	ldr	r3, [pc, #196]	; (1a0012e8 <xPortStartScheduler+0x100>)
1a001222:	2207      	movs	r2, #7
1a001224:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a001226:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00122a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00122e:	d01c      	beq.n	1a00126a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a001230:	4a2d      	ldr	r2, [pc, #180]	; (1a0012e8 <xPortStartScheduler+0x100>)
1a001232:	6813      	ldr	r3, [r2, #0]
1a001234:	3b01      	subs	r3, #1
1a001236:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a001238:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00123c:	005b      	lsls	r3, r3, #1
1a00123e:	b2db      	uxtb	r3, r3
1a001240:	f88d 3003 	strb.w	r3, [sp, #3]
1a001244:	e7ef      	b.n	1a001226 <xPortStartScheduler+0x3e>
	__asm volatile
1a001246:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00124a:	f383 8811 	msr	BASEPRI, r3
1a00124e:	f3bf 8f6f 	isb	sy
1a001252:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a001256:	e7fe      	b.n	1a001256 <xPortStartScheduler+0x6e>
1a001258:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00125c:	f383 8811 	msr	BASEPRI, r3
1a001260:	f3bf 8f6f 	isb	sy
1a001264:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a001268:	e7fe      	b.n	1a001268 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00126a:	4b1f      	ldr	r3, [pc, #124]	; (1a0012e8 <xPortStartScheduler+0x100>)
1a00126c:	681b      	ldr	r3, [r3, #0]
1a00126e:	2b04      	cmp	r3, #4
1a001270:	d008      	beq.n	1a001284 <xPortStartScheduler+0x9c>
1a001272:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001276:	f383 8811 	msr	BASEPRI, r3
1a00127a:	f3bf 8f6f 	isb	sy
1a00127e:	f3bf 8f4f 	dsb	sy
1a001282:	e7fe      	b.n	1a001282 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a001284:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a001286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00128a:	4a17      	ldr	r2, [pc, #92]	; (1a0012e8 <xPortStartScheduler+0x100>)
1a00128c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00128e:	9b01      	ldr	r3, [sp, #4]
1a001290:	b2db      	uxtb	r3, r3
1a001292:	4a13      	ldr	r2, [pc, #76]	; (1a0012e0 <xPortStartScheduler+0xf8>)
1a001294:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a001296:	4b15      	ldr	r3, [pc, #84]	; (1a0012ec <xPortStartScheduler+0x104>)
1a001298:	681a      	ldr	r2, [r3, #0]
1a00129a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00129e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0012a0:	681a      	ldr	r2, [r3, #0]
1a0012a2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0012a6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0012a8:	f7ff ff82 	bl	1a0011b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0012ac:	2400      	movs	r4, #0
1a0012ae:	4b10      	ldr	r3, [pc, #64]	; (1a0012f0 <xPortStartScheduler+0x108>)
1a0012b0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0012b2:	f7ff febf 	bl	1a001034 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0012b6:	4a0f      	ldr	r2, [pc, #60]	; (1a0012f4 <xPortStartScheduler+0x10c>)
1a0012b8:	6813      	ldr	r3, [r2, #0]
1a0012ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0012be:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0012c0:	f7ff fea4 	bl	1a00100c <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0012c4:	f7ff fe1c 	bl	1a000f00 <vTaskSwitchContext>
	prvTaskExitError();
1a0012c8:	f7ff fe80 	bl	1a000fcc <prvTaskExitError>
}
1a0012cc:	4620      	mov	r0, r4
1a0012ce:	b002      	add	sp, #8
1a0012d0:	bd10      	pop	{r4, pc}
1a0012d2:	bf00      	nop
1a0012d4:	e000ed00 	.word	0xe000ed00
1a0012d8:	410fc271 	.word	0x410fc271
1a0012dc:	410fc270 	.word	0x410fc270
1a0012e0:	e000e400 	.word	0xe000e400
1a0012e4:	10002b10 	.word	0x10002b10
1a0012e8:	10002b14 	.word	0x10002b14
1a0012ec:	e000ed20 	.word	0xe000ed20
1a0012f0:	10000000 	.word	0x10000000
1a0012f4:	e000ef34 	.word	0xe000ef34

1a0012f8 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a0012f8:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0012fa:	4b05      	ldr	r3, [pc, #20]	; (1a001310 <DAC_IRQHandler+0x18>)
1a0012fc:	2201      	movs	r2, #1
1a0012fe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a001302:	4b04      	ldr	r3, [pc, #16]	; (1a001314 <DAC_IRQHandler+0x1c>)
1a001304:	681b      	ldr	r3, [r3, #0]
1a001306:	b113      	cbz	r3, 1a00130e <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a001308:	4b02      	ldr	r3, [pc, #8]	; (1a001314 <DAC_IRQHandler+0x1c>)
1a00130a:	681b      	ldr	r3, [r3, #0]
1a00130c:	4798      	blx	r3
   }
}
1a00130e:	bd08      	pop	{r3, pc}
1a001310:	e000e100 	.word	0xe000e100
1a001314:	10002b18 	.word	0x10002b18

1a001318 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001318:	2200      	movs	r2, #0
1a00131a:	2a05      	cmp	r2, #5
1a00131c:	d819      	bhi.n	1a001352 <Board_LED_Init+0x3a>
{
1a00131e:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a001320:	490c      	ldr	r1, [pc, #48]	; (1a001354 <Board_LED_Init+0x3c>)
1a001322:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a001326:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00132a:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a00132c:	4b0a      	ldr	r3, [pc, #40]	; (1a001358 <Board_LED_Init+0x40>)
1a00132e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a001332:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a001336:	2001      	movs	r0, #1
1a001338:	40a0      	lsls	r0, r4
1a00133a:	4301      	orrs	r1, r0
1a00133c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a001340:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a001344:	2100      	movs	r1, #0
1a001346:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001348:	3201      	adds	r2, #1
1a00134a:	2a05      	cmp	r2, #5
1a00134c:	d9e8      	bls.n	1a001320 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00134e:	bc70      	pop	{r4, r5, r6}
1a001350:	4770      	bx	lr
1a001352:	4770      	bx	lr
1a001354:	1a008010 	.word	0x1a008010
1a001358:	400f4000 	.word	0x400f4000

1a00135c <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00135c:	2300      	movs	r3, #0
1a00135e:	2b03      	cmp	r3, #3
1a001360:	d816      	bhi.n	1a001390 <Board_TEC_Init+0x34>
{
1a001362:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001364:	490b      	ldr	r1, [pc, #44]	; (1a001394 <Board_TEC_Init+0x38>)
1a001366:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00136a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00136e:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001370:	4c09      	ldr	r4, [pc, #36]	; (1a001398 <Board_TEC_Init+0x3c>)
1a001372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001376:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00137a:	2001      	movs	r0, #1
1a00137c:	40a8      	lsls	r0, r5
1a00137e:	ea21 0100 	bic.w	r1, r1, r0
1a001382:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001386:	3301      	adds	r3, #1
1a001388:	2b03      	cmp	r3, #3
1a00138a:	d9eb      	bls.n	1a001364 <Board_TEC_Init+0x8>
   }
}
1a00138c:	bc30      	pop	{r4, r5}
1a00138e:	4770      	bx	lr
1a001390:	4770      	bx	lr
1a001392:	bf00      	nop
1a001394:	1a008008 	.word	0x1a008008
1a001398:	400f4000 	.word	0x400f4000

1a00139c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00139c:	2300      	movs	r3, #0
1a00139e:	2b08      	cmp	r3, #8
1a0013a0:	d816      	bhi.n	1a0013d0 <Board_GPIO_Init+0x34>
{
1a0013a2:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0013a4:	490b      	ldr	r1, [pc, #44]	; (1a0013d4 <Board_GPIO_Init+0x38>)
1a0013a6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0013aa:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0013ae:	784d      	ldrb	r5, [r1, #1]
1a0013b0:	4c09      	ldr	r4, [pc, #36]	; (1a0013d8 <Board_GPIO_Init+0x3c>)
1a0013b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0013b6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0013ba:	2001      	movs	r0, #1
1a0013bc:	40a8      	lsls	r0, r5
1a0013be:	ea21 0100 	bic.w	r1, r1, r0
1a0013c2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0013c6:	3301      	adds	r3, #1
1a0013c8:	2b08      	cmp	r3, #8
1a0013ca:	d9eb      	bls.n	1a0013a4 <Board_GPIO_Init+0x8>
   }
}
1a0013cc:	bc30      	pop	{r4, r5}
1a0013ce:	4770      	bx	lr
1a0013d0:	4770      	bx	lr
1a0013d2:	bf00      	nop
1a0013d4:	1a00801c 	.word	0x1a00801c
1a0013d8:	400f4000 	.word	0x400f4000

1a0013dc <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0013dc:	b510      	push	{r4, lr}
1a0013de:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0013e0:	4c08      	ldr	r4, [pc, #32]	; (1a001404 <Board_ADC_Init+0x28>)
1a0013e2:	4669      	mov	r1, sp
1a0013e4:	4620      	mov	r0, r4
1a0013e6:	f000 f9b9 	bl	1a00175c <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0013ea:	4a07      	ldr	r2, [pc, #28]	; (1a001408 <Board_ADC_Init+0x2c>)
1a0013ec:	4669      	mov	r1, sp
1a0013ee:	4620      	mov	r0, r4
1a0013f0:	f000 f9d4 	bl	1a00179c <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0013f4:	2200      	movs	r2, #0
1a0013f6:	4669      	mov	r1, sp
1a0013f8:	4620      	mov	r0, r4
1a0013fa:	f000 f9e8 	bl	1a0017ce <Chip_ADC_SetResolution>
}
1a0013fe:	b002      	add	sp, #8
1a001400:	bd10      	pop	{r4, pc}
1a001402:	bf00      	nop
1a001404:	400e3000 	.word	0x400e3000
1a001408:	00061a80 	.word	0x00061a80

1a00140c <Board_SPI_Init>:
{
1a00140c:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00140e:	4c0b      	ldr	r4, [pc, #44]	; (1a00143c <Board_SPI_Init+0x30>)
1a001410:	4620      	mov	r0, r4
1a001412:	f000 fddd 	bl	1a001fd0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001416:	6863      	ldr	r3, [r4, #4]
1a001418:	f023 0304 	bic.w	r3, r3, #4
1a00141c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00141e:	6823      	ldr	r3, [r4, #0]
1a001420:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001424:	f043 0307 	orr.w	r3, r3, #7
1a001428:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00142a:	4905      	ldr	r1, [pc, #20]	; (1a001440 <Board_SPI_Init+0x34>)
1a00142c:	4620      	mov	r0, r4
1a00142e:	f000 fdb0 	bl	1a001f92 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a001432:	6863      	ldr	r3, [r4, #4]
1a001434:	f043 0302 	orr.w	r3, r3, #2
1a001438:	6063      	str	r3, [r4, #4]
}
1a00143a:	bd10      	pop	{r4, pc}
1a00143c:	400c5000 	.word	0x400c5000
1a001440:	000186a0 	.word	0x000186a0

1a001444 <Board_I2C_Init>:
{
1a001444:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a001446:	2000      	movs	r0, #0
1a001448:	f000 fca8 	bl	1a001d9c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00144c:	4b04      	ldr	r3, [pc, #16]	; (1a001460 <Board_I2C_Init+0x1c>)
1a00144e:	f640 0208 	movw	r2, #2056	; 0x808
1a001452:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a001456:	4903      	ldr	r1, [pc, #12]	; (1a001464 <Board_I2C_Init+0x20>)
1a001458:	2000      	movs	r0, #0
1a00145a:	f000 fcb1 	bl	1a001dc0 <Chip_I2C_SetClockRate>
}
1a00145e:	bd08      	pop	{r3, pc}
1a001460:	40086000 	.word	0x40086000
1a001464:	000f4240 	.word	0x000f4240

1a001468 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a001468:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a00146a:	4c07      	ldr	r4, [pc, #28]	; (1a001488 <Board_Debug_Init+0x20>)
1a00146c:	4620      	mov	r0, r4
1a00146e:	f000 f8b9 	bl	1a0015e4 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a001472:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001476:	4620      	mov	r0, r4
1a001478:	f000 f8de 	bl	1a001638 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a00147c:	2303      	movs	r3, #3
1a00147e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a001480:	2301      	movs	r3, #1
1a001482:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a001484:	bd10      	pop	{r4, pc}
1a001486:	bf00      	nop
1a001488:	400c1000 	.word	0x400c1000

1a00148c <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00148c:	4b03      	ldr	r3, [pc, #12]	; (1a00149c <Board_UARTPutChar+0x10>)
1a00148e:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a001490:	f013 0f20 	tst.w	r3, #32
1a001494:	d0fa      	beq.n	1a00148c <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a001496:	4b01      	ldr	r3, [pc, #4]	; (1a00149c <Board_UARTPutChar+0x10>)
1a001498:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a00149a:	4770      	bx	lr
1a00149c:	400c1000 	.word	0x400c1000

1a0014a0 <Board_UARTGetChar>:
	return pUART->LSR;
1a0014a0:	4b05      	ldr	r3, [pc, #20]	; (1a0014b8 <Board_UARTGetChar+0x18>)
1a0014a2:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0014a4:	f013 0f01 	tst.w	r3, #1
1a0014a8:	d003      	beq.n	1a0014b2 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0014aa:	4b03      	ldr	r3, [pc, #12]	; (1a0014b8 <Board_UARTGetChar+0x18>)
1a0014ac:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0014ae:	b2c0      	uxtb	r0, r0
1a0014b0:	4770      	bx	lr
   }
   return EOF;
1a0014b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0014b6:	4770      	bx	lr
1a0014b8:	400c1000 	.word	0x400c1000

1a0014bc <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0014bc:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0014be:	f7ff ffd3 	bl	1a001468 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0014c2:	4809      	ldr	r0, [pc, #36]	; (1a0014e8 <Board_Init+0x2c>)
1a0014c4:	f000 fc98 	bl	1a001df8 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0014c8:	f7ff ff68 	bl	1a00139c <Board_GPIO_Init>
   Board_ADC_Init();
1a0014cc:	f7ff ff86 	bl	1a0013dc <Board_ADC_Init>
   Board_SPI_Init();
1a0014d0:	f7ff ff9c 	bl	1a00140c <Board_SPI_Init>
   Board_I2C_Init();
1a0014d4:	f7ff ffb6 	bl	1a001444 <Board_I2C_Init>

   Board_LED_Init();
1a0014d8:	f7ff ff1e 	bl	1a001318 <Board_LED_Init>
   Board_TEC_Init();
1a0014dc:	f7ff ff3e 	bl	1a00135c <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0014e0:	f000 f97c 	bl	1a0017dc <SystemCoreClockUpdate>
}
1a0014e4:	bd08      	pop	{r3, pc}
1a0014e6:	bf00      	nop
1a0014e8:	400f4000 	.word	0x400f4000

1a0014ec <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0014ec:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0014ee:	b2c0      	uxtb	r0, r0
1a0014f0:	f7ff ffcc 	bl	1a00148c <Board_UARTPutChar>
}
1a0014f4:	bd08      	pop	{r3, pc}

1a0014f6 <__stdio_getchar>:

int __stdio_getchar()
{
1a0014f6:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0014f8:	f7ff ffd2 	bl	1a0014a0 <Board_UARTGetChar>
}
1a0014fc:	bd08      	pop	{r3, pc}

1a0014fe <__stdio_init>:

void __stdio_init()
{
1a0014fe:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a001500:	f7ff ffb2 	bl	1a001468 <Board_Debug_Init>
1a001504:	bd08      	pop	{r3, pc}
1a001506:	Address 0x000000001a001506 is out of bounds.


1a001508 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001508:	2300      	movs	r3, #0
1a00150a:	2b1c      	cmp	r3, #28
1a00150c:	d812      	bhi.n	1a001534 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00150e:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001510:	4a09      	ldr	r2, [pc, #36]	; (1a001538 <Board_SetupMuxing+0x30>)
1a001512:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a001516:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00151a:	784a      	ldrb	r2, [r1, #1]
1a00151c:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00151e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a001522:	4906      	ldr	r1, [pc, #24]	; (1a00153c <Board_SetupMuxing+0x34>)
1a001524:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001528:	3301      	adds	r3, #1
1a00152a:	2b1c      	cmp	r3, #28
1a00152c:	d9f0      	bls.n	1a001510 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00152e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001532:	4770      	bx	lr
1a001534:	4770      	bx	lr
1a001536:	bf00      	nop
1a001538:	1a008038 	.word	0x1a008038
1a00153c:	40086000 	.word	0x40086000

1a001540 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001540:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001542:	4a17      	ldr	r2, [pc, #92]	; (1a0015a0 <Board_SetupClocking+0x60>)
1a001544:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00154c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001550:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001554:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001558:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00155c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001560:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001564:	2201      	movs	r2, #1
1a001566:	490f      	ldr	r1, [pc, #60]	; (1a0015a4 <Board_SetupClocking+0x64>)
1a001568:	2006      	movs	r0, #6
1a00156a:	f000 fc47 	bl	1a001dfc <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00156e:	2400      	movs	r4, #0
1a001570:	b14c      	cbz	r4, 1a001586 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001572:	4b0b      	ldr	r3, [pc, #44]	; (1a0015a0 <Board_SetupClocking+0x60>)
1a001574:	685a      	ldr	r2, [r3, #4]
1a001576:	f022 020c 	bic.w	r2, r2, #12
1a00157a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00157c:	685a      	ldr	r2, [r3, #4]
1a00157e:	f042 0203 	orr.w	r2, r2, #3
1a001582:	605a      	str	r2, [r3, #4]
}
1a001584:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a001586:	4808      	ldr	r0, [pc, #32]	; (1a0015a8 <Board_SetupClocking+0x68>)
1a001588:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00158c:	2301      	movs	r3, #1
1a00158e:	788a      	ldrb	r2, [r1, #2]
1a001590:	7849      	ldrb	r1, [r1, #1]
1a001592:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001596:	f000 fb4d 	bl	1a001c34 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00159a:	3401      	adds	r4, #1
1a00159c:	e7e8      	b.n	1a001570 <Board_SetupClocking+0x30>
1a00159e:	bf00      	nop
1a0015a0:	40043000 	.word	0x40043000
1a0015a4:	0c28cb00 	.word	0x0c28cb00
1a0015a8:	1a008034 	.word	0x1a008034

1a0015ac <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0015ac:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0015ae:	f7ff ffab 	bl	1a001508 <Board_SetupMuxing>
    Board_SetupClocking();
1a0015b2:	f7ff ffc5 	bl	1a001540 <Board_SetupClocking>
}
1a0015b6:	bd08      	pop	{r3, pc}

1a0015b8 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0015b8:	4b09      	ldr	r3, [pc, #36]	; (1a0015e0 <Chip_UART_GetIndex+0x28>)
1a0015ba:	4298      	cmp	r0, r3
1a0015bc:	d009      	beq.n	1a0015d2 <Chip_UART_GetIndex+0x1a>
1a0015be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0015c2:	4298      	cmp	r0, r3
1a0015c4:	d007      	beq.n	1a0015d6 <Chip_UART_GetIndex+0x1e>
1a0015c6:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0015ca:	4298      	cmp	r0, r3
1a0015cc:	d005      	beq.n	1a0015da <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0015ce:	2000      	movs	r0, #0
1a0015d0:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0015d2:	2002      	movs	r0, #2
1a0015d4:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0015d6:	2003      	movs	r0, #3
1a0015d8:	4770      	bx	lr
			return 1;
1a0015da:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0015dc:	4770      	bx	lr
1a0015de:	bf00      	nop
1a0015e0:	400c1000 	.word	0x400c1000

1a0015e4 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0015e4:	b530      	push	{r4, r5, lr}
1a0015e6:	b083      	sub	sp, #12
1a0015e8:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0015ea:	f7ff ffe5 	bl	1a0015b8 <Chip_UART_GetIndex>
1a0015ee:	2301      	movs	r3, #1
1a0015f0:	461a      	mov	r2, r3
1a0015f2:	4619      	mov	r1, r3
1a0015f4:	4d0e      	ldr	r5, [pc, #56]	; (1a001630 <Chip_UART_Init+0x4c>)
1a0015f6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0015fa:	f000 fb61 	bl	1a001cc0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0015fe:	2307      	movs	r3, #7
1a001600:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001602:	2300      	movs	r3, #0
1a001604:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001606:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001608:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00160a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a00160c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00160e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001610:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001612:	4b08      	ldr	r3, [pc, #32]	; (1a001634 <Chip_UART_Init+0x50>)
1a001614:	429c      	cmp	r4, r3
1a001616:	d006      	beq.n	1a001626 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001618:	2303      	movs	r3, #3
1a00161a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a00161c:	2310      	movs	r3, #16
1a00161e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001620:	9b01      	ldr	r3, [sp, #4]
}
1a001622:	b003      	add	sp, #12
1a001624:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a001626:	2300      	movs	r3, #0
1a001628:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00162a:	69a3      	ldr	r3, [r4, #24]
1a00162c:	9301      	str	r3, [sp, #4]
1a00162e:	e7f3      	b.n	1a001618 <Chip_UART_Init+0x34>
1a001630:	1a0080b4 	.word	0x1a0080b4
1a001634:	40082000 	.word	0x40082000

1a001638 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00163c:	b083      	sub	sp, #12
1a00163e:	9001      	str	r0, [sp, #4]
1a001640:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001642:	f7ff ffb9 	bl	1a0015b8 <Chip_UART_GetIndex>
1a001646:	4b32      	ldr	r3, [pc, #200]	; (1a001710 <Chip_UART_SetBaudFDR+0xd8>)
1a001648:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00164c:	f000 fb70 	bl	1a001d30 <Chip_Clock_GetRate>
1a001650:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a001652:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001656:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001658:	f04f 0b00 	mov.w	fp, #0
1a00165c:	46a2      	mov	sl, r4
1a00165e:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001660:	e02a      	b.n	1a0016b8 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a001662:	4242      	negs	r2, r0
				div ++;
1a001664:	1c4b      	adds	r3, r1, #1
1a001666:	e017      	b.n	1a001698 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001668:	b30a      	cbz	r2, 1a0016ae <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00166a:	4617      	mov	r7, r2
			sd = d;
1a00166c:	46ab      	mov	fp, r5
			sm = m;
1a00166e:	46a2      	mov	sl, r4
			sdiv = div;
1a001670:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a001672:	3501      	adds	r5, #1
1a001674:	42ac      	cmp	r4, r5
1a001676:	d91e      	bls.n	1a0016b6 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001678:	0933      	lsrs	r3, r6, #4
1a00167a:	0730      	lsls	r0, r6, #28
1a00167c:	fba4 0100 	umull	r0, r1, r4, r0
1a001680:	fb04 1103 	mla	r1, r4, r3, r1
1a001684:	1962      	adds	r2, r4, r5
1a001686:	fb08 f202 	mul.w	r2, r8, r2
1a00168a:	2300      	movs	r3, #0
1a00168c:	f001 fada 	bl	1a002c44 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001690:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a001692:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001694:	2800      	cmp	r0, #0
1a001696:	dbe4      	blt.n	1a001662 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001698:	4297      	cmp	r7, r2
1a00169a:	d3ea      	bcc.n	1a001672 <Chip_UART_SetBaudFDR+0x3a>
1a00169c:	2b00      	cmp	r3, #0
1a00169e:	d0e8      	beq.n	1a001672 <Chip_UART_SetBaudFDR+0x3a>
1a0016a0:	0c19      	lsrs	r1, r3, #16
1a0016a2:	d1e6      	bne.n	1a001672 <Chip_UART_SetBaudFDR+0x3a>
1a0016a4:	2b02      	cmp	r3, #2
1a0016a6:	d8df      	bhi.n	1a001668 <Chip_UART_SetBaudFDR+0x30>
1a0016a8:	2d00      	cmp	r5, #0
1a0016aa:	d0dd      	beq.n	1a001668 <Chip_UART_SetBaudFDR+0x30>
1a0016ac:	e7e1      	b.n	1a001672 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0016ae:	4617      	mov	r7, r2
			sd = d;
1a0016b0:	46ab      	mov	fp, r5
			sm = m;
1a0016b2:	46a2      	mov	sl, r4
			sdiv = div;
1a0016b4:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0016b6:	3401      	adds	r4, #1
1a0016b8:	b11f      	cbz	r7, 1a0016c2 <Chip_UART_SetBaudFDR+0x8a>
1a0016ba:	2c0f      	cmp	r4, #15
1a0016bc:	d801      	bhi.n	1a0016c2 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0016be:	2500      	movs	r5, #0
1a0016c0:	e7d8      	b.n	1a001674 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0016c2:	f1b9 0f00 	cmp.w	r9, #0
1a0016c6:	d01e      	beq.n	1a001706 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0016c8:	9a01      	ldr	r2, [sp, #4]
1a0016ca:	4611      	mov	r1, r2
1a0016cc:	68d3      	ldr	r3, [r2, #12]
1a0016ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0016d2:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a0016d4:	fa5f f389 	uxtb.w	r3, r9
1a0016d8:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0016da:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0016de:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0016e0:	68d3      	ldr	r3, [r2, #12]
1a0016e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0016e6:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0016e8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0016ec:	b2db      	uxtb	r3, r3
1a0016ee:	f00b 020f 	and.w	r2, fp, #15
1a0016f2:	4313      	orrs	r3, r2
1a0016f4:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0016f6:	0933      	lsrs	r3, r6, #4
1a0016f8:	fb0a f303 	mul.w	r3, sl, r3
1a0016fc:	44da      	add	sl, fp
1a0016fe:	fb09 f90a 	mul.w	r9, r9, sl
1a001702:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a001706:	4648      	mov	r0, r9
1a001708:	b003      	add	sp, #12
1a00170a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00170e:	bf00      	nop
1a001710:	1a0080ac 	.word	0x1a0080ac

1a001714 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a001714:	4b03      	ldr	r3, [pc, #12]	; (1a001724 <Chip_ADC_GetClockIndex+0x10>)
1a001716:	4298      	cmp	r0, r3
1a001718:	d001      	beq.n	1a00171e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00171a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a00171c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00171e:	2004      	movs	r0, #4
1a001720:	4770      	bx	lr
1a001722:	bf00      	nop
1a001724:	400e4000 	.word	0x400e4000

1a001728 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a001728:	b570      	push	{r4, r5, r6, lr}
1a00172a:	460d      	mov	r5, r1
1a00172c:	4614      	mov	r4, r2
1a00172e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001730:	f7ff fff0 	bl	1a001714 <Chip_ADC_GetClockIndex>
1a001734:	f000 fafc 	bl	1a001d30 <Chip_Clock_GetRate>
	if (burstMode) {
1a001738:	b155      	cbz	r5, 1a001750 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a00173a:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00173e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a001742:	0064      	lsls	r4, r4, #1
1a001744:	fbb0 f0f4 	udiv	r0, r0, r4
1a001748:	b2c0      	uxtb	r0, r0
1a00174a:	3801      	subs	r0, #1
	return div;
}
1a00174c:	b2c0      	uxtb	r0, r0
1a00174e:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a001750:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001754:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a001758:	e7f1      	b.n	1a00173e <getClkDiv+0x16>
1a00175a:	Address 0x000000001a00175a is out of bounds.


1a00175c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a00175c:	b538      	push	{r3, r4, r5, lr}
1a00175e:	4605      	mov	r5, r0
1a001760:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001762:	f7ff ffd7 	bl	1a001714 <Chip_ADC_GetClockIndex>
1a001766:	2301      	movs	r3, #1
1a001768:	461a      	mov	r2, r3
1a00176a:	4619      	mov	r1, r3
1a00176c:	f000 faa8 	bl	1a001cc0 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001770:	2100      	movs	r1, #0
1a001772:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001774:	4a08      	ldr	r2, [pc, #32]	; (1a001798 <Chip_ADC_Init+0x3c>)
1a001776:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001778:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00177a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a00177c:	230b      	movs	r3, #11
1a00177e:	4628      	mov	r0, r5
1a001780:	f7ff ffd2 	bl	1a001728 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001784:	0200      	lsls	r0, r0, #8
1a001786:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00178a:	7920      	ldrb	r0, [r4, #4]
1a00178c:	0440      	lsls	r0, r0, #17
1a00178e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001792:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a001794:	6028      	str	r0, [r5, #0]
}
1a001796:	bd38      	pop	{r3, r4, r5, pc}
1a001798:	00061a80 	.word	0x00061a80

1a00179c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00179c:	b570      	push	{r4, r5, r6, lr}
1a00179e:	4605      	mov	r5, r0
1a0017a0:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0017a2:	6804      	ldr	r4, [r0, #0]
1a0017a4:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0017a8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0017ac:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0017ae:	790b      	ldrb	r3, [r1, #4]
1a0017b0:	f1c3 030b 	rsb	r3, r3, #11
1a0017b4:	b2db      	uxtb	r3, r3
1a0017b6:	7949      	ldrb	r1, [r1, #5]
1a0017b8:	f7ff ffb6 	bl	1a001728 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0017bc:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0017c0:	7933      	ldrb	r3, [r6, #4]
1a0017c2:	045b      	lsls	r3, r3, #17
1a0017c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0017c8:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0017ca:	602b      	str	r3, [r5, #0]
}
1a0017cc:	bd70      	pop	{r4, r5, r6, pc}

1a0017ce <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0017ce:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0017d0:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0017d2:	680a      	ldr	r2, [r1, #0]
1a0017d4:	f7ff ffe2 	bl	1a00179c <Chip_ADC_SetSampleRate>
}
1a0017d8:	bd08      	pop	{r3, pc}
1a0017da:	Address 0x000000001a0017da is out of bounds.


1a0017dc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0017dc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0017de:	2069      	movs	r0, #105	; 0x69
1a0017e0:	f000 faa6 	bl	1a001d30 <Chip_Clock_GetRate>
1a0017e4:	4b01      	ldr	r3, [pc, #4]	; (1a0017ec <SystemCoreClockUpdate+0x10>)
1a0017e6:	6018      	str	r0, [r3, #0]
}
1a0017e8:	bd08      	pop	{r3, pc}
1a0017ea:	bf00      	nop
1a0017ec:	10002b7c 	.word	0x10002b7c

1a0017f0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0017f0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0017f2:	680b      	ldr	r3, [r1, #0]
1a0017f4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0017f8:	d002      	beq.n	1a001800 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0017fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0017fe:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001800:	4607      	mov	r7, r0
1a001802:	2501      	movs	r5, #1
1a001804:	e03a      	b.n	1a00187c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a001806:	694b      	ldr	r3, [r1, #20]
1a001808:	fb03 f302 	mul.w	r3, r3, r2
1a00180c:	fbb3 f3f5 	udiv	r3, r3, r5
1a001810:	e01c      	b.n	1a00184c <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001812:	461c      	mov	r4, r3
	if (val < 0)
1a001814:	ebb0 0c04 	subs.w	ip, r0, r4
1a001818:	d427      	bmi.n	1a00186a <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a00181a:	4567      	cmp	r7, ip
1a00181c:	d906      	bls.n	1a00182c <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a00181e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001820:	1c77      	adds	r7, r6, #1
1a001822:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001824:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a001826:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001828:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00182a:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a00182c:	3201      	adds	r2, #1
1a00182e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a001832:	dc1d      	bgt.n	1a001870 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a001834:	680c      	ldr	r4, [r1, #0]
1a001836:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00183a:	d0e4      	beq.n	1a001806 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00183c:	1c73      	adds	r3, r6, #1
1a00183e:	fa02 fc03 	lsl.w	ip, r2, r3
1a001842:	694b      	ldr	r3, [r1, #20]
1a001844:	fb03 f30c 	mul.w	r3, r3, ip
1a001848:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00184c:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001888 <pll_calc_divs+0x98>
1a001850:	4563      	cmp	r3, ip
1a001852:	d9eb      	bls.n	1a00182c <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001854:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a00188c <pll_calc_divs+0x9c>
1a001858:	4563      	cmp	r3, ip
1a00185a:	d809      	bhi.n	1a001870 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a00185c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001860:	d1d7      	bne.n	1a001812 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a001862:	1c74      	adds	r4, r6, #1
1a001864:	fa23 f404 	lsr.w	r4, r3, r4
1a001868:	e7d4      	b.n	1a001814 <pll_calc_divs+0x24>
		return -val;
1a00186a:	f1cc 0c00 	rsb	ip, ip, #0
1a00186e:	e7d4      	b.n	1a00181a <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001870:	3601      	adds	r6, #1
1a001872:	2e03      	cmp	r6, #3
1a001874:	dc01      	bgt.n	1a00187a <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a001876:	2201      	movs	r2, #1
1a001878:	e7d9      	b.n	1a00182e <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a00187a:	3501      	adds	r5, #1
1a00187c:	2d04      	cmp	r5, #4
1a00187e:	dc01      	bgt.n	1a001884 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001880:	2600      	movs	r6, #0
1a001882:	e7f6      	b.n	1a001872 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001884:	bcf0      	pop	{r4, r5, r6, r7}
1a001886:	4770      	bx	lr
1a001888:	094c5eff 	.word	0x094c5eff
1a00188c:	1312d000 	.word	0x1312d000

1a001890 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001890:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001892:	b099      	sub	sp, #100	; 0x64
1a001894:	4605      	mov	r5, r0
1a001896:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001898:	225c      	movs	r2, #92	; 0x5c
1a00189a:	2100      	movs	r1, #0
1a00189c:	a801      	add	r0, sp, #4
1a00189e:	f002 f9e1 	bl	1a003c64 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0018a2:	2380      	movs	r3, #128	; 0x80
1a0018a4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0018a6:	6963      	ldr	r3, [r4, #20]
1a0018a8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0018aa:	7923      	ldrb	r3, [r4, #4]
1a0018ac:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0018b0:	4669      	mov	r1, sp
1a0018b2:	4628      	mov	r0, r5
1a0018b4:	f7ff ff9c 	bl	1a0017f0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0018b8:	9b06      	ldr	r3, [sp, #24]
1a0018ba:	42ab      	cmp	r3, r5
1a0018bc:	d027      	beq.n	1a00190e <pll_get_frac+0x7e>
	if (val < 0)
1a0018be:	1aeb      	subs	r3, r5, r3
1a0018c0:	d42e      	bmi.n	1a001920 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0018c2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0018c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0018c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0018ca:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0018cc:	6963      	ldr	r3, [r4, #20]
1a0018ce:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0018d0:	7923      	ldrb	r3, [r4, #4]
1a0018d2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0018d6:	a910      	add	r1, sp, #64	; 0x40
1a0018d8:	4628      	mov	r0, r5
1a0018da:	f7ff ff89 	bl	1a0017f0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0018de:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0018e0:	42ab      	cmp	r3, r5
1a0018e2:	d01f      	beq.n	1a001924 <pll_get_frac+0x94>
	if (val < 0)
1a0018e4:	1aeb      	subs	r3, r5, r3
1a0018e6:	d425      	bmi.n	1a001934 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0018e8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0018ea:	4b2b      	ldr	r3, [pc, #172]	; (1a001998 <pll_get_frac+0x108>)
1a0018ec:	429d      	cmp	r5, r3
1a0018ee:	d923      	bls.n	1a001938 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0018f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0018f2:	1aed      	subs	r5, r5, r3
1a0018f4:	d433      	bmi.n	1a00195e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0018f6:	42ae      	cmp	r6, r5
1a0018f8:	dc3b      	bgt.n	1a001972 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0018fa:	42be      	cmp	r6, r7
1a0018fc:	dc31      	bgt.n	1a001962 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0018fe:	466d      	mov	r5, sp
1a001900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001904:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00190c:	e006      	b.n	1a00191c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00190e:	466d      	mov	r5, sp
1a001910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001914:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a00191c:	b019      	add	sp, #100	; 0x64
1a00191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001920:	425b      	negs	r3, r3
1a001922:	e7ce      	b.n	1a0018c2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a001924:	ad10      	add	r5, sp, #64	; 0x40
1a001926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00192a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00192e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001932:	e7f3      	b.n	1a00191c <pll_get_frac+0x8c>
		return -val;
1a001934:	425b      	negs	r3, r3
1a001936:	e7d7      	b.n	1a0018e8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001938:	2340      	movs	r3, #64	; 0x40
1a00193a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a00193c:	6963      	ldr	r3, [r4, #20]
1a00193e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001940:	a908      	add	r1, sp, #32
1a001942:	4628      	mov	r0, r5
1a001944:	f7ff ff54 	bl	1a0017f0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00194a:	42ab      	cmp	r3, r5
1a00194c:	d1d0      	bne.n	1a0018f0 <pll_get_frac+0x60>
			*ppll = pll[1];
1a00194e:	ad08      	add	r5, sp, #32
1a001950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001954:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a00195c:	e7de      	b.n	1a00191c <pll_get_frac+0x8c>
		return -val;
1a00195e:	426d      	negs	r5, r5
1a001960:	e7c9      	b.n	1a0018f6 <pll_get_frac+0x66>
			*ppll = pll[2];
1a001962:	ad10      	add	r5, sp, #64	; 0x40
1a001964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001968:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00196c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001970:	e7d4      	b.n	1a00191c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001972:	42af      	cmp	r7, r5
1a001974:	db07      	blt.n	1a001986 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001976:	ad08      	add	r5, sp, #32
1a001978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00197a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00197c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001984:	e7ca      	b.n	1a00191c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001986:	ad10      	add	r5, sp, #64	; 0x40
1a001988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00198a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00198c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001990:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001994:	e7c2      	b.n	1a00191c <pll_get_frac+0x8c>
1a001996:	bf00      	nop
1a001998:	068e7780 	.word	0x068e7780

1a00199c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00199c:	b430      	push	{r4, r5}
1a00199e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0019a0:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0019a2:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0019a4:	e000      	b.n	1a0019a8 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0019a6:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0019a8:	281c      	cmp	r0, #28
1a0019aa:	d118      	bne.n	1a0019de <Chip_Clock_FindBaseClock+0x42>
1a0019ac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0019b0:	0051      	lsls	r1, r2, #1
1a0019b2:	4a0c      	ldr	r2, [pc, #48]	; (1a0019e4 <Chip_Clock_FindBaseClock+0x48>)
1a0019b4:	440a      	add	r2, r1
1a0019b6:	7914      	ldrb	r4, [r2, #4]
1a0019b8:	4284      	cmp	r4, r0
1a0019ba:	d010      	beq.n	1a0019de <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0019bc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0019c0:	004a      	lsls	r2, r1, #1
1a0019c2:	4908      	ldr	r1, [pc, #32]	; (1a0019e4 <Chip_Clock_FindBaseClock+0x48>)
1a0019c4:	5a8a      	ldrh	r2, [r1, r2]
1a0019c6:	42aa      	cmp	r2, r5
1a0019c8:	d8ed      	bhi.n	1a0019a6 <Chip_Clock_FindBaseClock+0xa>
1a0019ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0019ce:	0051      	lsls	r1, r2, #1
1a0019d0:	4a04      	ldr	r2, [pc, #16]	; (1a0019e4 <Chip_Clock_FindBaseClock+0x48>)
1a0019d2:	440a      	add	r2, r1
1a0019d4:	8852      	ldrh	r2, [r2, #2]
1a0019d6:	42aa      	cmp	r2, r5
1a0019d8:	d3e5      	bcc.n	1a0019a6 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0019da:	4620      	mov	r0, r4
1a0019dc:	e7e4      	b.n	1a0019a8 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0019de:	bc30      	pop	{r4, r5}
1a0019e0:	4770      	bx	lr
1a0019e2:	bf00      	nop
1a0019e4:	1a0080c8 	.word	0x1a0080c8

1a0019e8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0019e8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0019ee:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0019f0:	4a0d      	ldr	r2, [pc, #52]	; (1a001a28 <Chip_Clock_EnableCrystal+0x40>)
1a0019f2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0019f4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0019f8:	6992      	ldr	r2, [r2, #24]
1a0019fa:	428a      	cmp	r2, r1
1a0019fc:	d001      	beq.n	1a001a02 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0019fe:	4a0a      	ldr	r2, [pc, #40]	; (1a001a28 <Chip_Clock_EnableCrystal+0x40>)
1a001a00:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001a02:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001a06:	4a09      	ldr	r2, [pc, #36]	; (1a001a2c <Chip_Clock_EnableCrystal+0x44>)
1a001a08:	6811      	ldr	r1, [r2, #0]
1a001a0a:	4a09      	ldr	r2, [pc, #36]	; (1a001a30 <Chip_Clock_EnableCrystal+0x48>)
1a001a0c:	4291      	cmp	r1, r2
1a001a0e:	d901      	bls.n	1a001a14 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001a10:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001a14:	4a04      	ldr	r2, [pc, #16]	; (1a001a28 <Chip_Clock_EnableCrystal+0x40>)
1a001a16:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001a18:	9b01      	ldr	r3, [sp, #4]
1a001a1a:	1e5a      	subs	r2, r3, #1
1a001a1c:	9201      	str	r2, [sp, #4]
1a001a1e:	2b00      	cmp	r3, #0
1a001a20:	d1fa      	bne.n	1a001a18 <Chip_Clock_EnableCrystal+0x30>
}
1a001a22:	b002      	add	sp, #8
1a001a24:	4770      	bx	lr
1a001a26:	bf00      	nop
1a001a28:	40050000 	.word	0x40050000
1a001a2c:	1a008030 	.word	0x1a008030
1a001a30:	01312cff 	.word	0x01312cff

1a001a34 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001a34:	3012      	adds	r0, #18
1a001a36:	4b05      	ldr	r3, [pc, #20]	; (1a001a4c <Chip_Clock_GetDividerSource+0x18>)
1a001a38:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001a3c:	f010 0f01 	tst.w	r0, #1
1a001a40:	d102      	bne.n	1a001a48 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001a42:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001a46:	4770      	bx	lr
		return CLKINPUT_PD;
1a001a48:	2011      	movs	r0, #17
}
1a001a4a:	4770      	bx	lr
1a001a4c:	40050000 	.word	0x40050000

1a001a50 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001a50:	f100 0212 	add.w	r2, r0, #18
1a001a54:	4b03      	ldr	r3, [pc, #12]	; (1a001a64 <Chip_Clock_GetDividerDivisor+0x14>)
1a001a56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001a5a:	4b03      	ldr	r3, [pc, #12]	; (1a001a68 <Chip_Clock_GetDividerDivisor+0x18>)
1a001a5c:	5c18      	ldrb	r0, [r3, r0]
}
1a001a5e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001a62:	4770      	bx	lr
1a001a64:	40050000 	.word	0x40050000
1a001a68:	1a0080c0 	.word	0x1a0080c0

1a001a6c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001a6c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001a6e:	2810      	cmp	r0, #16
1a001a70:	d80a      	bhi.n	1a001a88 <Chip_Clock_GetClockInputHz+0x1c>
1a001a72:	e8df f000 	tbb	[pc, r0]
1a001a76:	0b44      	.short	0x0b44
1a001a78:	0921180d 	.word	0x0921180d
1a001a7c:	2d2a2724 	.word	0x2d2a2724
1a001a80:	34300909 	.word	0x34300909
1a001a84:	3c38      	.short	0x3c38
1a001a86:	40          	.byte	0x40
1a001a87:	00          	.byte	0x00
	uint32_t rate = 0;
1a001a88:	2000      	movs	r0, #0
1a001a8a:	e03a      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001a8c:	481e      	ldr	r0, [pc, #120]	; (1a001b08 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001a8e:	e038      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001a90:	4b1e      	ldr	r3, [pc, #120]	; (1a001b0c <Chip_Clock_GetClockInputHz+0xa0>)
1a001a92:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001a96:	f003 0307 	and.w	r3, r3, #7
1a001a9a:	2b04      	cmp	r3, #4
1a001a9c:	d001      	beq.n	1a001aa2 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001a9e:	481c      	ldr	r0, [pc, #112]	; (1a001b10 <Chip_Clock_GetClockInputHz+0xa4>)
1a001aa0:	e02f      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a001aa2:	2000      	movs	r0, #0
1a001aa4:	e02d      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001aa6:	4b19      	ldr	r3, [pc, #100]	; (1a001b0c <Chip_Clock_GetClockInputHz+0xa0>)
1a001aa8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001aac:	f003 0307 	and.w	r3, r3, #7
1a001ab0:	2b04      	cmp	r3, #4
1a001ab2:	d027      	beq.n	1a001b04 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001ab4:	4816      	ldr	r0, [pc, #88]	; (1a001b10 <Chip_Clock_GetClockInputHz+0xa4>)
1a001ab6:	e024      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001ab8:	4b16      	ldr	r3, [pc, #88]	; (1a001b14 <Chip_Clock_GetClockInputHz+0xa8>)
1a001aba:	6818      	ldr	r0, [r3, #0]
		break;
1a001abc:	e021      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001abe:	4b16      	ldr	r3, [pc, #88]	; (1a001b18 <Chip_Clock_GetClockInputHz+0xac>)
1a001ac0:	6818      	ldr	r0, [r3, #0]
		break;
1a001ac2:	e01e      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001ac4:	4b15      	ldr	r3, [pc, #84]	; (1a001b1c <Chip_Clock_GetClockInputHz+0xb0>)
1a001ac6:	6818      	ldr	r0, [r3, #0]
		break;
1a001ac8:	e01b      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001aca:	4b14      	ldr	r3, [pc, #80]	; (1a001b1c <Chip_Clock_GetClockInputHz+0xb0>)
1a001acc:	6858      	ldr	r0, [r3, #4]
		break;
1a001ace:	e018      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001ad0:	f000 f868 	bl	1a001ba4 <Chip_Clock_GetMainPLLHz>
		break;
1a001ad4:	e015      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001ad6:	2100      	movs	r1, #0
1a001ad8:	f000 f89a 	bl	1a001c10 <Chip_Clock_GetDivRate>
		break;
1a001adc:	e011      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001ade:	2101      	movs	r1, #1
1a001ae0:	f000 f896 	bl	1a001c10 <Chip_Clock_GetDivRate>
		break;
1a001ae4:	e00d      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001ae6:	2102      	movs	r1, #2
1a001ae8:	f000 f892 	bl	1a001c10 <Chip_Clock_GetDivRate>
		break;
1a001aec:	e009      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001aee:	2103      	movs	r1, #3
1a001af0:	f000 f88e 	bl	1a001c10 <Chip_Clock_GetDivRate>
		break;
1a001af4:	e005      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001af6:	2104      	movs	r1, #4
1a001af8:	f000 f88a 	bl	1a001c10 <Chip_Clock_GetDivRate>
		break;
1a001afc:	e001      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a001afe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001b02:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001b04:	4806      	ldr	r0, [pc, #24]	; (1a001b20 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001b06:	e7fc      	b.n	1a001b02 <Chip_Clock_GetClockInputHz+0x96>
1a001b08:	00b71b00 	.word	0x00b71b00
1a001b0c:	40043000 	.word	0x40043000
1a001b10:	017d7840 	.word	0x017d7840
1a001b14:	1a008004 	.word	0x1a008004
1a001b18:	1a008030 	.word	0x1a008030
1a001b1c:	10002b1c 	.word	0x10002b1c
1a001b20:	02faf080 	.word	0x02faf080

1a001b24 <Chip_Clock_CalcMainPLLValue>:
{
1a001b24:	b538      	push	{r3, r4, r5, lr}
1a001b26:	4605      	mov	r5, r0
1a001b28:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001b2a:	7908      	ldrb	r0, [r1, #4]
1a001b2c:	f7ff ff9e 	bl	1a001a6c <Chip_Clock_GetClockInputHz>
1a001b30:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001b32:	4b19      	ldr	r3, [pc, #100]	; (1a001b98 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001b34:	442b      	add	r3, r5
1a001b36:	4a19      	ldr	r2, [pc, #100]	; (1a001b9c <Chip_Clock_CalcMainPLLValue+0x78>)
1a001b38:	4293      	cmp	r3, r2
1a001b3a:	d821      	bhi.n	1a001b80 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001b3c:	b318      	cbz	r0, 1a001b86 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001b3e:	2380      	movs	r3, #128	; 0x80
1a001b40:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001b42:	2300      	movs	r3, #0
1a001b44:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001b46:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001b48:	fbb5 f3f0 	udiv	r3, r5, r0
1a001b4c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001b4e:	4a14      	ldr	r2, [pc, #80]	; (1a001ba0 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001b50:	4295      	cmp	r5, r2
1a001b52:	d903      	bls.n	1a001b5c <Chip_Clock_CalcMainPLLValue+0x38>
1a001b54:	fb03 f000 	mul.w	r0, r3, r0
1a001b58:	42a8      	cmp	r0, r5
1a001b5a:	d007      	beq.n	1a001b6c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001b5c:	4621      	mov	r1, r4
1a001b5e:	4628      	mov	r0, r5
1a001b60:	f7ff fe96 	bl	1a001890 <pll_get_frac>
		if (!ppll->nsel) {
1a001b64:	68a3      	ldr	r3, [r4, #8]
1a001b66:	b18b      	cbz	r3, 1a001b8c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001b68:	3b01      	subs	r3, #1
1a001b6a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001b6c:	6923      	ldr	r3, [r4, #16]
1a001b6e:	b183      	cbz	r3, 1a001b92 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001b70:	68e2      	ldr	r2, [r4, #12]
1a001b72:	b10a      	cbz	r2, 1a001b78 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001b74:	3a01      	subs	r2, #1
1a001b76:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001b78:	3b01      	subs	r3, #1
1a001b7a:	6123      	str	r3, [r4, #16]
	return 0;
1a001b7c:	2000      	movs	r0, #0
}
1a001b7e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b84:	e7fb      	b.n	1a001b7e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b8a:	e7f8      	b.n	1a001b7e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b90:	e7f5      	b.n	1a001b7e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b96:	e7f2      	b.n	1a001b7e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001b98:	ff6b3a10 	.word	0xff6b3a10
1a001b9c:	0b940510 	.word	0x0b940510
1a001ba0:	094c5eff 	.word	0x094c5eff

1a001ba4 <Chip_Clock_GetMainPLLHz>:
{
1a001ba4:	b530      	push	{r4, r5, lr}
1a001ba6:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001ba8:	4d17      	ldr	r5, [pc, #92]	; (1a001c08 <Chip_Clock_GetMainPLLHz+0x64>)
1a001baa:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001bac:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001bb0:	f7ff ff5c 	bl	1a001a6c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001bb4:	4b15      	ldr	r3, [pc, #84]	; (1a001c0c <Chip_Clock_GetMainPLLHz+0x68>)
1a001bb6:	681b      	ldr	r3, [r3, #0]
1a001bb8:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001bba:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001bbc:	f013 0f01 	tst.w	r3, #1
1a001bc0:	d020      	beq.n	1a001c04 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001bc2:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001bc6:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001bca:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001bce:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001bd2:	3301      	adds	r3, #1
	n = nsel + 1;
1a001bd4:	3201      	adds	r2, #1
	p = ptab[psel];
1a001bd6:	f10d 0c08 	add.w	ip, sp, #8
1a001bda:	4461      	add	r1, ip
1a001bdc:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001be0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001be4:	d108      	bne.n	1a001bf8 <Chip_Clock_GetMainPLLHz+0x54>
1a001be6:	b93d      	cbnz	r5, 1a001bf8 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001be8:	0049      	lsls	r1, r1, #1
1a001bea:	fbb3 f3f1 	udiv	r3, r3, r1
1a001bee:	fbb0 f0f2 	udiv	r0, r0, r2
1a001bf2:	fb00 f003 	mul.w	r0, r0, r3
1a001bf6:	e003      	b.n	1a001c00 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001bf8:	fbb0 f0f2 	udiv	r0, r0, r2
1a001bfc:	fb03 f000 	mul.w	r0, r3, r0
}
1a001c00:	b003      	add	sp, #12
1a001c02:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001c04:	2000      	movs	r0, #0
1a001c06:	e7fb      	b.n	1a001c00 <Chip_Clock_GetMainPLLHz+0x5c>
1a001c08:	40050000 	.word	0x40050000
1a001c0c:	1a0080bc 	.word	0x1a0080bc

1a001c10 <Chip_Clock_GetDivRate>:
{
1a001c10:	b538      	push	{r3, r4, r5, lr}
1a001c12:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001c14:	4608      	mov	r0, r1
1a001c16:	f7ff ff0d 	bl	1a001a34 <Chip_Clock_GetDividerSource>
1a001c1a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001c1c:	4620      	mov	r0, r4
1a001c1e:	f7ff ff17 	bl	1a001a50 <Chip_Clock_GetDividerDivisor>
1a001c22:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001c24:	4628      	mov	r0, r5
1a001c26:	f7ff ff21 	bl	1a001a6c <Chip_Clock_GetClockInputHz>
1a001c2a:	3401      	adds	r4, #1
}
1a001c2c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001c30:	bd38      	pop	{r3, r4, r5, pc}
1a001c32:	Address 0x000000001a001c32 is out of bounds.


1a001c34 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001c34:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001c36:	f100 0416 	add.w	r4, r0, #22
1a001c3a:	00a4      	lsls	r4, r4, #2
1a001c3c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001c40:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001c44:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001c46:	281b      	cmp	r0, #27
1a001c48:	d813      	bhi.n	1a001c72 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001c4a:	2911      	cmp	r1, #17
1a001c4c:	d01a      	beq.n	1a001c84 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001c4e:	4d0e      	ldr	r5, [pc, #56]	; (1a001c88 <Chip_Clock_SetBaseClock+0x54>)
1a001c50:	4025      	ands	r5, r4

			if (autoblocken) {
1a001c52:	b10a      	cbz	r2, 1a001c58 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001c54:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001c58:	b10b      	cbz	r3, 1a001c5e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001c5a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001c5e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001c62:	3016      	adds	r0, #22
1a001c64:	0080      	lsls	r0, r0, #2
1a001c66:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001c6a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001c6e:	6045      	str	r5, [r0, #4]
1a001c70:	e008      	b.n	1a001c84 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001c72:	f044 0401 	orr.w	r4, r4, #1
1a001c76:	3016      	adds	r0, #22
1a001c78:	0080      	lsls	r0, r0, #2
1a001c7a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001c7e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001c82:	6044      	str	r4, [r0, #4]
	}
}
1a001c84:	bc30      	pop	{r4, r5}
1a001c86:	4770      	bx	lr
1a001c88:	e0fff7fe 	.word	0xe0fff7fe

1a001c8c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001c8c:	281b      	cmp	r0, #27
1a001c8e:	d80c      	bhi.n	1a001caa <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001c90:	3016      	adds	r0, #22
1a001c92:	0080      	lsls	r0, r0, #2
1a001c94:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001c98:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001c9c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001c9e:	f010 0f01 	tst.w	r0, #1
1a001ca2:	d104      	bne.n	1a001cae <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001ca4:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001ca8:	4770      	bx	lr
		return CLKINPUT_PD;
1a001caa:	2011      	movs	r0, #17
1a001cac:	4770      	bx	lr
		return CLKINPUT_PD;
1a001cae:	2011      	movs	r0, #17
}
1a001cb0:	4770      	bx	lr

1a001cb2 <Chip_Clock_GetBaseClocktHz>:
{
1a001cb2:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001cb4:	f7ff ffea 	bl	1a001c8c <Chip_Clock_GetBaseClock>
1a001cb8:	f7ff fed8 	bl	1a001a6c <Chip_Clock_GetClockInputHz>
}
1a001cbc:	bd08      	pop	{r3, pc}
1a001cbe:	Address 0x000000001a001cbe is out of bounds.


1a001cc0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001cc0:	b971      	cbnz	r1, 1a001ce0 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001cc2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001cc4:	b10a      	cbz	r2, 1a001cca <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001cc6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001cca:	2b02      	cmp	r3, #2
1a001ccc:	d00a      	beq.n	1a001ce4 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001cce:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001cd2:	d30a      	bcc.n	1a001cea <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001cd4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001cd8:	4b06      	ldr	r3, [pc, #24]	; (1a001cf4 <Chip_Clock_EnableOpts+0x34>)
1a001cda:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001cde:	4770      	bx	lr
		reg |= (1 << 1);
1a001ce0:	2103      	movs	r1, #3
1a001ce2:	e7ef      	b.n	1a001cc4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001ce4:	f041 0120 	orr.w	r1, r1, #32
1a001ce8:	e7f1      	b.n	1a001cce <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001cea:	3020      	adds	r0, #32
1a001cec:	4b02      	ldr	r3, [pc, #8]	; (1a001cf8 <Chip_Clock_EnableOpts+0x38>)
1a001cee:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001cf2:	4770      	bx	lr
1a001cf4:	40052000 	.word	0x40052000
1a001cf8:	40051000 	.word	0x40051000

1a001cfc <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001cfc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001d00:	d309      	bcc.n	1a001d16 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001d02:	4a09      	ldr	r2, [pc, #36]	; (1a001d28 <Chip_Clock_Enable+0x2c>)
1a001d04:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001d08:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001d0c:	f043 0301 	orr.w	r3, r3, #1
1a001d10:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001d14:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001d16:	4a05      	ldr	r2, [pc, #20]	; (1a001d2c <Chip_Clock_Enable+0x30>)
1a001d18:	3020      	adds	r0, #32
1a001d1a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001d1e:	f043 0301 	orr.w	r3, r3, #1
1a001d22:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001d26:	4770      	bx	lr
1a001d28:	40052000 	.word	0x40052000
1a001d2c:	40051000 	.word	0x40051000

1a001d30 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001d30:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001d32:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001d36:	d309      	bcc.n	1a001d4c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001d38:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001d3c:	4a0d      	ldr	r2, [pc, #52]	; (1a001d74 <Chip_Clock_GetRate+0x44>)
1a001d3e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001d42:	f014 0f01 	tst.w	r4, #1
1a001d46:	d107      	bne.n	1a001d58 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001d48:	2000      	movs	r0, #0
	}

	return rate;
}
1a001d4a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001d4c:	f100 0320 	add.w	r3, r0, #32
1a001d50:	4a09      	ldr	r2, [pc, #36]	; (1a001d78 <Chip_Clock_GetRate+0x48>)
1a001d52:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001d56:	e7f4      	b.n	1a001d42 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001d58:	f7ff fe20 	bl	1a00199c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001d5c:	f7ff ffa9 	bl	1a001cb2 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001d60:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001d64:	d103      	bne.n	1a001d6e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001d66:	2301      	movs	r3, #1
		rate = rate / div;
1a001d68:	fbb0 f0f3 	udiv	r0, r0, r3
1a001d6c:	e7ed      	b.n	1a001d4a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001d6e:	2302      	movs	r3, #2
1a001d70:	e7fa      	b.n	1a001d68 <Chip_Clock_GetRate+0x38>
1a001d72:	bf00      	nop
1a001d74:	40052000 	.word	0x40052000
1a001d78:	40051000 	.word	0x40051000

1a001d7c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001d7c:	2901      	cmp	r1, #1
1a001d7e:	d109      	bne.n	1a001d94 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001d80:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001d84:	0082      	lsls	r2, r0, #2
1a001d86:	4b04      	ldr	r3, [pc, #16]	; (1a001d98 <Chip_I2C_EventHandler+0x1c>)
1a001d88:	4413      	add	r3, r2
1a001d8a:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001d8c:	7d13      	ldrb	r3, [r2, #20]
1a001d8e:	b2db      	uxtb	r3, r3
1a001d90:	2b04      	cmp	r3, #4
1a001d92:	d0fb      	beq.n	1a001d8c <Chip_I2C_EventHandler+0x10>
}
1a001d94:	4770      	bx	lr
1a001d96:	bf00      	nop
1a001d98:	10000004 	.word	0x10000004

1a001d9c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001d9c:	b570      	push	{r4, r5, r6, lr}
1a001d9e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001da0:	4e06      	ldr	r6, [pc, #24]	; (1a001dbc <Chip_I2C_Init+0x20>)
1a001da2:	00c4      	lsls	r4, r0, #3
1a001da4:	1a22      	subs	r2, r4, r0
1a001da6:	0093      	lsls	r3, r2, #2
1a001da8:	4433      	add	r3, r6
1a001daa:	8898      	ldrh	r0, [r3, #4]
1a001dac:	f7ff ffa6 	bl	1a001cfc <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001db0:	1b64      	subs	r4, r4, r5
1a001db2:	00a3      	lsls	r3, r4, #2
1a001db4:	58f3      	ldr	r3, [r6, r3]
1a001db6:	226c      	movs	r2, #108	; 0x6c
1a001db8:	619a      	str	r2, [r3, #24]
}
1a001dba:	bd70      	pop	{r4, r5, r6, pc}
1a001dbc:	10000004 	.word	0x10000004

1a001dc0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001dc4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a001dc6:	4e0b      	ldr	r6, [pc, #44]	; (1a001df4 <Chip_I2C_SetClockRate+0x34>)
1a001dc8:	00c5      	lsls	r5, r0, #3
1a001dca:	1a2b      	subs	r3, r5, r0
1a001dcc:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001dd0:	eb06 0308 	add.w	r3, r6, r8
1a001dd4:	8898      	ldrh	r0, [r3, #4]
1a001dd6:	f7ff ffab 	bl	1a001d30 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a001dda:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001dde:	f856 3008 	ldr.w	r3, [r6, r8]
1a001de2:	0842      	lsrs	r2, r0, #1
1a001de4:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a001de6:	f856 3008 	ldr.w	r3, [r6, r8]
1a001dea:	691a      	ldr	r2, [r3, #16]
1a001dec:	1a80      	subs	r0, r0, r2
1a001dee:	6158      	str	r0, [r3, #20]
}
1a001df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001df4:	10000004 	.word	0x10000004

1a001df8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001df8:	4770      	bx	lr
1a001dfa:	Address 0x000000001a001dfa is out of bounds.


1a001dfc <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001dfc:	b570      	push	{r4, r5, r6, lr}
1a001dfe:	b08a      	sub	sp, #40	; 0x28
1a001e00:	4605      	mov	r5, r0
1a001e02:	460e      	mov	r6, r1
1a001e04:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001e06:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001e0a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001e0c:	2806      	cmp	r0, #6
1a001e0e:	d018      	beq.n	1a001e42 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001e10:	2300      	movs	r3, #0
1a001e12:	2201      	movs	r2, #1
1a001e14:	4629      	mov	r1, r5
1a001e16:	2004      	movs	r0, #4
1a001e18:	f7ff ff0c 	bl	1a001c34 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001e1c:	4a4a      	ldr	r2, [pc, #296]	; (1a001f48 <Chip_SetupCoreClock+0x14c>)
1a001e1e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001e20:	f043 0301 	orr.w	r3, r3, #1
1a001e24:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001e26:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001e2a:	a901      	add	r1, sp, #4
1a001e2c:	4630      	mov	r0, r6
1a001e2e:	f7ff fe79 	bl	1a001b24 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001e32:	4b46      	ldr	r3, [pc, #280]	; (1a001f4c <Chip_SetupCoreClock+0x150>)
1a001e34:	429e      	cmp	r6, r3
1a001e36:	d916      	bls.n	1a001e66 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001e38:	9b01      	ldr	r3, [sp, #4]
1a001e3a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001e3e:	d003      	beq.n	1a001e48 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001e40:	e7fe      	b.n	1a001e40 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001e42:	f7ff fdd1 	bl	1a0019e8 <Chip_Clock_EnableCrystal>
1a001e46:	e7e3      	b.n	1a001e10 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001e48:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001e4c:	d005      	beq.n	1a001e5a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001e52:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001e54:	2500      	movs	r5, #0
			direct = 1;
1a001e56:	2601      	movs	r6, #1
1a001e58:	e007      	b.n	1a001e6a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001e5a:	9b04      	ldr	r3, [sp, #16]
1a001e5c:	3301      	adds	r3, #1
1a001e5e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001e60:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001e62:	2600      	movs	r6, #0
1a001e64:	e001      	b.n	1a001e6a <Chip_SetupCoreClock+0x6e>
1a001e66:	2500      	movs	r5, #0
1a001e68:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001e6a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001e6e:	9b01      	ldr	r3, [sp, #4]
1a001e70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001e74:	9a05      	ldr	r2, [sp, #20]
1a001e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001e7a:	9a03      	ldr	r2, [sp, #12]
1a001e7c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001e80:	9a04      	ldr	r2, [sp, #16]
1a001e82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001e86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001e8a:	4a2f      	ldr	r2, [pc, #188]	; (1a001f48 <Chip_SetupCoreClock+0x14c>)
1a001e8c:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001e8e:	4b2e      	ldr	r3, [pc, #184]	; (1a001f48 <Chip_SetupCoreClock+0x14c>)
1a001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001e92:	f013 0f01 	tst.w	r3, #1
1a001e96:	d0fa      	beq.n	1a001e8e <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001e98:	2300      	movs	r3, #0
1a001e9a:	2201      	movs	r2, #1
1a001e9c:	2109      	movs	r1, #9
1a001e9e:	2004      	movs	r0, #4
1a001ea0:	f7ff fec8 	bl	1a001c34 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001ea4:	b306      	cbz	r6, 1a001ee8 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001ea6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001eaa:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001eae:	1e5a      	subs	r2, r3, #1
1a001eb0:	9209      	str	r2, [sp, #36]	; 0x24
1a001eb2:	2b00      	cmp	r3, #0
1a001eb4:	d1fa      	bne.n	1a001eac <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001eb6:	9b01      	ldr	r3, [sp, #4]
1a001eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001ebc:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001ebe:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001ec2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001ec6:	9a05      	ldr	r2, [sp, #20]
1a001ec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001ecc:	9a03      	ldr	r2, [sp, #12]
1a001ece:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001ed2:	9a04      	ldr	r2, [sp, #16]
1a001ed4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001ed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001edc:	4a1a      	ldr	r2, [pc, #104]	; (1a001f48 <Chip_SetupCoreClock+0x14c>)
1a001ede:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001ee0:	2c00      	cmp	r4, #0
1a001ee2:	d12e      	bne.n	1a001f42 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001ee4:	b00a      	add	sp, #40	; 0x28
1a001ee6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001ee8:	2d00      	cmp	r5, #0
1a001eea:	d0f9      	beq.n	1a001ee0 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001eec:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001ef0:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001ef4:	1e5a      	subs	r2, r3, #1
1a001ef6:	9209      	str	r2, [sp, #36]	; 0x24
1a001ef8:	2b00      	cmp	r3, #0
1a001efa:	d1fa      	bne.n	1a001ef2 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001efc:	9b04      	ldr	r3, [sp, #16]
1a001efe:	1e5a      	subs	r2, r3, #1
1a001f00:	9204      	str	r2, [sp, #16]
1a001f02:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001f06:	9b01      	ldr	r3, [sp, #4]
1a001f08:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001f0c:	9905      	ldr	r1, [sp, #20]
1a001f0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001f12:	9903      	ldr	r1, [sp, #12]
1a001f14:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001f18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001f20:	4a09      	ldr	r2, [pc, #36]	; (1a001f48 <Chip_SetupCoreClock+0x14c>)
1a001f22:	6453      	str	r3, [r2, #68]	; 0x44
1a001f24:	e7dc      	b.n	1a001ee0 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001f26:	480a      	ldr	r0, [pc, #40]	; (1a001f50 <Chip_SetupCoreClock+0x154>)
1a001f28:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001f2c:	78cb      	ldrb	r3, [r1, #3]
1a001f2e:	788a      	ldrb	r2, [r1, #2]
1a001f30:	7849      	ldrb	r1, [r1, #1]
1a001f32:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001f36:	f7ff fe7d 	bl	1a001c34 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001f3a:	3401      	adds	r4, #1
1a001f3c:	2c11      	cmp	r4, #17
1a001f3e:	d9f2      	bls.n	1a001f26 <Chip_SetupCoreClock+0x12a>
1a001f40:	e7d0      	b.n	1a001ee4 <Chip_SetupCoreClock+0xe8>
1a001f42:	2400      	movs	r4, #0
1a001f44:	e7fa      	b.n	1a001f3c <Chip_SetupCoreClock+0x140>
1a001f46:	bf00      	nop
1a001f48:	40050000 	.word	0x40050000
1a001f4c:	068e7780 	.word	0x068e7780
1a001f50:	1a008134 	.word	0x1a008134

1a001f54 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001f54:	4b03      	ldr	r3, [pc, #12]	; (1a001f64 <Chip_SSP_GetClockIndex+0x10>)
1a001f56:	4298      	cmp	r0, r3
1a001f58:	d001      	beq.n	1a001f5e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001f5a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001f5c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001f5e:	20a5      	movs	r0, #165	; 0xa5
1a001f60:	4770      	bx	lr
1a001f62:	bf00      	nop
1a001f64:	400c5000 	.word	0x400c5000

1a001f68 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001f68:	4b04      	ldr	r3, [pc, #16]	; (1a001f7c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001f6a:	4298      	cmp	r0, r3
1a001f6c:	d002      	beq.n	1a001f74 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001f6e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a001f72:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001f74:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001f78:	4770      	bx	lr
1a001f7a:	bf00      	nop
1a001f7c:	400c5000 	.word	0x400c5000

1a001f80 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001f80:	6803      	ldr	r3, [r0, #0]
1a001f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001f86:	0209      	lsls	r1, r1, #8
1a001f88:	b289      	uxth	r1, r1
1a001f8a:	4319      	orrs	r1, r3
1a001f8c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001f8e:	6102      	str	r2, [r0, #16]
}
1a001f90:	4770      	bx	lr

1a001f92 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001f92:	b570      	push	{r4, r5, r6, lr}
1a001f94:	4606      	mov	r6, r0
1a001f96:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001f98:	f7ff ffe6 	bl	1a001f68 <Chip_SSP_GetPeriphClockIndex>
1a001f9c:	f7ff fec8 	bl	1a001d30 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001fa0:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a001fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001fa6:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001fa8:	e000      	b.n	1a001fac <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001faa:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001fac:	42ab      	cmp	r3, r5
1a001fae:	d90b      	bls.n	1a001fc8 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001fb0:	1c4c      	adds	r4, r1, #1
1a001fb2:	fb02 f304 	mul.w	r3, r2, r4
1a001fb6:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001fba:	429d      	cmp	r5, r3
1a001fbc:	d2f6      	bcs.n	1a001fac <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001fbe:	2cff      	cmp	r4, #255	; 0xff
1a001fc0:	d9f3      	bls.n	1a001faa <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001fc2:	3202      	adds	r2, #2
				cr0_div = 0;
1a001fc4:	2100      	movs	r1, #0
1a001fc6:	e7f1      	b.n	1a001fac <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001fc8:	4630      	mov	r0, r6
1a001fca:	f7ff ffd9 	bl	1a001f80 <Chip_SSP_SetClockRate>
}
1a001fce:	bd70      	pop	{r4, r5, r6, pc}

1a001fd0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001fd0:	b510      	push	{r4, lr}
1a001fd2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001fd4:	f7ff ffbe 	bl	1a001f54 <Chip_SSP_GetClockIndex>
1a001fd8:	f7ff fe90 	bl	1a001cfc <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001fdc:	4620      	mov	r0, r4
1a001fde:	f7ff ffc3 	bl	1a001f68 <Chip_SSP_GetPeriphClockIndex>
1a001fe2:	f7ff fe8b 	bl	1a001cfc <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001fe6:	6863      	ldr	r3, [r4, #4]
1a001fe8:	f023 0304 	bic.w	r3, r3, #4
1a001fec:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001fee:	6823      	ldr	r3, [r4, #0]
1a001ff0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001ff4:	f043 0307 	orr.w	r3, r3, #7
1a001ff8:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001ffa:	4902      	ldr	r1, [pc, #8]	; (1a002004 <Chip_SSP_Init+0x34>)
1a001ffc:	4620      	mov	r0, r4
1a001ffe:	f7ff ffc8 	bl	1a001f92 <Chip_SSP_SetBitRate>
}
1a002002:	bd10      	pop	{r4, pc}
1a002004:	000186a0 	.word	0x000186a0

1a002008 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a002008:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00200a:	4a0b      	ldr	r2, [pc, #44]	; (1a002038 <SystemInit+0x30>)
1a00200c:	4b0b      	ldr	r3, [pc, #44]	; (1a00203c <SystemInit+0x34>)
1a00200e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a002010:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a002014:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a002016:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00201a:	2b20      	cmp	r3, #32
1a00201c:	d004      	beq.n	1a002028 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00201e:	f7ff fac5 	bl	1a0015ac <Board_SystemInit>
   Board_Init();
1a002022:	f7ff fa4b 	bl	1a0014bc <Board_Init>
}
1a002026:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a002028:	4a04      	ldr	r2, [pc, #16]	; (1a00203c <SystemInit+0x34>)
1a00202a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00202e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002032:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a002036:	e7f2      	b.n	1a00201e <SystemInit+0x16>
1a002038:	1a000000 	.word	0x1a000000
1a00203c:	e000ed00 	.word	0xe000ed00

1a002040 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002040:	4b04      	ldr	r3, [pc, #16]	; (1a002054 <cyclesCounterInit+0x14>)
1a002042:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a002044:	4a04      	ldr	r2, [pc, #16]	; (1a002058 <cyclesCounterInit+0x18>)
1a002046:	6813      	ldr	r3, [r2, #0]
1a002048:	f043 0301 	orr.w	r3, r3, #1
1a00204c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00204e:	2001      	movs	r0, #1
1a002050:	4770      	bx	lr
1a002052:	bf00      	nop
1a002054:	1000003c 	.word	0x1000003c
1a002058:	e0001000 	.word	0xe0001000

1a00205c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00205c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00205e:	4d0b      	ldr	r5, [pc, #44]	; (1a00208c <gpioObtainPinInit+0x30>)
1a002060:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002064:	182c      	adds	r4, r5, r0
1a002066:	5628      	ldrsb	r0, [r5, r0]
1a002068:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00206a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00206e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002070:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002074:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002076:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00207a:	9b02      	ldr	r3, [sp, #8]
1a00207c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00207e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002082:	9b03      	ldr	r3, [sp, #12]
1a002084:	701a      	strb	r2, [r3, #0]
}
1a002086:	bc30      	pop	{r4, r5}
1a002088:	4770      	bx	lr
1a00208a:	bf00      	nop
1a00208c:	1a00817c 	.word	0x1a00817c

1a002090 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a002090:	f110 0f02 	cmn.w	r0, #2
1a002094:	f000 80c7 	beq.w	1a002226 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a002098:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00209c:	f000 80c5 	beq.w	1a00222a <gpioInit+0x19a>
{
1a0020a0:	b570      	push	{r4, r5, r6, lr}
1a0020a2:	b084      	sub	sp, #16
1a0020a4:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0020a6:	2300      	movs	r3, #0
1a0020a8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0020ac:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0020b0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0020b4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0020b8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0020bc:	f10d 030b 	add.w	r3, sp, #11
1a0020c0:	9301      	str	r3, [sp, #4]
1a0020c2:	ab03      	add	r3, sp, #12
1a0020c4:	9300      	str	r3, [sp, #0]
1a0020c6:	f10d 030d 	add.w	r3, sp, #13
1a0020ca:	f10d 020e 	add.w	r2, sp, #14
1a0020ce:	f10d 010f 	add.w	r1, sp, #15
1a0020d2:	f7ff ffc3 	bl	1a00205c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0020d6:	2c05      	cmp	r4, #5
1a0020d8:	f200 80a9 	bhi.w	1a00222e <gpioInit+0x19e>
1a0020dc:	e8df f004 	tbb	[pc, r4]
1a0020e0:	45278109 	.word	0x45278109
1a0020e4:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0020e6:	4853      	ldr	r0, [pc, #332]	; (1a002234 <gpioInit+0x1a4>)
1a0020e8:	f7ff fe86 	bl	1a001df8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0020ec:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0020ee:	b004      	add	sp, #16
1a0020f0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0020f2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0020f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0020fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0020fe:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002102:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002106:	494c      	ldr	r1, [pc, #304]	; (1a002238 <gpioInit+0x1a8>)
1a002108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00210c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002110:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002114:	2001      	movs	r0, #1
1a002116:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00211a:	4c46      	ldr	r4, [pc, #280]	; (1a002234 <gpioInit+0x1a4>)
1a00211c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002120:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002124:	ea22 0201 	bic.w	r2, r2, r1
1a002128:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00212c:	e7df      	b.n	1a0020ee <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00212e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002132:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002136:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00213a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00213e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002142:	493d      	ldr	r1, [pc, #244]	; (1a002238 <gpioInit+0x1a8>)
1a002144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002148:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00214c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002150:	2001      	movs	r0, #1
1a002152:	fa00 f102 	lsl.w	r1, r0, r2
1a002156:	4c37      	ldr	r4, [pc, #220]	; (1a002234 <gpioInit+0x1a4>)
1a002158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00215c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002160:	ea22 0201 	bic.w	r2, r2, r1
1a002164:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002168:	e7c1      	b.n	1a0020ee <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00216a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00216e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002172:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002176:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00217a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00217e:	492e      	ldr	r1, [pc, #184]	; (1a002238 <gpioInit+0x1a8>)
1a002180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002184:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002188:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00218c:	2001      	movs	r0, #1
1a00218e:	fa00 f102 	lsl.w	r1, r0, r2
1a002192:	4c28      	ldr	r4, [pc, #160]	; (1a002234 <gpioInit+0x1a4>)
1a002194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002198:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00219c:	ea22 0201 	bic.w	r2, r2, r1
1a0021a0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0021a4:	e7a3      	b.n	1a0020ee <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0021a6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0021aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0021ae:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0021b2:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0021b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0021ba:	491f      	ldr	r1, [pc, #124]	; (1a002238 <gpioInit+0x1a8>)
1a0021bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0021c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0021c4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0021c8:	2001      	movs	r0, #1
1a0021ca:	fa00 f102 	lsl.w	r1, r0, r2
1a0021ce:	4c19      	ldr	r4, [pc, #100]	; (1a002234 <gpioInit+0x1a4>)
1a0021d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0021d4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0021d8:	ea22 0201 	bic.w	r2, r2, r1
1a0021dc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0021e0:	e785      	b.n	1a0020ee <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0021e2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0021e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0021ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0021ee:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0021f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0021f6:	4910      	ldr	r1, [pc, #64]	; (1a002238 <gpioInit+0x1a8>)
1a0021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0021fc:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a002200:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002204:	2001      	movs	r0, #1
1a002206:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00220a:	4b0a      	ldr	r3, [pc, #40]	; (1a002234 <gpioInit+0x1a4>)
1a00220c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002210:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a002214:	4331      	orrs	r1, r6
1a002216:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00221a:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a00221c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a002220:	2100      	movs	r1, #0
1a002222:	5499      	strb	r1, [r3, r2]
1a002224:	e763      	b.n	1a0020ee <gpioInit+0x5e>
	  return FALSE;
1a002226:	2000      	movs	r0, #0
1a002228:	4770      	bx	lr
	  return FALSE;
1a00222a:	2000      	movs	r0, #0
}
1a00222c:	4770      	bx	lr
      ret_val = 0;
1a00222e:	2000      	movs	r0, #0
1a002230:	e75d      	b.n	1a0020ee <gpioInit+0x5e>
1a002232:	bf00      	nop
1a002234:	400f4000 	.word	0x400f4000
1a002238:	40086000 	.word	0x40086000

1a00223c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a00223c:	f110 0f02 	cmn.w	r0, #2
1a002240:	d02d      	beq.n	1a00229e <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a002242:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002246:	d02c      	beq.n	1a0022a2 <gpioWrite+0x66>
{
1a002248:	b510      	push	{r4, lr}
1a00224a:	b084      	sub	sp, #16
1a00224c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00224e:	2300      	movs	r3, #0
1a002250:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002254:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002258:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00225c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002260:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002264:	f10d 030b 	add.w	r3, sp, #11
1a002268:	9301      	str	r3, [sp, #4]
1a00226a:	ab03      	add	r3, sp, #12
1a00226c:	9300      	str	r3, [sp, #0]
1a00226e:	f10d 030d 	add.w	r3, sp, #13
1a002272:	f10d 020e 	add.w	r2, sp, #14
1a002276:	f10d 010f 	add.w	r1, sp, #15
1a00227a:	f7ff feef 	bl	1a00205c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00227e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002282:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a002286:	1c21      	adds	r1, r4, #0
1a002288:	bf18      	it	ne
1a00228a:	2101      	movne	r1, #1
1a00228c:	015b      	lsls	r3, r3, #5
1a00228e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002292:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002296:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a002298:	2001      	movs	r0, #1
}
1a00229a:	b004      	add	sp, #16
1a00229c:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00229e:	2000      	movs	r0, #0
1a0022a0:	4770      	bx	lr
	  return FALSE;
1a0022a2:	2000      	movs	r0, #0
}
1a0022a4:	4770      	bx	lr

1a0022a6 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a0022a6:	f110 0f02 	cmn.w	r0, #2
1a0022aa:	d02c      	beq.n	1a002306 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a0022ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0022b0:	d02b      	beq.n	1a00230a <gpioRead+0x64>
{
1a0022b2:	b500      	push	{lr}
1a0022b4:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0022b6:	2300      	movs	r3, #0
1a0022b8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0022bc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0022c0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0022c4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0022c8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0022cc:	f10d 030b 	add.w	r3, sp, #11
1a0022d0:	9301      	str	r3, [sp, #4]
1a0022d2:	ab03      	add	r3, sp, #12
1a0022d4:	9300      	str	r3, [sp, #0]
1a0022d6:	f10d 030d 	add.w	r3, sp, #13
1a0022da:	f10d 020e 	add.w	r2, sp, #14
1a0022de:	f10d 010f 	add.w	r1, sp, #15
1a0022e2:	f7ff febb 	bl	1a00205c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0022e6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0022ea:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0022ee:	015b      	lsls	r3, r3, #5
1a0022f0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0022f4:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0022f8:	5c98      	ldrb	r0, [r3, r2]
1a0022fa:	3000      	adds	r0, #0
1a0022fc:	bf18      	it	ne
1a0022fe:	2001      	movne	r0, #1

   return ret_val;
}
1a002300:	b005      	add	sp, #20
1a002302:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a002306:	2001      	movs	r0, #1
1a002308:	4770      	bx	lr
      return FALSE;
1a00230a:	2000      	movs	r0, #0
}
1a00230c:	4770      	bx	lr
1a00230e:	Address 0x000000001a00230e is out of bounds.


1a002310 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a002310:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a002312:	4b04      	ldr	r3, [pc, #16]	; (1a002324 <USB0_IRQHandler+0x14>)
1a002314:	681b      	ldr	r3, [r3, #0]
1a002316:	681b      	ldr	r3, [r3, #0]
1a002318:	68db      	ldr	r3, [r3, #12]
1a00231a:	4a03      	ldr	r2, [pc, #12]	; (1a002328 <USB0_IRQHandler+0x18>)
1a00231c:	6810      	ldr	r0, [r2, #0]
1a00231e:	4798      	blx	r3
}
1a002320:	bd08      	pop	{r3, pc}
1a002322:	bf00      	nop
1a002324:	10002b80 	.word	0x10002b80
1a002328:	10002b24 	.word	0x10002b24

1a00232c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a00232c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00232e:	f7ff fa55 	bl	1a0017dc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a002332:	4b18      	ldr	r3, [pc, #96]	; (1a002394 <boardInit+0x68>)
1a002334:	6818      	ldr	r0, [r3, #0]
1a002336:	f7ff fe83 	bl	1a002040 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00233a:	2105      	movs	r1, #5
1a00233c:	2000      	movs	r0, #0
1a00233e:	f7ff fea7 	bl	1a002090 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a002342:	2100      	movs	r1, #0
1a002344:	2024      	movs	r0, #36	; 0x24
1a002346:	f7ff fea3 	bl	1a002090 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a00234a:	2100      	movs	r1, #0
1a00234c:	2025      	movs	r0, #37	; 0x25
1a00234e:	f7ff fe9f 	bl	1a002090 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a002352:	2100      	movs	r1, #0
1a002354:	2026      	movs	r0, #38	; 0x26
1a002356:	f7ff fe9b 	bl	1a002090 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a00235a:	2100      	movs	r1, #0
1a00235c:	2027      	movs	r0, #39	; 0x27
1a00235e:	f7ff fe97 	bl	1a002090 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a002362:	2101      	movs	r1, #1
1a002364:	2028      	movs	r0, #40	; 0x28
1a002366:	f7ff fe93 	bl	1a002090 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a00236a:	2101      	movs	r1, #1
1a00236c:	2029      	movs	r0, #41	; 0x29
1a00236e:	f7ff fe8f 	bl	1a002090 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a002372:	2101      	movs	r1, #1
1a002374:	202a      	movs	r0, #42	; 0x2a
1a002376:	f7ff fe8b 	bl	1a002090 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a00237a:	2101      	movs	r1, #1
1a00237c:	202b      	movs	r0, #43	; 0x2b
1a00237e:	f7ff fe87 	bl	1a002090 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a002382:	2101      	movs	r1, #1
1a002384:	202c      	movs	r0, #44	; 0x2c
1a002386:	f7ff fe83 	bl	1a002090 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a00238a:	2101      	movs	r1, #1
1a00238c:	202d      	movs	r0, #45	; 0x2d
1a00238e:	f7ff fe7f 	bl	1a002090 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a002392:	bd08      	pop	{r3, pc}
1a002394:	10002b7c 	.word	0x10002b7c

1a002398 <__aeabi_drsub>:
1a002398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a00239c:	e002      	b.n	1a0023a4 <__adddf3>
1a00239e:	bf00      	nop

1a0023a0 <__aeabi_dsub>:
1a0023a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a0023a4 <__adddf3>:
1a0023a4:	b530      	push	{r4, r5, lr}
1a0023a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a0023aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a0023ae:	ea94 0f05 	teq	r4, r5
1a0023b2:	bf08      	it	eq
1a0023b4:	ea90 0f02 	teqeq	r0, r2
1a0023b8:	bf1f      	itttt	ne
1a0023ba:	ea54 0c00 	orrsne.w	ip, r4, r0
1a0023be:	ea55 0c02 	orrsne.w	ip, r5, r2
1a0023c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a0023c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0023ca:	f000 80e2 	beq.w	1a002592 <__adddf3+0x1ee>
1a0023ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a0023d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a0023d6:	bfb8      	it	lt
1a0023d8:	426d      	neglt	r5, r5
1a0023da:	dd0c      	ble.n	1a0023f6 <__adddf3+0x52>
1a0023dc:	442c      	add	r4, r5
1a0023de:	ea80 0202 	eor.w	r2, r0, r2
1a0023e2:	ea81 0303 	eor.w	r3, r1, r3
1a0023e6:	ea82 0000 	eor.w	r0, r2, r0
1a0023ea:	ea83 0101 	eor.w	r1, r3, r1
1a0023ee:	ea80 0202 	eor.w	r2, r0, r2
1a0023f2:	ea81 0303 	eor.w	r3, r1, r3
1a0023f6:	2d36      	cmp	r5, #54	; 0x36
1a0023f8:	bf88      	it	hi
1a0023fa:	bd30      	pophi	{r4, r5, pc}
1a0023fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a002400:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002404:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a002408:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a00240c:	d002      	beq.n	1a002414 <__adddf3+0x70>
1a00240e:	4240      	negs	r0, r0
1a002410:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002414:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a002418:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a00241c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a002420:	d002      	beq.n	1a002428 <__adddf3+0x84>
1a002422:	4252      	negs	r2, r2
1a002424:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002428:	ea94 0f05 	teq	r4, r5
1a00242c:	f000 80a7 	beq.w	1a00257e <__adddf3+0x1da>
1a002430:	f1a4 0401 	sub.w	r4, r4, #1
1a002434:	f1d5 0e20 	rsbs	lr, r5, #32
1a002438:	db0d      	blt.n	1a002456 <__adddf3+0xb2>
1a00243a:	fa02 fc0e 	lsl.w	ip, r2, lr
1a00243e:	fa22 f205 	lsr.w	r2, r2, r5
1a002442:	1880      	adds	r0, r0, r2
1a002444:	f141 0100 	adc.w	r1, r1, #0
1a002448:	fa03 f20e 	lsl.w	r2, r3, lr
1a00244c:	1880      	adds	r0, r0, r2
1a00244e:	fa43 f305 	asr.w	r3, r3, r5
1a002452:	4159      	adcs	r1, r3
1a002454:	e00e      	b.n	1a002474 <__adddf3+0xd0>
1a002456:	f1a5 0520 	sub.w	r5, r5, #32
1a00245a:	f10e 0e20 	add.w	lr, lr, #32
1a00245e:	2a01      	cmp	r2, #1
1a002460:	fa03 fc0e 	lsl.w	ip, r3, lr
1a002464:	bf28      	it	cs
1a002466:	f04c 0c02 	orrcs.w	ip, ip, #2
1a00246a:	fa43 f305 	asr.w	r3, r3, r5
1a00246e:	18c0      	adds	r0, r0, r3
1a002470:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a002474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002478:	d507      	bpl.n	1a00248a <__adddf3+0xe6>
1a00247a:	f04f 0e00 	mov.w	lr, #0
1a00247e:	f1dc 0c00 	rsbs	ip, ip, #0
1a002482:	eb7e 0000 	sbcs.w	r0, lr, r0
1a002486:	eb6e 0101 	sbc.w	r1, lr, r1
1a00248a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a00248e:	d31b      	bcc.n	1a0024c8 <__adddf3+0x124>
1a002490:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a002494:	d30c      	bcc.n	1a0024b0 <__adddf3+0x10c>
1a002496:	0849      	lsrs	r1, r1, #1
1a002498:	ea5f 0030 	movs.w	r0, r0, rrx
1a00249c:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a0024a0:	f104 0401 	add.w	r4, r4, #1
1a0024a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a0024a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a0024ac:	f080 809a 	bcs.w	1a0025e4 <__adddf3+0x240>
1a0024b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a0024b4:	bf08      	it	eq
1a0024b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0024ba:	f150 0000 	adcs.w	r0, r0, #0
1a0024be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0024c2:	ea41 0105 	orr.w	r1, r1, r5
1a0024c6:	bd30      	pop	{r4, r5, pc}
1a0024c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a0024cc:	4140      	adcs	r0, r0
1a0024ce:	eb41 0101 	adc.w	r1, r1, r1
1a0024d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0024d6:	f1a4 0401 	sub.w	r4, r4, #1
1a0024da:	d1e9      	bne.n	1a0024b0 <__adddf3+0x10c>
1a0024dc:	f091 0f00 	teq	r1, #0
1a0024e0:	bf04      	itt	eq
1a0024e2:	4601      	moveq	r1, r0
1a0024e4:	2000      	moveq	r0, #0
1a0024e6:	fab1 f381 	clz	r3, r1
1a0024ea:	bf08      	it	eq
1a0024ec:	3320      	addeq	r3, #32
1a0024ee:	f1a3 030b 	sub.w	r3, r3, #11
1a0024f2:	f1b3 0220 	subs.w	r2, r3, #32
1a0024f6:	da0c      	bge.n	1a002512 <__adddf3+0x16e>
1a0024f8:	320c      	adds	r2, #12
1a0024fa:	dd08      	ble.n	1a00250e <__adddf3+0x16a>
1a0024fc:	f102 0c14 	add.w	ip, r2, #20
1a002500:	f1c2 020c 	rsb	r2, r2, #12
1a002504:	fa01 f00c 	lsl.w	r0, r1, ip
1a002508:	fa21 f102 	lsr.w	r1, r1, r2
1a00250c:	e00c      	b.n	1a002528 <__adddf3+0x184>
1a00250e:	f102 0214 	add.w	r2, r2, #20
1a002512:	bfd8      	it	le
1a002514:	f1c2 0c20 	rsble	ip, r2, #32
1a002518:	fa01 f102 	lsl.w	r1, r1, r2
1a00251c:	fa20 fc0c 	lsr.w	ip, r0, ip
1a002520:	bfdc      	itt	le
1a002522:	ea41 010c 	orrle.w	r1, r1, ip
1a002526:	4090      	lslle	r0, r2
1a002528:	1ae4      	subs	r4, r4, r3
1a00252a:	bfa2      	ittt	ge
1a00252c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a002530:	4329      	orrge	r1, r5
1a002532:	bd30      	popge	{r4, r5, pc}
1a002534:	ea6f 0404 	mvn.w	r4, r4
1a002538:	3c1f      	subs	r4, #31
1a00253a:	da1c      	bge.n	1a002576 <__adddf3+0x1d2>
1a00253c:	340c      	adds	r4, #12
1a00253e:	dc0e      	bgt.n	1a00255e <__adddf3+0x1ba>
1a002540:	f104 0414 	add.w	r4, r4, #20
1a002544:	f1c4 0220 	rsb	r2, r4, #32
1a002548:	fa20 f004 	lsr.w	r0, r0, r4
1a00254c:	fa01 f302 	lsl.w	r3, r1, r2
1a002550:	ea40 0003 	orr.w	r0, r0, r3
1a002554:	fa21 f304 	lsr.w	r3, r1, r4
1a002558:	ea45 0103 	orr.w	r1, r5, r3
1a00255c:	bd30      	pop	{r4, r5, pc}
1a00255e:	f1c4 040c 	rsb	r4, r4, #12
1a002562:	f1c4 0220 	rsb	r2, r4, #32
1a002566:	fa20 f002 	lsr.w	r0, r0, r2
1a00256a:	fa01 f304 	lsl.w	r3, r1, r4
1a00256e:	ea40 0003 	orr.w	r0, r0, r3
1a002572:	4629      	mov	r1, r5
1a002574:	bd30      	pop	{r4, r5, pc}
1a002576:	fa21 f004 	lsr.w	r0, r1, r4
1a00257a:	4629      	mov	r1, r5
1a00257c:	bd30      	pop	{r4, r5, pc}
1a00257e:	f094 0f00 	teq	r4, #0
1a002582:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a002586:	bf06      	itte	eq
1a002588:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a00258c:	3401      	addeq	r4, #1
1a00258e:	3d01      	subne	r5, #1
1a002590:	e74e      	b.n	1a002430 <__adddf3+0x8c>
1a002592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002596:	bf18      	it	ne
1a002598:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00259c:	d029      	beq.n	1a0025f2 <__adddf3+0x24e>
1a00259e:	ea94 0f05 	teq	r4, r5
1a0025a2:	bf08      	it	eq
1a0025a4:	ea90 0f02 	teqeq	r0, r2
1a0025a8:	d005      	beq.n	1a0025b6 <__adddf3+0x212>
1a0025aa:	ea54 0c00 	orrs.w	ip, r4, r0
1a0025ae:	bf04      	itt	eq
1a0025b0:	4619      	moveq	r1, r3
1a0025b2:	4610      	moveq	r0, r2
1a0025b4:	bd30      	pop	{r4, r5, pc}
1a0025b6:	ea91 0f03 	teq	r1, r3
1a0025ba:	bf1e      	ittt	ne
1a0025bc:	2100      	movne	r1, #0
1a0025be:	2000      	movne	r0, #0
1a0025c0:	bd30      	popne	{r4, r5, pc}
1a0025c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a0025c6:	d105      	bne.n	1a0025d4 <__adddf3+0x230>
1a0025c8:	0040      	lsls	r0, r0, #1
1a0025ca:	4149      	adcs	r1, r1
1a0025cc:	bf28      	it	cs
1a0025ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a0025d2:	bd30      	pop	{r4, r5, pc}
1a0025d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a0025d8:	bf3c      	itt	cc
1a0025da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a0025de:	bd30      	popcc	{r4, r5, pc}
1a0025e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0025e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0025e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0025ec:	f04f 0000 	mov.w	r0, #0
1a0025f0:	bd30      	pop	{r4, r5, pc}
1a0025f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0025f6:	bf1a      	itte	ne
1a0025f8:	4619      	movne	r1, r3
1a0025fa:	4610      	movne	r0, r2
1a0025fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a002600:	bf1c      	itt	ne
1a002602:	460b      	movne	r3, r1
1a002604:	4602      	movne	r2, r0
1a002606:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00260a:	bf06      	itte	eq
1a00260c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a002610:	ea91 0f03 	teqeq	r1, r3
1a002614:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a002618:	bd30      	pop	{r4, r5, pc}
1a00261a:	bf00      	nop

1a00261c <__aeabi_ui2d>:
1a00261c:	f090 0f00 	teq	r0, #0
1a002620:	bf04      	itt	eq
1a002622:	2100      	moveq	r1, #0
1a002624:	4770      	bxeq	lr
1a002626:	b530      	push	{r4, r5, lr}
1a002628:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00262c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002630:	f04f 0500 	mov.w	r5, #0
1a002634:	f04f 0100 	mov.w	r1, #0
1a002638:	e750      	b.n	1a0024dc <__adddf3+0x138>
1a00263a:	bf00      	nop

1a00263c <__aeabi_i2d>:
1a00263c:	f090 0f00 	teq	r0, #0
1a002640:	bf04      	itt	eq
1a002642:	2100      	moveq	r1, #0
1a002644:	4770      	bxeq	lr
1a002646:	b530      	push	{r4, r5, lr}
1a002648:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00264c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002650:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002654:	bf48      	it	mi
1a002656:	4240      	negmi	r0, r0
1a002658:	f04f 0100 	mov.w	r1, #0
1a00265c:	e73e      	b.n	1a0024dc <__adddf3+0x138>
1a00265e:	bf00      	nop

1a002660 <__aeabi_f2d>:
1a002660:	0042      	lsls	r2, r0, #1
1a002662:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a002666:	ea4f 0131 	mov.w	r1, r1, rrx
1a00266a:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a00266e:	bf1f      	itttt	ne
1a002670:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002674:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002678:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a00267c:	4770      	bxne	lr
1a00267e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a002682:	bf08      	it	eq
1a002684:	4770      	bxeq	lr
1a002686:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a00268a:	bf04      	itt	eq
1a00268c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a002690:	4770      	bxeq	lr
1a002692:	b530      	push	{r4, r5, lr}
1a002694:	f44f 7460 	mov.w	r4, #896	; 0x380
1a002698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00269c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0026a0:	e71c      	b.n	1a0024dc <__adddf3+0x138>
1a0026a2:	bf00      	nop

1a0026a4 <__aeabi_ul2d>:
1a0026a4:	ea50 0201 	orrs.w	r2, r0, r1
1a0026a8:	bf08      	it	eq
1a0026aa:	4770      	bxeq	lr
1a0026ac:	b530      	push	{r4, r5, lr}
1a0026ae:	f04f 0500 	mov.w	r5, #0
1a0026b2:	e00a      	b.n	1a0026ca <__aeabi_l2d+0x16>

1a0026b4 <__aeabi_l2d>:
1a0026b4:	ea50 0201 	orrs.w	r2, r0, r1
1a0026b8:	bf08      	it	eq
1a0026ba:	4770      	bxeq	lr
1a0026bc:	b530      	push	{r4, r5, lr}
1a0026be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a0026c2:	d502      	bpl.n	1a0026ca <__aeabi_l2d+0x16>
1a0026c4:	4240      	negs	r0, r0
1a0026c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0026ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0026ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0026d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a0026d6:	f43f aed8 	beq.w	1a00248a <__adddf3+0xe6>
1a0026da:	f04f 0203 	mov.w	r2, #3
1a0026de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0026e2:	bf18      	it	ne
1a0026e4:	3203      	addne	r2, #3
1a0026e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0026ea:	bf18      	it	ne
1a0026ec:	3203      	addne	r2, #3
1a0026ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a0026f2:	f1c2 0320 	rsb	r3, r2, #32
1a0026f6:	fa00 fc03 	lsl.w	ip, r0, r3
1a0026fa:	fa20 f002 	lsr.w	r0, r0, r2
1a0026fe:	fa01 fe03 	lsl.w	lr, r1, r3
1a002702:	ea40 000e 	orr.w	r0, r0, lr
1a002706:	fa21 f102 	lsr.w	r1, r1, r2
1a00270a:	4414      	add	r4, r2
1a00270c:	e6bd      	b.n	1a00248a <__adddf3+0xe6>
1a00270e:	bf00      	nop

1a002710 <__aeabi_dmul>:
1a002710:	b570      	push	{r4, r5, r6, lr}
1a002712:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00271a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a00271e:	bf1d      	ittte	ne
1a002720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002724:	ea94 0f0c 	teqne	r4, ip
1a002728:	ea95 0f0c 	teqne	r5, ip
1a00272c:	f000 f8de 	bleq	1a0028ec <__aeabi_dmul+0x1dc>
1a002730:	442c      	add	r4, r5
1a002732:	ea81 0603 	eor.w	r6, r1, r3
1a002736:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a00273a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a00273e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002742:	bf18      	it	ne
1a002744:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00274c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002750:	d038      	beq.n	1a0027c4 <__aeabi_dmul+0xb4>
1a002752:	fba0 ce02 	umull	ip, lr, r0, r2
1a002756:	f04f 0500 	mov.w	r5, #0
1a00275a:	fbe1 e502 	umlal	lr, r5, r1, r2
1a00275e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002762:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002766:	f04f 0600 	mov.w	r6, #0
1a00276a:	fbe1 5603 	umlal	r5, r6, r1, r3
1a00276e:	f09c 0f00 	teq	ip, #0
1a002772:	bf18      	it	ne
1a002774:	f04e 0e01 	orrne.w	lr, lr, #1
1a002778:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a00277c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002780:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002784:	d204      	bcs.n	1a002790 <__aeabi_dmul+0x80>
1a002786:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a00278a:	416d      	adcs	r5, r5
1a00278c:	eb46 0606 	adc.w	r6, r6, r6
1a002790:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002794:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a002798:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a00279c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a0027a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a0027a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0027a8:	bf88      	it	hi
1a0027aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0027ae:	d81e      	bhi.n	1a0027ee <__aeabi_dmul+0xde>
1a0027b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a0027b4:	bf08      	it	eq
1a0027b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a0027ba:	f150 0000 	adcs.w	r0, r0, #0
1a0027be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0027c2:	bd70      	pop	{r4, r5, r6, pc}
1a0027c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a0027c8:	ea46 0101 	orr.w	r1, r6, r1
1a0027cc:	ea40 0002 	orr.w	r0, r0, r2
1a0027d0:	ea81 0103 	eor.w	r1, r1, r3
1a0027d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a0027d8:	bfc2      	ittt	gt
1a0027da:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0027de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0027e2:	bd70      	popgt	{r4, r5, r6, pc}
1a0027e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0027e8:	f04f 0e00 	mov.w	lr, #0
1a0027ec:	3c01      	subs	r4, #1
1a0027ee:	f300 80ab 	bgt.w	1a002948 <__aeabi_dmul+0x238>
1a0027f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a0027f6:	bfde      	ittt	le
1a0027f8:	2000      	movle	r0, #0
1a0027fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a0027fe:	bd70      	pople	{r4, r5, r6, pc}
1a002800:	f1c4 0400 	rsb	r4, r4, #0
1a002804:	3c20      	subs	r4, #32
1a002806:	da35      	bge.n	1a002874 <__aeabi_dmul+0x164>
1a002808:	340c      	adds	r4, #12
1a00280a:	dc1b      	bgt.n	1a002844 <__aeabi_dmul+0x134>
1a00280c:	f104 0414 	add.w	r4, r4, #20
1a002810:	f1c4 0520 	rsb	r5, r4, #32
1a002814:	fa00 f305 	lsl.w	r3, r0, r5
1a002818:	fa20 f004 	lsr.w	r0, r0, r4
1a00281c:	fa01 f205 	lsl.w	r2, r1, r5
1a002820:	ea40 0002 	orr.w	r0, r0, r2
1a002824:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a00282c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002830:	fa21 f604 	lsr.w	r6, r1, r4
1a002834:	eb42 0106 	adc.w	r1, r2, r6
1a002838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00283c:	bf08      	it	eq
1a00283e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002842:	bd70      	pop	{r4, r5, r6, pc}
1a002844:	f1c4 040c 	rsb	r4, r4, #12
1a002848:	f1c4 0520 	rsb	r5, r4, #32
1a00284c:	fa00 f304 	lsl.w	r3, r0, r4
1a002850:	fa20 f005 	lsr.w	r0, r0, r5
1a002854:	fa01 f204 	lsl.w	r2, r1, r4
1a002858:	ea40 0002 	orr.w	r0, r0, r2
1a00285c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002860:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002864:	f141 0100 	adc.w	r1, r1, #0
1a002868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00286c:	bf08      	it	eq
1a00286e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002872:	bd70      	pop	{r4, r5, r6, pc}
1a002874:	f1c4 0520 	rsb	r5, r4, #32
1a002878:	fa00 f205 	lsl.w	r2, r0, r5
1a00287c:	ea4e 0e02 	orr.w	lr, lr, r2
1a002880:	fa20 f304 	lsr.w	r3, r0, r4
1a002884:	fa01 f205 	lsl.w	r2, r1, r5
1a002888:	ea43 0302 	orr.w	r3, r3, r2
1a00288c:	fa21 f004 	lsr.w	r0, r1, r4
1a002890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002894:	fa21 f204 	lsr.w	r2, r1, r4
1a002898:	ea20 0002 	bic.w	r0, r0, r2
1a00289c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a0028a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0028a4:	bf08      	it	eq
1a0028a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0028aa:	bd70      	pop	{r4, r5, r6, pc}
1a0028ac:	f094 0f00 	teq	r4, #0
1a0028b0:	d10f      	bne.n	1a0028d2 <__aeabi_dmul+0x1c2>
1a0028b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a0028b6:	0040      	lsls	r0, r0, #1
1a0028b8:	eb41 0101 	adc.w	r1, r1, r1
1a0028bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0028c0:	bf08      	it	eq
1a0028c2:	3c01      	subeq	r4, #1
1a0028c4:	d0f7      	beq.n	1a0028b6 <__aeabi_dmul+0x1a6>
1a0028c6:	ea41 0106 	orr.w	r1, r1, r6
1a0028ca:	f095 0f00 	teq	r5, #0
1a0028ce:	bf18      	it	ne
1a0028d0:	4770      	bxne	lr
1a0028d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a0028d6:	0052      	lsls	r2, r2, #1
1a0028d8:	eb43 0303 	adc.w	r3, r3, r3
1a0028dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a0028e0:	bf08      	it	eq
1a0028e2:	3d01      	subeq	r5, #1
1a0028e4:	d0f7      	beq.n	1a0028d6 <__aeabi_dmul+0x1c6>
1a0028e6:	ea43 0306 	orr.w	r3, r3, r6
1a0028ea:	4770      	bx	lr
1a0028ec:	ea94 0f0c 	teq	r4, ip
1a0028f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0028f4:	bf18      	it	ne
1a0028f6:	ea95 0f0c 	teqne	r5, ip
1a0028fa:	d00c      	beq.n	1a002916 <__aeabi_dmul+0x206>
1a0028fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002900:	bf18      	it	ne
1a002902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002906:	d1d1      	bne.n	1a0028ac <__aeabi_dmul+0x19c>
1a002908:	ea81 0103 	eor.w	r1, r1, r3
1a00290c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002910:	f04f 0000 	mov.w	r0, #0
1a002914:	bd70      	pop	{r4, r5, r6, pc}
1a002916:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00291a:	bf06      	itte	eq
1a00291c:	4610      	moveq	r0, r2
1a00291e:	4619      	moveq	r1, r3
1a002920:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002924:	d019      	beq.n	1a00295a <__aeabi_dmul+0x24a>
1a002926:	ea94 0f0c 	teq	r4, ip
1a00292a:	d102      	bne.n	1a002932 <__aeabi_dmul+0x222>
1a00292c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002930:	d113      	bne.n	1a00295a <__aeabi_dmul+0x24a>
1a002932:	ea95 0f0c 	teq	r5, ip
1a002936:	d105      	bne.n	1a002944 <__aeabi_dmul+0x234>
1a002938:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a00293c:	bf1c      	itt	ne
1a00293e:	4610      	movne	r0, r2
1a002940:	4619      	movne	r1, r3
1a002942:	d10a      	bne.n	1a00295a <__aeabi_dmul+0x24a>
1a002944:	ea81 0103 	eor.w	r1, r1, r3
1a002948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a00294c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002950:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002954:	f04f 0000 	mov.w	r0, #0
1a002958:	bd70      	pop	{r4, r5, r6, pc}
1a00295a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a00295e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002962:	bd70      	pop	{r4, r5, r6, pc}

1a002964 <__aeabi_ddiv>:
1a002964:	b570      	push	{r4, r5, r6, lr}
1a002966:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00296a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00296e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002972:	bf1d      	ittte	ne
1a002974:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002978:	ea94 0f0c 	teqne	r4, ip
1a00297c:	ea95 0f0c 	teqne	r5, ip
1a002980:	f000 f8a7 	bleq	1a002ad2 <__aeabi_ddiv+0x16e>
1a002984:	eba4 0405 	sub.w	r4, r4, r5
1a002988:	ea81 0e03 	eor.w	lr, r1, r3
1a00298c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002990:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002994:	f000 8088 	beq.w	1a002aa8 <__aeabi_ddiv+0x144>
1a002998:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a00299c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a0029a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a0029a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a0029a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a0029ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a0029b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a0029b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a0029b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a0029bc:	429d      	cmp	r5, r3
1a0029be:	bf08      	it	eq
1a0029c0:	4296      	cmpeq	r6, r2
1a0029c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a0029c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a0029ca:	d202      	bcs.n	1a0029d2 <__aeabi_ddiv+0x6e>
1a0029cc:	085b      	lsrs	r3, r3, #1
1a0029ce:	ea4f 0232 	mov.w	r2, r2, rrx
1a0029d2:	1ab6      	subs	r6, r6, r2
1a0029d4:	eb65 0503 	sbc.w	r5, r5, r3
1a0029d8:	085b      	lsrs	r3, r3, #1
1a0029da:	ea4f 0232 	mov.w	r2, r2, rrx
1a0029de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a0029e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a0029e6:	ebb6 0e02 	subs.w	lr, r6, r2
1a0029ea:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0029ee:	bf22      	ittt	cs
1a0029f0:	1ab6      	subcs	r6, r6, r2
1a0029f2:	4675      	movcs	r5, lr
1a0029f4:	ea40 000c 	orrcs.w	r0, r0, ip
1a0029f8:	085b      	lsrs	r3, r3, #1
1a0029fa:	ea4f 0232 	mov.w	r2, r2, rrx
1a0029fe:	ebb6 0e02 	subs.w	lr, r6, r2
1a002a02:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002a06:	bf22      	ittt	cs
1a002a08:	1ab6      	subcs	r6, r6, r2
1a002a0a:	4675      	movcs	r5, lr
1a002a0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002a10:	085b      	lsrs	r3, r3, #1
1a002a12:	ea4f 0232 	mov.w	r2, r2, rrx
1a002a16:	ebb6 0e02 	subs.w	lr, r6, r2
1a002a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002a1e:	bf22      	ittt	cs
1a002a20:	1ab6      	subcs	r6, r6, r2
1a002a22:	4675      	movcs	r5, lr
1a002a24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a002a28:	085b      	lsrs	r3, r3, #1
1a002a2a:	ea4f 0232 	mov.w	r2, r2, rrx
1a002a2e:	ebb6 0e02 	subs.w	lr, r6, r2
1a002a32:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002a36:	bf22      	ittt	cs
1a002a38:	1ab6      	subcs	r6, r6, r2
1a002a3a:	4675      	movcs	r5, lr
1a002a3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002a40:	ea55 0e06 	orrs.w	lr, r5, r6
1a002a44:	d018      	beq.n	1a002a78 <__aeabi_ddiv+0x114>
1a002a46:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a002a4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a002a4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002a52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002a56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a002a5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a002a5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002a62:	d1c0      	bne.n	1a0029e6 <__aeabi_ddiv+0x82>
1a002a64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002a68:	d10b      	bne.n	1a002a82 <__aeabi_ddiv+0x11e>
1a002a6a:	ea41 0100 	orr.w	r1, r1, r0
1a002a6e:	f04f 0000 	mov.w	r0, #0
1a002a72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002a76:	e7b6      	b.n	1a0029e6 <__aeabi_ddiv+0x82>
1a002a78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002a7c:	bf04      	itt	eq
1a002a7e:	4301      	orreq	r1, r0
1a002a80:	2000      	moveq	r0, #0
1a002a82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002a86:	bf88      	it	hi
1a002a88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002a8c:	f63f aeaf 	bhi.w	1a0027ee <__aeabi_dmul+0xde>
1a002a90:	ebb5 0c03 	subs.w	ip, r5, r3
1a002a94:	bf04      	itt	eq
1a002a96:	ebb6 0c02 	subseq.w	ip, r6, r2
1a002a9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002a9e:	f150 0000 	adcs.w	r0, r0, #0
1a002aa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002aa6:	bd70      	pop	{r4, r5, r6, pc}
1a002aa8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a002aac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002ab0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a002ab4:	bfc2      	ittt	gt
1a002ab6:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002aba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002abe:	bd70      	popgt	{r4, r5, r6, pc}
1a002ac0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002ac4:	f04f 0e00 	mov.w	lr, #0
1a002ac8:	3c01      	subs	r4, #1
1a002aca:	e690      	b.n	1a0027ee <__aeabi_dmul+0xde>
1a002acc:	ea45 0e06 	orr.w	lr, r5, r6
1a002ad0:	e68d      	b.n	1a0027ee <__aeabi_dmul+0xde>
1a002ad2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002ad6:	ea94 0f0c 	teq	r4, ip
1a002ada:	bf08      	it	eq
1a002adc:	ea95 0f0c 	teqeq	r5, ip
1a002ae0:	f43f af3b 	beq.w	1a00295a <__aeabi_dmul+0x24a>
1a002ae4:	ea94 0f0c 	teq	r4, ip
1a002ae8:	d10a      	bne.n	1a002b00 <__aeabi_ddiv+0x19c>
1a002aea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002aee:	f47f af34 	bne.w	1a00295a <__aeabi_dmul+0x24a>
1a002af2:	ea95 0f0c 	teq	r5, ip
1a002af6:	f47f af25 	bne.w	1a002944 <__aeabi_dmul+0x234>
1a002afa:	4610      	mov	r0, r2
1a002afc:	4619      	mov	r1, r3
1a002afe:	e72c      	b.n	1a00295a <__aeabi_dmul+0x24a>
1a002b00:	ea95 0f0c 	teq	r5, ip
1a002b04:	d106      	bne.n	1a002b14 <__aeabi_ddiv+0x1b0>
1a002b06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002b0a:	f43f aefd 	beq.w	1a002908 <__aeabi_dmul+0x1f8>
1a002b0e:	4610      	mov	r0, r2
1a002b10:	4619      	mov	r1, r3
1a002b12:	e722      	b.n	1a00295a <__aeabi_dmul+0x24a>
1a002b14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002b18:	bf18      	it	ne
1a002b1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002b1e:	f47f aec5 	bne.w	1a0028ac <__aeabi_dmul+0x19c>
1a002b22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a002b26:	f47f af0d 	bne.w	1a002944 <__aeabi_dmul+0x234>
1a002b2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a002b2e:	f47f aeeb 	bne.w	1a002908 <__aeabi_dmul+0x1f8>
1a002b32:	e712      	b.n	1a00295a <__aeabi_dmul+0x24a>

1a002b34 <__gedf2>:
1a002b34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a002b38:	e006      	b.n	1a002b48 <__cmpdf2+0x4>
1a002b3a:	bf00      	nop

1a002b3c <__ledf2>:
1a002b3c:	f04f 0c01 	mov.w	ip, #1
1a002b40:	e002      	b.n	1a002b48 <__cmpdf2+0x4>
1a002b42:	bf00      	nop

1a002b44 <__cmpdf2>:
1a002b44:	f04f 0c01 	mov.w	ip, #1
1a002b48:	f84d cd04 	str.w	ip, [sp, #-4]!
1a002b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002b58:	bf18      	it	ne
1a002b5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a002b5e:	d01b      	beq.n	1a002b98 <__cmpdf2+0x54>
1a002b60:	b001      	add	sp, #4
1a002b62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a002b66:	bf0c      	ite	eq
1a002b68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a002b6c:	ea91 0f03 	teqne	r1, r3
1a002b70:	bf02      	ittt	eq
1a002b72:	ea90 0f02 	teqeq	r0, r2
1a002b76:	2000      	moveq	r0, #0
1a002b78:	4770      	bxeq	lr
1a002b7a:	f110 0f00 	cmn.w	r0, #0
1a002b7e:	ea91 0f03 	teq	r1, r3
1a002b82:	bf58      	it	pl
1a002b84:	4299      	cmppl	r1, r3
1a002b86:	bf08      	it	eq
1a002b88:	4290      	cmpeq	r0, r2
1a002b8a:	bf2c      	ite	cs
1a002b8c:	17d8      	asrcs	r0, r3, #31
1a002b8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a002b92:	f040 0001 	orr.w	r0, r0, #1
1a002b96:	4770      	bx	lr
1a002b98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002ba0:	d102      	bne.n	1a002ba8 <__cmpdf2+0x64>
1a002ba2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a002ba6:	d107      	bne.n	1a002bb8 <__cmpdf2+0x74>
1a002ba8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002bac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002bb0:	d1d6      	bne.n	1a002b60 <__cmpdf2+0x1c>
1a002bb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a002bb6:	d0d3      	beq.n	1a002b60 <__cmpdf2+0x1c>
1a002bb8:	f85d 0b04 	ldr.w	r0, [sp], #4
1a002bbc:	4770      	bx	lr
1a002bbe:	bf00      	nop

1a002bc0 <__aeabi_cdrcmple>:
1a002bc0:	4684      	mov	ip, r0
1a002bc2:	4610      	mov	r0, r2
1a002bc4:	4662      	mov	r2, ip
1a002bc6:	468c      	mov	ip, r1
1a002bc8:	4619      	mov	r1, r3
1a002bca:	4663      	mov	r3, ip
1a002bcc:	e000      	b.n	1a002bd0 <__aeabi_cdcmpeq>
1a002bce:	bf00      	nop

1a002bd0 <__aeabi_cdcmpeq>:
1a002bd0:	b501      	push	{r0, lr}
1a002bd2:	f7ff ffb7 	bl	1a002b44 <__cmpdf2>
1a002bd6:	2800      	cmp	r0, #0
1a002bd8:	bf48      	it	mi
1a002bda:	f110 0f00 	cmnmi.w	r0, #0
1a002bde:	bd01      	pop	{r0, pc}

1a002be0 <__aeabi_dcmpeq>:
1a002be0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002be4:	f7ff fff4 	bl	1a002bd0 <__aeabi_cdcmpeq>
1a002be8:	bf0c      	ite	eq
1a002bea:	2001      	moveq	r0, #1
1a002bec:	2000      	movne	r0, #0
1a002bee:	f85d fb08 	ldr.w	pc, [sp], #8
1a002bf2:	bf00      	nop

1a002bf4 <__aeabi_dcmplt>:
1a002bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002bf8:	f7ff ffea 	bl	1a002bd0 <__aeabi_cdcmpeq>
1a002bfc:	bf34      	ite	cc
1a002bfe:	2001      	movcc	r0, #1
1a002c00:	2000      	movcs	r0, #0
1a002c02:	f85d fb08 	ldr.w	pc, [sp], #8
1a002c06:	bf00      	nop

1a002c08 <__aeabi_dcmple>:
1a002c08:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002c0c:	f7ff ffe0 	bl	1a002bd0 <__aeabi_cdcmpeq>
1a002c10:	bf94      	ite	ls
1a002c12:	2001      	movls	r0, #1
1a002c14:	2000      	movhi	r0, #0
1a002c16:	f85d fb08 	ldr.w	pc, [sp], #8
1a002c1a:	bf00      	nop

1a002c1c <__aeabi_dcmpge>:
1a002c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002c20:	f7ff ffce 	bl	1a002bc0 <__aeabi_cdrcmple>
1a002c24:	bf94      	ite	ls
1a002c26:	2001      	movls	r0, #1
1a002c28:	2000      	movhi	r0, #0
1a002c2a:	f85d fb08 	ldr.w	pc, [sp], #8
1a002c2e:	bf00      	nop

1a002c30 <__aeabi_dcmpgt>:
1a002c30:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002c34:	f7ff ffc4 	bl	1a002bc0 <__aeabi_cdrcmple>
1a002c38:	bf34      	ite	cc
1a002c3a:	2001      	movcc	r0, #1
1a002c3c:	2000      	movcs	r0, #0
1a002c3e:	f85d fb08 	ldr.w	pc, [sp], #8
1a002c42:	bf00      	nop

1a002c44 <__aeabi_uldivmod>:
1a002c44:	b953      	cbnz	r3, 1a002c5c <__aeabi_uldivmod+0x18>
1a002c46:	b94a      	cbnz	r2, 1a002c5c <__aeabi_uldivmod+0x18>
1a002c48:	2900      	cmp	r1, #0
1a002c4a:	bf08      	it	eq
1a002c4c:	2800      	cmpeq	r0, #0
1a002c4e:	bf1c      	itt	ne
1a002c50:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a002c54:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002c58:	f000 b974 	b.w	1a002f44 <__aeabi_idiv0>
1a002c5c:	f1ad 0c08 	sub.w	ip, sp, #8
1a002c60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002c64:	f000 f806 	bl	1a002c74 <__udivmoddi4>
1a002c68:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002c70:	b004      	add	sp, #16
1a002c72:	4770      	bx	lr

1a002c74 <__udivmoddi4>:
1a002c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002c78:	9e08      	ldr	r6, [sp, #32]
1a002c7a:	4604      	mov	r4, r0
1a002c7c:	4688      	mov	r8, r1
1a002c7e:	2b00      	cmp	r3, #0
1a002c80:	f040 8085 	bne.w	1a002d8e <__udivmoddi4+0x11a>
1a002c84:	428a      	cmp	r2, r1
1a002c86:	4615      	mov	r5, r2
1a002c88:	d948      	bls.n	1a002d1c <__udivmoddi4+0xa8>
1a002c8a:	fab2 f282 	clz	r2, r2
1a002c8e:	b14a      	cbz	r2, 1a002ca4 <__udivmoddi4+0x30>
1a002c90:	f1c2 0720 	rsb	r7, r2, #32
1a002c94:	fa01 f302 	lsl.w	r3, r1, r2
1a002c98:	fa20 f707 	lsr.w	r7, r0, r7
1a002c9c:	4095      	lsls	r5, r2
1a002c9e:	ea47 0803 	orr.w	r8, r7, r3
1a002ca2:	4094      	lsls	r4, r2
1a002ca4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002ca8:	0c23      	lsrs	r3, r4, #16
1a002caa:	fbb8 f7fe 	udiv	r7, r8, lr
1a002cae:	fa1f fc85 	uxth.w	ip, r5
1a002cb2:	fb0e 8817 	mls	r8, lr, r7, r8
1a002cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002cba:	fb07 f10c 	mul.w	r1, r7, ip
1a002cbe:	4299      	cmp	r1, r3
1a002cc0:	d909      	bls.n	1a002cd6 <__udivmoddi4+0x62>
1a002cc2:	18eb      	adds	r3, r5, r3
1a002cc4:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a002cc8:	f080 80e3 	bcs.w	1a002e92 <__udivmoddi4+0x21e>
1a002ccc:	4299      	cmp	r1, r3
1a002cce:	f240 80e0 	bls.w	1a002e92 <__udivmoddi4+0x21e>
1a002cd2:	3f02      	subs	r7, #2
1a002cd4:	442b      	add	r3, r5
1a002cd6:	1a5b      	subs	r3, r3, r1
1a002cd8:	b2a4      	uxth	r4, r4
1a002cda:	fbb3 f0fe 	udiv	r0, r3, lr
1a002cde:	fb0e 3310 	mls	r3, lr, r0, r3
1a002ce2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002ce6:	fb00 fc0c 	mul.w	ip, r0, ip
1a002cea:	45a4      	cmp	ip, r4
1a002cec:	d909      	bls.n	1a002d02 <__udivmoddi4+0x8e>
1a002cee:	192c      	adds	r4, r5, r4
1a002cf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002cf4:	f080 80cb 	bcs.w	1a002e8e <__udivmoddi4+0x21a>
1a002cf8:	45a4      	cmp	ip, r4
1a002cfa:	f240 80c8 	bls.w	1a002e8e <__udivmoddi4+0x21a>
1a002cfe:	3802      	subs	r0, #2
1a002d00:	442c      	add	r4, r5
1a002d02:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002d06:	eba4 040c 	sub.w	r4, r4, ip
1a002d0a:	2700      	movs	r7, #0
1a002d0c:	b11e      	cbz	r6, 1a002d16 <__udivmoddi4+0xa2>
1a002d0e:	40d4      	lsrs	r4, r2
1a002d10:	2300      	movs	r3, #0
1a002d12:	e9c6 4300 	strd	r4, r3, [r6]
1a002d16:	4639      	mov	r1, r7
1a002d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002d1c:	2a00      	cmp	r2, #0
1a002d1e:	d053      	beq.n	1a002dc8 <__udivmoddi4+0x154>
1a002d20:	fab2 f282 	clz	r2, r2
1a002d24:	2a00      	cmp	r2, #0
1a002d26:	f040 80b6 	bne.w	1a002e96 <__udivmoddi4+0x222>
1a002d2a:	1b49      	subs	r1, r1, r5
1a002d2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002d30:	fa1f f885 	uxth.w	r8, r5
1a002d34:	2701      	movs	r7, #1
1a002d36:	fbb1 fcfe 	udiv	ip, r1, lr
1a002d3a:	0c23      	lsrs	r3, r4, #16
1a002d3c:	fb0e 111c 	mls	r1, lr, ip, r1
1a002d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002d44:	fb08 f10c 	mul.w	r1, r8, ip
1a002d48:	4299      	cmp	r1, r3
1a002d4a:	d907      	bls.n	1a002d5c <__udivmoddi4+0xe8>
1a002d4c:	18eb      	adds	r3, r5, r3
1a002d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a002d52:	d202      	bcs.n	1a002d5a <__udivmoddi4+0xe6>
1a002d54:	4299      	cmp	r1, r3
1a002d56:	f200 80ec 	bhi.w	1a002f32 <__udivmoddi4+0x2be>
1a002d5a:	4684      	mov	ip, r0
1a002d5c:	1a59      	subs	r1, r3, r1
1a002d5e:	b2a3      	uxth	r3, r4
1a002d60:	fbb1 f0fe 	udiv	r0, r1, lr
1a002d64:	fb0e 1410 	mls	r4, lr, r0, r1
1a002d68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002d6c:	fb08 f800 	mul.w	r8, r8, r0
1a002d70:	45a0      	cmp	r8, r4
1a002d72:	d907      	bls.n	1a002d84 <__udivmoddi4+0x110>
1a002d74:	192c      	adds	r4, r5, r4
1a002d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002d7a:	d202      	bcs.n	1a002d82 <__udivmoddi4+0x10e>
1a002d7c:	45a0      	cmp	r8, r4
1a002d7e:	f200 80dc 	bhi.w	1a002f3a <__udivmoddi4+0x2c6>
1a002d82:	4618      	mov	r0, r3
1a002d84:	eba4 0408 	sub.w	r4, r4, r8
1a002d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002d8c:	e7be      	b.n	1a002d0c <__udivmoddi4+0x98>
1a002d8e:	428b      	cmp	r3, r1
1a002d90:	d908      	bls.n	1a002da4 <__udivmoddi4+0x130>
1a002d92:	2e00      	cmp	r6, #0
1a002d94:	d078      	beq.n	1a002e88 <__udivmoddi4+0x214>
1a002d96:	2700      	movs	r7, #0
1a002d98:	e9c6 0100 	strd	r0, r1, [r6]
1a002d9c:	4638      	mov	r0, r7
1a002d9e:	4639      	mov	r1, r7
1a002da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002da4:	fab3 f783 	clz	r7, r3
1a002da8:	b97f      	cbnz	r7, 1a002dca <__udivmoddi4+0x156>
1a002daa:	428b      	cmp	r3, r1
1a002dac:	d302      	bcc.n	1a002db4 <__udivmoddi4+0x140>
1a002dae:	4282      	cmp	r2, r0
1a002db0:	f200 80bd 	bhi.w	1a002f2e <__udivmoddi4+0x2ba>
1a002db4:	1a84      	subs	r4, r0, r2
1a002db6:	eb61 0303 	sbc.w	r3, r1, r3
1a002dba:	2001      	movs	r0, #1
1a002dbc:	4698      	mov	r8, r3
1a002dbe:	2e00      	cmp	r6, #0
1a002dc0:	d0a9      	beq.n	1a002d16 <__udivmoddi4+0xa2>
1a002dc2:	e9c6 4800 	strd	r4, r8, [r6]
1a002dc6:	e7a6      	b.n	1a002d16 <__udivmoddi4+0xa2>
1a002dc8:	deff      	udf	#255	; 0xff
1a002dca:	f1c7 0520 	rsb	r5, r7, #32
1a002dce:	40bb      	lsls	r3, r7
1a002dd0:	fa22 fc05 	lsr.w	ip, r2, r5
1a002dd4:	ea4c 0c03 	orr.w	ip, ip, r3
1a002dd8:	fa01 f407 	lsl.w	r4, r1, r7
1a002ddc:	fa20 f805 	lsr.w	r8, r0, r5
1a002de0:	fa21 f305 	lsr.w	r3, r1, r5
1a002de4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002de8:	ea48 0404 	orr.w	r4, r8, r4
1a002dec:	fbb3 f9fe 	udiv	r9, r3, lr
1a002df0:	0c21      	lsrs	r1, r4, #16
1a002df2:	fb0e 3319 	mls	r3, lr, r9, r3
1a002df6:	fa1f f88c 	uxth.w	r8, ip
1a002dfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002dfe:	fb09 fa08 	mul.w	sl, r9, r8
1a002e02:	459a      	cmp	sl, r3
1a002e04:	fa02 f207 	lsl.w	r2, r2, r7
1a002e08:	fa00 f107 	lsl.w	r1, r0, r7
1a002e0c:	d90b      	bls.n	1a002e26 <__udivmoddi4+0x1b2>
1a002e0e:	eb1c 0303 	adds.w	r3, ip, r3
1a002e12:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002e16:	f080 8088 	bcs.w	1a002f2a <__udivmoddi4+0x2b6>
1a002e1a:	459a      	cmp	sl, r3
1a002e1c:	f240 8085 	bls.w	1a002f2a <__udivmoddi4+0x2b6>
1a002e20:	f1a9 0902 	sub.w	r9, r9, #2
1a002e24:	4463      	add	r3, ip
1a002e26:	eba3 030a 	sub.w	r3, r3, sl
1a002e2a:	b2a4      	uxth	r4, r4
1a002e2c:	fbb3 f0fe 	udiv	r0, r3, lr
1a002e30:	fb0e 3310 	mls	r3, lr, r0, r3
1a002e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002e38:	fb00 f808 	mul.w	r8, r0, r8
1a002e3c:	45a0      	cmp	r8, r4
1a002e3e:	d908      	bls.n	1a002e52 <__udivmoddi4+0x1de>
1a002e40:	eb1c 0404 	adds.w	r4, ip, r4
1a002e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002e48:	d26b      	bcs.n	1a002f22 <__udivmoddi4+0x2ae>
1a002e4a:	45a0      	cmp	r8, r4
1a002e4c:	d969      	bls.n	1a002f22 <__udivmoddi4+0x2ae>
1a002e4e:	3802      	subs	r0, #2
1a002e50:	4464      	add	r4, ip
1a002e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002e56:	eba4 0408 	sub.w	r4, r4, r8
1a002e5a:	fba0 8902 	umull	r8, r9, r0, r2
1a002e5e:	454c      	cmp	r4, r9
1a002e60:	46c6      	mov	lr, r8
1a002e62:	464b      	mov	r3, r9
1a002e64:	d354      	bcc.n	1a002f10 <__udivmoddi4+0x29c>
1a002e66:	d051      	beq.n	1a002f0c <__udivmoddi4+0x298>
1a002e68:	2e00      	cmp	r6, #0
1a002e6a:	d069      	beq.n	1a002f40 <__udivmoddi4+0x2cc>
1a002e6c:	ebb1 020e 	subs.w	r2, r1, lr
1a002e70:	eb64 0403 	sbc.w	r4, r4, r3
1a002e74:	fa04 f505 	lsl.w	r5, r4, r5
1a002e78:	fa22 f307 	lsr.w	r3, r2, r7
1a002e7c:	40fc      	lsrs	r4, r7
1a002e7e:	431d      	orrs	r5, r3
1a002e80:	e9c6 5400 	strd	r5, r4, [r6]
1a002e84:	2700      	movs	r7, #0
1a002e86:	e746      	b.n	1a002d16 <__udivmoddi4+0xa2>
1a002e88:	4637      	mov	r7, r6
1a002e8a:	4630      	mov	r0, r6
1a002e8c:	e743      	b.n	1a002d16 <__udivmoddi4+0xa2>
1a002e8e:	4618      	mov	r0, r3
1a002e90:	e737      	b.n	1a002d02 <__udivmoddi4+0x8e>
1a002e92:	4607      	mov	r7, r0
1a002e94:	e71f      	b.n	1a002cd6 <__udivmoddi4+0x62>
1a002e96:	f1c2 0320 	rsb	r3, r2, #32
1a002e9a:	fa20 f703 	lsr.w	r7, r0, r3
1a002e9e:	4095      	lsls	r5, r2
1a002ea0:	fa01 f002 	lsl.w	r0, r1, r2
1a002ea4:	fa21 f303 	lsr.w	r3, r1, r3
1a002ea8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002eac:	4338      	orrs	r0, r7
1a002eae:	0c01      	lsrs	r1, r0, #16
1a002eb0:	fbb3 f7fe 	udiv	r7, r3, lr
1a002eb4:	fa1f f885 	uxth.w	r8, r5
1a002eb8:	fb0e 3317 	mls	r3, lr, r7, r3
1a002ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002ec0:	fb07 f308 	mul.w	r3, r7, r8
1a002ec4:	428b      	cmp	r3, r1
1a002ec6:	fa04 f402 	lsl.w	r4, r4, r2
1a002eca:	d907      	bls.n	1a002edc <__udivmoddi4+0x268>
1a002ecc:	1869      	adds	r1, r5, r1
1a002ece:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a002ed2:	d228      	bcs.n	1a002f26 <__udivmoddi4+0x2b2>
1a002ed4:	428b      	cmp	r3, r1
1a002ed6:	d926      	bls.n	1a002f26 <__udivmoddi4+0x2b2>
1a002ed8:	3f02      	subs	r7, #2
1a002eda:	4429      	add	r1, r5
1a002edc:	1acb      	subs	r3, r1, r3
1a002ede:	b281      	uxth	r1, r0
1a002ee0:	fbb3 f0fe 	udiv	r0, r3, lr
1a002ee4:	fb0e 3310 	mls	r3, lr, r0, r3
1a002ee8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002eec:	fb00 f308 	mul.w	r3, r0, r8
1a002ef0:	428b      	cmp	r3, r1
1a002ef2:	d907      	bls.n	1a002f04 <__udivmoddi4+0x290>
1a002ef4:	1869      	adds	r1, r5, r1
1a002ef6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002efa:	d210      	bcs.n	1a002f1e <__udivmoddi4+0x2aa>
1a002efc:	428b      	cmp	r3, r1
1a002efe:	d90e      	bls.n	1a002f1e <__udivmoddi4+0x2aa>
1a002f00:	3802      	subs	r0, #2
1a002f02:	4429      	add	r1, r5
1a002f04:	1ac9      	subs	r1, r1, r3
1a002f06:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002f0a:	e714      	b.n	1a002d36 <__udivmoddi4+0xc2>
1a002f0c:	4541      	cmp	r1, r8
1a002f0e:	d2ab      	bcs.n	1a002e68 <__udivmoddi4+0x1f4>
1a002f10:	ebb8 0e02 	subs.w	lr, r8, r2
1a002f14:	eb69 020c 	sbc.w	r2, r9, ip
1a002f18:	3801      	subs	r0, #1
1a002f1a:	4613      	mov	r3, r2
1a002f1c:	e7a4      	b.n	1a002e68 <__udivmoddi4+0x1f4>
1a002f1e:	4660      	mov	r0, ip
1a002f20:	e7f0      	b.n	1a002f04 <__udivmoddi4+0x290>
1a002f22:	4618      	mov	r0, r3
1a002f24:	e795      	b.n	1a002e52 <__udivmoddi4+0x1de>
1a002f26:	4667      	mov	r7, ip
1a002f28:	e7d8      	b.n	1a002edc <__udivmoddi4+0x268>
1a002f2a:	4681      	mov	r9, r0
1a002f2c:	e77b      	b.n	1a002e26 <__udivmoddi4+0x1b2>
1a002f2e:	4638      	mov	r0, r7
1a002f30:	e745      	b.n	1a002dbe <__udivmoddi4+0x14a>
1a002f32:	f1ac 0c02 	sub.w	ip, ip, #2
1a002f36:	442b      	add	r3, r5
1a002f38:	e710      	b.n	1a002d5c <__udivmoddi4+0xe8>
1a002f3a:	3802      	subs	r0, #2
1a002f3c:	442c      	add	r4, r5
1a002f3e:	e721      	b.n	1a002d84 <__udivmoddi4+0x110>
1a002f40:	4637      	mov	r7, r6
1a002f42:	e6e8      	b.n	1a002d16 <__udivmoddi4+0xa2>

1a002f44 <__aeabi_idiv0>:
1a002f44:	4770      	bx	lr
1a002f46:	bf00      	nop

1a002f48 <_fclose_r>:
1a002f48:	b570      	push	{r4, r5, r6, lr}
1a002f4a:	2900      	cmp	r1, #0
1a002f4c:	d04a      	beq.n	1a002fe4 <_fclose_r+0x9c>
1a002f4e:	4605      	mov	r5, r0
1a002f50:	460c      	mov	r4, r1
1a002f52:	b110      	cbz	r0, 1a002f5a <_fclose_r+0x12>
1a002f54:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a002f56:	2b00      	cmp	r3, #0
1a002f58:	d047      	beq.n	1a002fea <_fclose_r+0xa2>
1a002f5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a002f60:	07d8      	lsls	r0, r3, #31
1a002f62:	d532      	bpl.n	1a002fca <_fclose_r+0x82>
1a002f64:	2a00      	cmp	r2, #0
1a002f66:	d03d      	beq.n	1a002fe4 <_fclose_r+0x9c>
1a002f68:	4621      	mov	r1, r4
1a002f6a:	4628      	mov	r0, r5
1a002f6c:	f000 f854 	bl	1a003018 <__sflush_r>
1a002f70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002f72:	4606      	mov	r6, r0
1a002f74:	b133      	cbz	r3, 1a002f84 <_fclose_r+0x3c>
1a002f76:	69e1      	ldr	r1, [r4, #28]
1a002f78:	4628      	mov	r0, r5
1a002f7a:	4798      	blx	r3
1a002f7c:	2800      	cmp	r0, #0
1a002f7e:	bfb8      	it	lt
1a002f80:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a002f84:	89a3      	ldrh	r3, [r4, #12]
1a002f86:	061a      	lsls	r2, r3, #24
1a002f88:	d43c      	bmi.n	1a003004 <_fclose_r+0xbc>
1a002f8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a002f8c:	b141      	cbz	r1, 1a002fa0 <_fclose_r+0x58>
1a002f8e:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a002f92:	4299      	cmp	r1, r3
1a002f94:	d002      	beq.n	1a002f9c <_fclose_r+0x54>
1a002f96:	4628      	mov	r0, r5
1a002f98:	f000 f9c6 	bl	1a003328 <_free_r>
1a002f9c:	2300      	movs	r3, #0
1a002f9e:	6323      	str	r3, [r4, #48]	; 0x30
1a002fa0:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a002fa2:	b121      	cbz	r1, 1a002fae <_fclose_r+0x66>
1a002fa4:	4628      	mov	r0, r5
1a002fa6:	f000 f9bf 	bl	1a003328 <_free_r>
1a002faa:	2300      	movs	r3, #0
1a002fac:	6463      	str	r3, [r4, #68]	; 0x44
1a002fae:	f000 f95f 	bl	1a003270 <__sfp_lock_acquire>
1a002fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002fb4:	2200      	movs	r2, #0
1a002fb6:	07db      	lsls	r3, r3, #31
1a002fb8:	81a2      	strh	r2, [r4, #12]
1a002fba:	d528      	bpl.n	1a00300e <_fclose_r+0xc6>
1a002fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002fbe:	f000 faf9 	bl	1a0035b4 <__retarget_lock_close_recursive>
1a002fc2:	f000 f95b 	bl	1a00327c <__sfp_lock_release>
1a002fc6:	4630      	mov	r0, r6
1a002fc8:	bd70      	pop	{r4, r5, r6, pc}
1a002fca:	0591      	lsls	r1, r2, #22
1a002fcc:	d4cc      	bmi.n	1a002f68 <_fclose_r+0x20>
1a002fce:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002fd0:	f000 faf2 	bl	1a0035b8 <__retarget_lock_acquire_recursive>
1a002fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002fd8:	2b00      	cmp	r3, #0
1a002fda:	d1c5      	bne.n	1a002f68 <_fclose_r+0x20>
1a002fdc:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a002fde:	f016 0601 	ands.w	r6, r6, #1
1a002fe2:	d00a      	beq.n	1a002ffa <_fclose_r+0xb2>
1a002fe4:	2600      	movs	r6, #0
1a002fe6:	4630      	mov	r0, r6
1a002fe8:	bd70      	pop	{r4, r5, r6, pc}
1a002fea:	f000 f917 	bl	1a00321c <__sinit>
1a002fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a002ff4:	07d8      	lsls	r0, r3, #31
1a002ff6:	d4b5      	bmi.n	1a002f64 <_fclose_r+0x1c>
1a002ff8:	e7e7      	b.n	1a002fca <_fclose_r+0x82>
1a002ffa:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002ffc:	f000 fade 	bl	1a0035bc <__retarget_lock_release_recursive>
1a003000:	4630      	mov	r0, r6
1a003002:	bd70      	pop	{r4, r5, r6, pc}
1a003004:	6921      	ldr	r1, [r4, #16]
1a003006:	4628      	mov	r0, r5
1a003008:	f000 f98e 	bl	1a003328 <_free_r>
1a00300c:	e7bd      	b.n	1a002f8a <_fclose_r+0x42>
1a00300e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003010:	f000 fad4 	bl	1a0035bc <__retarget_lock_release_recursive>
1a003014:	e7d2      	b.n	1a002fbc <_fclose_r+0x74>
1a003016:	bf00      	nop

1a003018 <__sflush_r>:
1a003018:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a00301c:	b29a      	uxth	r2, r3
1a00301e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003022:	460c      	mov	r4, r1
1a003024:	0711      	lsls	r1, r2, #28
1a003026:	4680      	mov	r8, r0
1a003028:	d448      	bmi.n	1a0030bc <__sflush_r+0xa4>
1a00302a:	6862      	ldr	r2, [r4, #4]
1a00302c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003030:	2a00      	cmp	r2, #0
1a003032:	81a3      	strh	r3, [r4, #12]
1a003034:	dd5d      	ble.n	1a0030f2 <__sflush_r+0xda>
1a003036:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a003038:	2d00      	cmp	r5, #0
1a00303a:	d057      	beq.n	1a0030ec <__sflush_r+0xd4>
1a00303c:	2200      	movs	r2, #0
1a00303e:	b29b      	uxth	r3, r3
1a003040:	f8d8 6000 	ldr.w	r6, [r8]
1a003044:	69e1      	ldr	r1, [r4, #28]
1a003046:	f8c8 2000 	str.w	r2, [r8]
1a00304a:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a00304e:	d154      	bne.n	1a0030fa <__sflush_r+0xe2>
1a003050:	2301      	movs	r3, #1
1a003052:	4640      	mov	r0, r8
1a003054:	47a8      	blx	r5
1a003056:	1c43      	adds	r3, r0, #1
1a003058:	4602      	mov	r2, r0
1a00305a:	d065      	beq.n	1a003128 <__sflush_r+0x110>
1a00305c:	89a3      	ldrh	r3, [r4, #12]
1a00305e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a003060:	69e1      	ldr	r1, [r4, #28]
1a003062:	075f      	lsls	r7, r3, #29
1a003064:	d505      	bpl.n	1a003072 <__sflush_r+0x5a>
1a003066:	6860      	ldr	r0, [r4, #4]
1a003068:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00306a:	1a12      	subs	r2, r2, r0
1a00306c:	b10b      	cbz	r3, 1a003072 <__sflush_r+0x5a>
1a00306e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a003070:	1ad2      	subs	r2, r2, r3
1a003072:	2300      	movs	r3, #0
1a003074:	4640      	mov	r0, r8
1a003076:	47a8      	blx	r5
1a003078:	1c45      	adds	r5, r0, #1
1a00307a:	d148      	bne.n	1a00310e <__sflush_r+0xf6>
1a00307c:	f8d8 2000 	ldr.w	r2, [r8]
1a003080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003084:	2a00      	cmp	r2, #0
1a003086:	d05c      	beq.n	1a003142 <__sflush_r+0x12a>
1a003088:	2a1d      	cmp	r2, #29
1a00308a:	d001      	beq.n	1a003090 <__sflush_r+0x78>
1a00308c:	2a16      	cmp	r2, #22
1a00308e:	d164      	bne.n	1a00315a <__sflush_r+0x142>
1a003090:	6922      	ldr	r2, [r4, #16]
1a003092:	2100      	movs	r1, #0
1a003094:	e9c4 2100 	strd	r2, r1, [r4]
1a003098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a00309c:	81a3      	strh	r3, [r4, #12]
1a00309e:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a0030a0:	f8c8 6000 	str.w	r6, [r8]
1a0030a4:	b311      	cbz	r1, 1a0030ec <__sflush_r+0xd4>
1a0030a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a0030aa:	4299      	cmp	r1, r3
1a0030ac:	d002      	beq.n	1a0030b4 <__sflush_r+0x9c>
1a0030ae:	4640      	mov	r0, r8
1a0030b0:	f000 f93a 	bl	1a003328 <_free_r>
1a0030b4:	2000      	movs	r0, #0
1a0030b6:	6320      	str	r0, [r4, #48]	; 0x30
1a0030b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0030bc:	6926      	ldr	r6, [r4, #16]
1a0030be:	b1ae      	cbz	r6, 1a0030ec <__sflush_r+0xd4>
1a0030c0:	6825      	ldr	r5, [r4, #0]
1a0030c2:	6026      	str	r6, [r4, #0]
1a0030c4:	0791      	lsls	r1, r2, #30
1a0030c6:	bf0c      	ite	eq
1a0030c8:	6963      	ldreq	r3, [r4, #20]
1a0030ca:	2300      	movne	r3, #0
1a0030cc:	1bad      	subs	r5, r5, r6
1a0030ce:	60a3      	str	r3, [r4, #8]
1a0030d0:	e00a      	b.n	1a0030e8 <__sflush_r+0xd0>
1a0030d2:	462b      	mov	r3, r5
1a0030d4:	4632      	mov	r2, r6
1a0030d6:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0030d8:	69e1      	ldr	r1, [r4, #28]
1a0030da:	4640      	mov	r0, r8
1a0030dc:	47b8      	blx	r7
1a0030de:	2800      	cmp	r0, #0
1a0030e0:	eba5 0500 	sub.w	r5, r5, r0
1a0030e4:	4406      	add	r6, r0
1a0030e6:	dd0a      	ble.n	1a0030fe <__sflush_r+0xe6>
1a0030e8:	2d00      	cmp	r5, #0
1a0030ea:	dcf2      	bgt.n	1a0030d2 <__sflush_r+0xba>
1a0030ec:	2000      	movs	r0, #0
1a0030ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0030f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0030f4:	2a00      	cmp	r2, #0
1a0030f6:	dc9e      	bgt.n	1a003036 <__sflush_r+0x1e>
1a0030f8:	e7f8      	b.n	1a0030ec <__sflush_r+0xd4>
1a0030fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a0030fc:	e7b1      	b.n	1a003062 <__sflush_r+0x4a>
1a0030fe:	89a3      	ldrh	r3, [r4, #12]
1a003100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003104:	81a3      	strh	r3, [r4, #12]
1a003106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00310a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00310e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003112:	6922      	ldr	r2, [r4, #16]
1a003114:	6022      	str	r2, [r4, #0]
1a003116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a00311a:	2200      	movs	r2, #0
1a00311c:	6062      	str	r2, [r4, #4]
1a00311e:	04da      	lsls	r2, r3, #19
1a003120:	81a3      	strh	r3, [r4, #12]
1a003122:	d5bc      	bpl.n	1a00309e <__sflush_r+0x86>
1a003124:	6520      	str	r0, [r4, #80]	; 0x50
1a003126:	e7ba      	b.n	1a00309e <__sflush_r+0x86>
1a003128:	f8d8 3000 	ldr.w	r3, [r8]
1a00312c:	2b00      	cmp	r3, #0
1a00312e:	d095      	beq.n	1a00305c <__sflush_r+0x44>
1a003130:	2b1d      	cmp	r3, #29
1a003132:	d00f      	beq.n	1a003154 <__sflush_r+0x13c>
1a003134:	2b16      	cmp	r3, #22
1a003136:	d00d      	beq.n	1a003154 <__sflush_r+0x13c>
1a003138:	89a3      	ldrh	r3, [r4, #12]
1a00313a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00313e:	81a3      	strh	r3, [r4, #12]
1a003140:	e7d5      	b.n	1a0030ee <__sflush_r+0xd6>
1a003142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a003146:	6921      	ldr	r1, [r4, #16]
1a003148:	81a3      	strh	r3, [r4, #12]
1a00314a:	04db      	lsls	r3, r3, #19
1a00314c:	e9c4 1200 	strd	r1, r2, [r4]
1a003150:	d5a5      	bpl.n	1a00309e <__sflush_r+0x86>
1a003152:	e7e7      	b.n	1a003124 <__sflush_r+0x10c>
1a003154:	f8c8 6000 	str.w	r6, [r8]
1a003158:	e7c8      	b.n	1a0030ec <__sflush_r+0xd4>
1a00315a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00315e:	81a3      	strh	r3, [r4, #12]
1a003160:	e7c5      	b.n	1a0030ee <__sflush_r+0xd6>
1a003162:	bf00      	nop

1a003164 <_fflush_r>:
1a003164:	b538      	push	{r3, r4, r5, lr}
1a003166:	460d      	mov	r5, r1
1a003168:	4604      	mov	r4, r0
1a00316a:	b108      	cbz	r0, 1a003170 <_fflush_r+0xc>
1a00316c:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00316e:	b1a3      	cbz	r3, 1a00319a <_fflush_r+0x36>
1a003170:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a003174:	b1b8      	cbz	r0, 1a0031a6 <_fflush_r+0x42>
1a003176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003178:	07db      	lsls	r3, r3, #31
1a00317a:	d401      	bmi.n	1a003180 <_fflush_r+0x1c>
1a00317c:	0581      	lsls	r1, r0, #22
1a00317e:	d515      	bpl.n	1a0031ac <_fflush_r+0x48>
1a003180:	4620      	mov	r0, r4
1a003182:	4629      	mov	r1, r5
1a003184:	f7ff ff48 	bl	1a003018 <__sflush_r>
1a003188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a00318a:	07da      	lsls	r2, r3, #31
1a00318c:	4604      	mov	r4, r0
1a00318e:	d402      	bmi.n	1a003196 <_fflush_r+0x32>
1a003190:	89ab      	ldrh	r3, [r5, #12]
1a003192:	059b      	lsls	r3, r3, #22
1a003194:	d50e      	bpl.n	1a0031b4 <_fflush_r+0x50>
1a003196:	4620      	mov	r0, r4
1a003198:	bd38      	pop	{r3, r4, r5, pc}
1a00319a:	f000 f83f 	bl	1a00321c <__sinit>
1a00319e:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a0031a2:	2800      	cmp	r0, #0
1a0031a4:	d1e7      	bne.n	1a003176 <_fflush_r+0x12>
1a0031a6:	4604      	mov	r4, r0
1a0031a8:	4620      	mov	r0, r4
1a0031aa:	bd38      	pop	{r3, r4, r5, pc}
1a0031ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0031ae:	f000 fa03 	bl	1a0035b8 <__retarget_lock_acquire_recursive>
1a0031b2:	e7e5      	b.n	1a003180 <_fflush_r+0x1c>
1a0031b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0031b6:	f000 fa01 	bl	1a0035bc <__retarget_lock_release_recursive>
1a0031ba:	4620      	mov	r0, r4
1a0031bc:	bd38      	pop	{r3, r4, r5, pc}
1a0031be:	bf00      	nop

1a0031c0 <std>:
1a0031c0:	b510      	push	{r4, lr}
1a0031c2:	2300      	movs	r3, #0
1a0031c4:	4604      	mov	r4, r0
1a0031c6:	8181      	strh	r1, [r0, #12]
1a0031c8:	81c2      	strh	r2, [r0, #14]
1a0031ca:	e9c0 3300 	strd	r3, r3, [r0]
1a0031ce:	6083      	str	r3, [r0, #8]
1a0031d0:	6643      	str	r3, [r0, #100]	; 0x64
1a0031d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0031d6:	6183      	str	r3, [r0, #24]
1a0031d8:	4619      	mov	r1, r3
1a0031da:	2208      	movs	r2, #8
1a0031dc:	305c      	adds	r0, #92	; 0x5c
1a0031de:	f000 fd41 	bl	1a003c64 <memset>
1a0031e2:	4807      	ldr	r0, [pc, #28]	; (1a003200 <std+0x40>)
1a0031e4:	4907      	ldr	r1, [pc, #28]	; (1a003204 <std+0x44>)
1a0031e6:	4a08      	ldr	r2, [pc, #32]	; (1a003208 <std+0x48>)
1a0031e8:	4b08      	ldr	r3, [pc, #32]	; (1a00320c <std+0x4c>)
1a0031ea:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0031ec:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a0031f0:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a0031f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0031f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0031fc:	f000 b9d8 	b.w	1a0035b0 <__retarget_lock_init_recursive>
1a003200:	1a003df1 	.word	0x1a003df1
1a003204:	1a003e15 	.word	0x1a003e15
1a003208:	1a003e55 	.word	0x1a003e55
1a00320c:	1a003e75 	.word	0x1a003e75

1a003210 <_cleanup_r>:
1a003210:	4901      	ldr	r1, [pc, #4]	; (1a003218 <_cleanup_r+0x8>)
1a003212:	f000 b97f 	b.w	1a003514 <_fwalk_reent>
1a003216:	bf00      	nop
1a003218:	1a002f49 	.word	0x1a002f49

1a00321c <__sinit>:
1a00321c:	b510      	push	{r4, lr}
1a00321e:	4604      	mov	r4, r0
1a003220:	4811      	ldr	r0, [pc, #68]	; (1a003268 <__sinit+0x4c>)
1a003222:	f000 f9c9 	bl	1a0035b8 <__retarget_lock_acquire_recursive>
1a003226:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a003228:	b9c2      	cbnz	r2, 1a00325c <__sinit+0x40>
1a00322a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a00322e:	480f      	ldr	r0, [pc, #60]	; (1a00326c <__sinit+0x50>)
1a003230:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a003234:	2103      	movs	r1, #3
1a003236:	e9c4 13b9 	strd	r1, r3, [r4, #740]	; 0x2e4
1a00323a:	63e0      	str	r0, [r4, #60]	; 0x3c
1a00323c:	2104      	movs	r1, #4
1a00323e:	6860      	ldr	r0, [r4, #4]
1a003240:	f7ff ffbe 	bl	1a0031c0 <std>
1a003244:	2201      	movs	r2, #1
1a003246:	2109      	movs	r1, #9
1a003248:	68a0      	ldr	r0, [r4, #8]
1a00324a:	f7ff ffb9 	bl	1a0031c0 <std>
1a00324e:	2202      	movs	r2, #2
1a003250:	2112      	movs	r1, #18
1a003252:	68e0      	ldr	r0, [r4, #12]
1a003254:	f7ff ffb4 	bl	1a0031c0 <std>
1a003258:	2301      	movs	r3, #1
1a00325a:	63a3      	str	r3, [r4, #56]	; 0x38
1a00325c:	4802      	ldr	r0, [pc, #8]	; (1a003268 <__sinit+0x4c>)
1a00325e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003262:	f000 b9ab 	b.w	1a0035bc <__retarget_lock_release_recursive>
1a003266:	bf00      	nop
1a003268:	10002b90 	.word	0x10002b90
1a00326c:	1a003211 	.word	0x1a003211

1a003270 <__sfp_lock_acquire>:
1a003270:	4801      	ldr	r0, [pc, #4]	; (1a003278 <__sfp_lock_acquire+0x8>)
1a003272:	f000 b9a1 	b.w	1a0035b8 <__retarget_lock_acquire_recursive>
1a003276:	bf00      	nop
1a003278:	10002ba4 	.word	0x10002ba4

1a00327c <__sfp_lock_release>:
1a00327c:	4801      	ldr	r0, [pc, #4]	; (1a003284 <__sfp_lock_release+0x8>)
1a00327e:	f000 b99d 	b.w	1a0035bc <__retarget_lock_release_recursive>
1a003282:	bf00      	nop
1a003284:	10002ba4 	.word	0x10002ba4

1a003288 <_malloc_trim_r>:
1a003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00328a:	4f24      	ldr	r7, [pc, #144]	; (1a00331c <_malloc_trim_r+0x94>)
1a00328c:	460c      	mov	r4, r1
1a00328e:	4606      	mov	r6, r0
1a003290:	f000 fd38 	bl	1a003d04 <__malloc_lock>
1a003294:	68bb      	ldr	r3, [r7, #8]
1a003296:	685d      	ldr	r5, [r3, #4]
1a003298:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a00329c:	310f      	adds	r1, #15
1a00329e:	f025 0503 	bic.w	r5, r5, #3
1a0032a2:	4429      	add	r1, r5
1a0032a4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a0032a8:	f021 010f 	bic.w	r1, r1, #15
1a0032ac:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a0032b0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a0032b4:	db07      	blt.n	1a0032c6 <_malloc_trim_r+0x3e>
1a0032b6:	2100      	movs	r1, #0
1a0032b8:	4630      	mov	r0, r6
1a0032ba:	f7fd fa01 	bl	1a0006c0 <_sbrk_r>
1a0032be:	68bb      	ldr	r3, [r7, #8]
1a0032c0:	442b      	add	r3, r5
1a0032c2:	4298      	cmp	r0, r3
1a0032c4:	d004      	beq.n	1a0032d0 <_malloc_trim_r+0x48>
1a0032c6:	4630      	mov	r0, r6
1a0032c8:	f000 fd22 	bl	1a003d10 <__malloc_unlock>
1a0032cc:	2000      	movs	r0, #0
1a0032ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0032d0:	4261      	negs	r1, r4
1a0032d2:	4630      	mov	r0, r6
1a0032d4:	f7fd f9f4 	bl	1a0006c0 <_sbrk_r>
1a0032d8:	3001      	adds	r0, #1
1a0032da:	d00d      	beq.n	1a0032f8 <_malloc_trim_r+0x70>
1a0032dc:	4b10      	ldr	r3, [pc, #64]	; (1a003320 <_malloc_trim_r+0x98>)
1a0032de:	68ba      	ldr	r2, [r7, #8]
1a0032e0:	6819      	ldr	r1, [r3, #0]
1a0032e2:	1b2d      	subs	r5, r5, r4
1a0032e4:	f045 0501 	orr.w	r5, r5, #1
1a0032e8:	4630      	mov	r0, r6
1a0032ea:	1b09      	subs	r1, r1, r4
1a0032ec:	6055      	str	r5, [r2, #4]
1a0032ee:	6019      	str	r1, [r3, #0]
1a0032f0:	f000 fd0e 	bl	1a003d10 <__malloc_unlock>
1a0032f4:	2001      	movs	r0, #1
1a0032f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0032f8:	2100      	movs	r1, #0
1a0032fa:	4630      	mov	r0, r6
1a0032fc:	f7fd f9e0 	bl	1a0006c0 <_sbrk_r>
1a003300:	68ba      	ldr	r2, [r7, #8]
1a003302:	1a83      	subs	r3, r0, r2
1a003304:	2b0f      	cmp	r3, #15
1a003306:	ddde      	ble.n	1a0032c6 <_malloc_trim_r+0x3e>
1a003308:	4c06      	ldr	r4, [pc, #24]	; (1a003324 <_malloc_trim_r+0x9c>)
1a00330a:	4905      	ldr	r1, [pc, #20]	; (1a003320 <_malloc_trim_r+0x98>)
1a00330c:	6824      	ldr	r4, [r4, #0]
1a00330e:	f043 0301 	orr.w	r3, r3, #1
1a003312:	1b00      	subs	r0, r0, r4
1a003314:	6053      	str	r3, [r2, #4]
1a003316:	6008      	str	r0, [r1, #0]
1a003318:	e7d5      	b.n	1a0032c6 <_malloc_trim_r+0x3e>
1a00331a:	bf00      	nop
1a00331c:	10000470 	.word	0x10000470
1a003320:	10002b28 	.word	0x10002b28
1a003324:	10000878 	.word	0x10000878

1a003328 <_free_r>:
1a003328:	2900      	cmp	r1, #0
1a00332a:	d05d      	beq.n	1a0033e8 <_free_r+0xc0>
1a00332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00332e:	460f      	mov	r7, r1
1a003330:	4606      	mov	r6, r0
1a003332:	f000 fce7 	bl	1a003d04 <__malloc_lock>
1a003336:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a00333a:	4c73      	ldr	r4, [pc, #460]	; (1a003508 <_free_r+0x1e0>)
1a00333c:	f02c 0301 	bic.w	r3, ip, #1
1a003340:	f1a7 0008 	sub.w	r0, r7, #8
1a003344:	18c2      	adds	r2, r0, r3
1a003346:	68a1      	ldr	r1, [r4, #8]
1a003348:	6855      	ldr	r5, [r2, #4]
1a00334a:	4291      	cmp	r1, r2
1a00334c:	f025 0503 	bic.w	r5, r5, #3
1a003350:	d07f      	beq.n	1a003452 <_free_r+0x12a>
1a003352:	f01c 0f01 	tst.w	ip, #1
1a003356:	6055      	str	r5, [r2, #4]
1a003358:	eb02 0105 	add.w	r1, r2, r5
1a00335c:	d133      	bne.n	1a0033c6 <_free_r+0x9e>
1a00335e:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a003362:	6849      	ldr	r1, [r1, #4]
1a003364:	eba0 000e 	sub.w	r0, r0, lr
1a003368:	f104 0c08 	add.w	ip, r4, #8
1a00336c:	6887      	ldr	r7, [r0, #8]
1a00336e:	4567      	cmp	r7, ip
1a003370:	4473      	add	r3, lr
1a003372:	f001 0101 	and.w	r1, r1, #1
1a003376:	d060      	beq.n	1a00343a <_free_r+0x112>
1a003378:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a00337c:	f8c7 e00c 	str.w	lr, [r7, #12]
1a003380:	f8ce 7008 	str.w	r7, [lr, #8]
1a003384:	2900      	cmp	r1, #0
1a003386:	f000 8089 	beq.w	1a00349c <_free_r+0x174>
1a00338a:	f043 0101 	orr.w	r1, r3, #1
1a00338e:	6041      	str	r1, [r0, #4]
1a003390:	6013      	str	r3, [r2, #0]
1a003392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003396:	d230      	bcs.n	1a0033fa <_free_r+0xd2>
1a003398:	08db      	lsrs	r3, r3, #3
1a00339a:	1c59      	adds	r1, r3, #1
1a00339c:	6865      	ldr	r5, [r4, #4]
1a00339e:	109a      	asrs	r2, r3, #2
1a0033a0:	2301      	movs	r3, #1
1a0033a2:	4093      	lsls	r3, r2
1a0033a4:	432b      	orrs	r3, r5
1a0033a6:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a0033aa:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a0033ae:	6063      	str	r3, [r4, #4]
1a0033b0:	3a08      	subs	r2, #8
1a0033b2:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a0033b6:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a0033ba:	60e8      	str	r0, [r5, #12]
1a0033bc:	4630      	mov	r0, r6
1a0033be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0033c2:	f000 bca5 	b.w	1a003d10 <__malloc_unlock>
1a0033c6:	6849      	ldr	r1, [r1, #4]
1a0033c8:	07c9      	lsls	r1, r1, #31
1a0033ca:	d40e      	bmi.n	1a0033ea <_free_r+0xc2>
1a0033cc:	442b      	add	r3, r5
1a0033ce:	f104 0c08 	add.w	ip, r4, #8
1a0033d2:	6891      	ldr	r1, [r2, #8]
1a0033d4:	4561      	cmp	r1, ip
1a0033d6:	f043 0501 	orr.w	r5, r3, #1
1a0033da:	d067      	beq.n	1a0034ac <_free_r+0x184>
1a0033dc:	68d2      	ldr	r2, [r2, #12]
1a0033de:	60ca      	str	r2, [r1, #12]
1a0033e0:	6091      	str	r1, [r2, #8]
1a0033e2:	6045      	str	r5, [r0, #4]
1a0033e4:	50c3      	str	r3, [r0, r3]
1a0033e6:	e7d4      	b.n	1a003392 <_free_r+0x6a>
1a0033e8:	4770      	bx	lr
1a0033ea:	f043 0101 	orr.w	r1, r3, #1
1a0033ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0033f2:	f847 1c04 	str.w	r1, [r7, #-4]
1a0033f6:	6013      	str	r3, [r2, #0]
1a0033f8:	d3ce      	bcc.n	1a003398 <_free_r+0x70>
1a0033fa:	0a5a      	lsrs	r2, r3, #9
1a0033fc:	2a04      	cmp	r2, #4
1a0033fe:	d842      	bhi.n	1a003486 <_free_r+0x15e>
1a003400:	099a      	lsrs	r2, r3, #6
1a003402:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a003406:	00ff      	lsls	r7, r7, #3
1a003408:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a00340c:	19e5      	adds	r5, r4, r7
1a00340e:	59e2      	ldr	r2, [r4, r7]
1a003410:	3d08      	subs	r5, #8
1a003412:	4295      	cmp	r5, r2
1a003414:	d051      	beq.n	1a0034ba <_free_r+0x192>
1a003416:	6851      	ldr	r1, [r2, #4]
1a003418:	f021 0103 	bic.w	r1, r1, #3
1a00341c:	4299      	cmp	r1, r3
1a00341e:	d902      	bls.n	1a003426 <_free_r+0xfe>
1a003420:	6892      	ldr	r2, [r2, #8]
1a003422:	4295      	cmp	r5, r2
1a003424:	d1f7      	bne.n	1a003416 <_free_r+0xee>
1a003426:	68d5      	ldr	r5, [r2, #12]
1a003428:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a00342c:	60a8      	str	r0, [r5, #8]
1a00342e:	60d0      	str	r0, [r2, #12]
1a003430:	4630      	mov	r0, r6
1a003432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a003436:	f000 bc6b 	b.w	1a003d10 <__malloc_unlock>
1a00343a:	2900      	cmp	r1, #0
1a00343c:	d15e      	bne.n	1a0034fc <_free_r+0x1d4>
1a00343e:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a003442:	442b      	add	r3, r5
1a003444:	f043 0401 	orr.w	r4, r3, #1
1a003448:	60ca      	str	r2, [r1, #12]
1a00344a:	6091      	str	r1, [r2, #8]
1a00344c:	6044      	str	r4, [r0, #4]
1a00344e:	50c3      	str	r3, [r0, r3]
1a003450:	e7b4      	b.n	1a0033bc <_free_r+0x94>
1a003452:	f01c 0f01 	tst.w	ip, #1
1a003456:	442b      	add	r3, r5
1a003458:	d107      	bne.n	1a00346a <_free_r+0x142>
1a00345a:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a00345e:	1a80      	subs	r0, r0, r2
1a003460:	4413      	add	r3, r2
1a003462:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a003466:	60ca      	str	r2, [r1, #12]
1a003468:	6091      	str	r1, [r2, #8]
1a00346a:	4a28      	ldr	r2, [pc, #160]	; (1a00350c <_free_r+0x1e4>)
1a00346c:	6812      	ldr	r2, [r2, #0]
1a00346e:	f043 0101 	orr.w	r1, r3, #1
1a003472:	429a      	cmp	r2, r3
1a003474:	6041      	str	r1, [r0, #4]
1a003476:	60a0      	str	r0, [r4, #8]
1a003478:	d8a0      	bhi.n	1a0033bc <_free_r+0x94>
1a00347a:	4b25      	ldr	r3, [pc, #148]	; (1a003510 <_free_r+0x1e8>)
1a00347c:	4630      	mov	r0, r6
1a00347e:	6819      	ldr	r1, [r3, #0]
1a003480:	f7ff ff02 	bl	1a003288 <_malloc_trim_r>
1a003484:	e79a      	b.n	1a0033bc <_free_r+0x94>
1a003486:	2a14      	cmp	r2, #20
1a003488:	d90a      	bls.n	1a0034a0 <_free_r+0x178>
1a00348a:	2a54      	cmp	r2, #84	; 0x54
1a00348c:	d81d      	bhi.n	1a0034ca <_free_r+0x1a2>
1a00348e:	0b1a      	lsrs	r2, r3, #12
1a003490:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a003494:	00ff      	lsls	r7, r7, #3
1a003496:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a00349a:	e7b7      	b.n	1a00340c <_free_r+0xe4>
1a00349c:	442b      	add	r3, r5
1a00349e:	e798      	b.n	1a0033d2 <_free_r+0xaa>
1a0034a0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a0034a4:	00ff      	lsls	r7, r7, #3
1a0034a6:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a0034aa:	e7af      	b.n	1a00340c <_free_r+0xe4>
1a0034ac:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a0034b0:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a0034b4:	6045      	str	r5, [r0, #4]
1a0034b6:	50c3      	str	r3, [r0, r3]
1a0034b8:	e780      	b.n	1a0033bc <_free_r+0x94>
1a0034ba:	6863      	ldr	r3, [r4, #4]
1a0034bc:	1089      	asrs	r1, r1, #2
1a0034be:	2701      	movs	r7, #1
1a0034c0:	fa07 f101 	lsl.w	r1, r7, r1
1a0034c4:	4319      	orrs	r1, r3
1a0034c6:	6061      	str	r1, [r4, #4]
1a0034c8:	e7ae      	b.n	1a003428 <_free_r+0x100>
1a0034ca:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a0034ce:	d806      	bhi.n	1a0034de <_free_r+0x1b6>
1a0034d0:	0bda      	lsrs	r2, r3, #15
1a0034d2:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a0034d6:	00ff      	lsls	r7, r7, #3
1a0034d8:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a0034dc:	e796      	b.n	1a00340c <_free_r+0xe4>
1a0034de:	f240 5154 	movw	r1, #1364	; 0x554
1a0034e2:	428a      	cmp	r2, r1
1a0034e4:	d806      	bhi.n	1a0034f4 <_free_r+0x1cc>
1a0034e6:	0c9a      	lsrs	r2, r3, #18
1a0034e8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a0034ec:	00ff      	lsls	r7, r7, #3
1a0034ee:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a0034f2:	e78b      	b.n	1a00340c <_free_r+0xe4>
1a0034f4:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a0034f8:	217e      	movs	r1, #126	; 0x7e
1a0034fa:	e787      	b.n	1a00340c <_free_r+0xe4>
1a0034fc:	f043 0101 	orr.w	r1, r3, #1
1a003500:	6041      	str	r1, [r0, #4]
1a003502:	6013      	str	r3, [r2, #0]
1a003504:	e75a      	b.n	1a0033bc <_free_r+0x94>
1a003506:	bf00      	nop
1a003508:	10000470 	.word	0x10000470
1a00350c:	1000087c 	.word	0x1000087c
1a003510:	10002b58 	.word	0x10002b58

1a003514 <_fwalk_reent>:
1a003514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003518:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a00351c:	d01f      	beq.n	1a00355e <_fwalk_reent+0x4a>
1a00351e:	4688      	mov	r8, r1
1a003520:	4606      	mov	r6, r0
1a003522:	f04f 0900 	mov.w	r9, #0
1a003526:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a00352a:	3d01      	subs	r5, #1
1a00352c:	d411      	bmi.n	1a003552 <_fwalk_reent+0x3e>
1a00352e:	89a3      	ldrh	r3, [r4, #12]
1a003530:	2b01      	cmp	r3, #1
1a003532:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a003536:	d908      	bls.n	1a00354a <_fwalk_reent+0x36>
1a003538:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a00353c:	3301      	adds	r3, #1
1a00353e:	4621      	mov	r1, r4
1a003540:	4630      	mov	r0, r6
1a003542:	d002      	beq.n	1a00354a <_fwalk_reent+0x36>
1a003544:	47c0      	blx	r8
1a003546:	ea49 0900 	orr.w	r9, r9, r0
1a00354a:	1c6b      	adds	r3, r5, #1
1a00354c:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a003550:	d1ed      	bne.n	1a00352e <_fwalk_reent+0x1a>
1a003552:	683f      	ldr	r7, [r7, #0]
1a003554:	2f00      	cmp	r7, #0
1a003556:	d1e6      	bne.n	1a003526 <_fwalk_reent+0x12>
1a003558:	4648      	mov	r0, r9
1a00355a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00355e:	46b9      	mov	r9, r7
1a003560:	4648      	mov	r0, r9
1a003562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003566:	bf00      	nop

1a003568 <__libc_init_array>:
1a003568:	b570      	push	{r4, r5, r6, lr}
1a00356a:	4e0d      	ldr	r6, [pc, #52]	; (1a0035a0 <__libc_init_array+0x38>)
1a00356c:	4d0d      	ldr	r5, [pc, #52]	; (1a0035a4 <__libc_init_array+0x3c>)
1a00356e:	1b76      	subs	r6, r6, r5
1a003570:	10b6      	asrs	r6, r6, #2
1a003572:	d006      	beq.n	1a003582 <__libc_init_array+0x1a>
1a003574:	2400      	movs	r4, #0
1a003576:	3401      	adds	r4, #1
1a003578:	f855 3b04 	ldr.w	r3, [r5], #4
1a00357c:	4798      	blx	r3
1a00357e:	42a6      	cmp	r6, r4
1a003580:	d1f9      	bne.n	1a003576 <__libc_init_array+0xe>
1a003582:	4e09      	ldr	r6, [pc, #36]	; (1a0035a8 <__libc_init_array+0x40>)
1a003584:	4d09      	ldr	r5, [pc, #36]	; (1a0035ac <__libc_init_array+0x44>)
1a003586:	1b76      	subs	r6, r6, r5
1a003588:	f7fd f845 	bl	1a000616 <_init>
1a00358c:	10b6      	asrs	r6, r6, #2
1a00358e:	d006      	beq.n	1a00359e <__libc_init_array+0x36>
1a003590:	2400      	movs	r4, #0
1a003592:	3401      	adds	r4, #1
1a003594:	f855 3b04 	ldr.w	r3, [r5], #4
1a003598:	4798      	blx	r3
1a00359a:	42a6      	cmp	r6, r4
1a00359c:	d1f9      	bne.n	1a003592 <__libc_init_array+0x2a>
1a00359e:	bd70      	pop	{r4, r5, r6, pc}
1a0035a0:	1a0084ec 	.word	0x1a0084ec
1a0035a4:	1a0084ec 	.word	0x1a0084ec
1a0035a8:	1a0084f0 	.word	0x1a0084f0
1a0035ac:	1a0084ec 	.word	0x1a0084ec

1a0035b0 <__retarget_lock_init_recursive>:
1a0035b0:	4770      	bx	lr
1a0035b2:	bf00      	nop

1a0035b4 <__retarget_lock_close_recursive>:
1a0035b4:	4770      	bx	lr
1a0035b6:	bf00      	nop

1a0035b8 <__retarget_lock_acquire_recursive>:
1a0035b8:	4770      	bx	lr
1a0035ba:	bf00      	nop

1a0035bc <__retarget_lock_release_recursive>:
1a0035bc:	4770      	bx	lr
1a0035be:	bf00      	nop

1a0035c0 <_malloc_r>:
1a0035c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0035c4:	f101 050b 	add.w	r5, r1, #11
1a0035c8:	2d16      	cmp	r5, #22
1a0035ca:	b083      	sub	sp, #12
1a0035cc:	4606      	mov	r6, r0
1a0035ce:	d823      	bhi.n	1a003618 <_malloc_r+0x58>
1a0035d0:	2910      	cmp	r1, #16
1a0035d2:	f200 80b9 	bhi.w	1a003748 <_malloc_r+0x188>
1a0035d6:	f000 fb95 	bl	1a003d04 <__malloc_lock>
1a0035da:	2510      	movs	r5, #16
1a0035dc:	2318      	movs	r3, #24
1a0035de:	2002      	movs	r0, #2
1a0035e0:	4fba      	ldr	r7, [pc, #744]	; (1a0038cc <_malloc_r+0x30c>)
1a0035e2:	443b      	add	r3, r7
1a0035e4:	f1a3 0208 	sub.w	r2, r3, #8
1a0035e8:	685c      	ldr	r4, [r3, #4]
1a0035ea:	4294      	cmp	r4, r2
1a0035ec:	f000 80b9 	beq.w	1a003762 <_malloc_r+0x1a2>
1a0035f0:	6863      	ldr	r3, [r4, #4]
1a0035f2:	f023 0303 	bic.w	r3, r3, #3
1a0035f6:	4423      	add	r3, r4
1a0035f8:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a0035fc:	685a      	ldr	r2, [r3, #4]
1a0035fe:	60e9      	str	r1, [r5, #12]
1a003600:	f042 0201 	orr.w	r2, r2, #1
1a003604:	4630      	mov	r0, r6
1a003606:	608d      	str	r5, [r1, #8]
1a003608:	605a      	str	r2, [r3, #4]
1a00360a:	f000 fb81 	bl	1a003d10 <__malloc_unlock>
1a00360e:	3408      	adds	r4, #8
1a003610:	4620      	mov	r0, r4
1a003612:	b003      	add	sp, #12
1a003614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003618:	f035 0507 	bics.w	r5, r5, #7
1a00361c:	f100 8094 	bmi.w	1a003748 <_malloc_r+0x188>
1a003620:	42a9      	cmp	r1, r5
1a003622:	f200 8091 	bhi.w	1a003748 <_malloc_r+0x188>
1a003626:	f000 fb6d 	bl	1a003d04 <__malloc_lock>
1a00362a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a00362e:	f0c0 81a2 	bcc.w	1a003976 <_malloc_r+0x3b6>
1a003632:	0a6b      	lsrs	r3, r5, #9
1a003634:	f000 808f 	beq.w	1a003756 <_malloc_r+0x196>
1a003638:	2b04      	cmp	r3, #4
1a00363a:	f200 8178 	bhi.w	1a00392e <_malloc_r+0x36e>
1a00363e:	09ab      	lsrs	r3, r5, #6
1a003640:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a003644:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a003648:	00c3      	lsls	r3, r0, #3
1a00364a:	4fa0      	ldr	r7, [pc, #640]	; (1a0038cc <_malloc_r+0x30c>)
1a00364c:	443b      	add	r3, r7
1a00364e:	f1a3 0108 	sub.w	r1, r3, #8
1a003652:	685c      	ldr	r4, [r3, #4]
1a003654:	42a1      	cmp	r1, r4
1a003656:	d106      	bne.n	1a003666 <_malloc_r+0xa6>
1a003658:	e00c      	b.n	1a003674 <_malloc_r+0xb4>
1a00365a:	2a00      	cmp	r2, #0
1a00365c:	f280 8127 	bge.w	1a0038ae <_malloc_r+0x2ee>
1a003660:	68e4      	ldr	r4, [r4, #12]
1a003662:	42a1      	cmp	r1, r4
1a003664:	d006      	beq.n	1a003674 <_malloc_r+0xb4>
1a003666:	6863      	ldr	r3, [r4, #4]
1a003668:	f023 0303 	bic.w	r3, r3, #3
1a00366c:	1b5a      	subs	r2, r3, r5
1a00366e:	2a0f      	cmp	r2, #15
1a003670:	ddf3      	ble.n	1a00365a <_malloc_r+0x9a>
1a003672:	4660      	mov	r0, ip
1a003674:	693c      	ldr	r4, [r7, #16]
1a003676:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a0038e0 <_malloc_r+0x320>
1a00367a:	4564      	cmp	r4, ip
1a00367c:	d07c      	beq.n	1a003778 <_malloc_r+0x1b8>
1a00367e:	6863      	ldr	r3, [r4, #4]
1a003680:	f023 0303 	bic.w	r3, r3, #3
1a003684:	1b5a      	subs	r2, r3, r5
1a003686:	2a0f      	cmp	r2, #15
1a003688:	f300 8183 	bgt.w	1a003992 <_malloc_r+0x3d2>
1a00368c:	2a00      	cmp	r2, #0
1a00368e:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a003692:	f280 8174 	bge.w	1a00397e <_malloc_r+0x3be>
1a003696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00369a:	f080 8125 	bcs.w	1a0038e8 <_malloc_r+0x328>
1a00369e:	08db      	lsrs	r3, r3, #3
1a0036a0:	1c59      	adds	r1, r3, #1
1a0036a2:	687a      	ldr	r2, [r7, #4]
1a0036a4:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a0036a8:	f8c4 8008 	str.w	r8, [r4, #8]
1a0036ac:	f04f 0e01 	mov.w	lr, #1
1a0036b0:	109b      	asrs	r3, r3, #2
1a0036b2:	fa0e f303 	lsl.w	r3, lr, r3
1a0036b6:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a0036ba:	4313      	orrs	r3, r2
1a0036bc:	f1ae 0208 	sub.w	r2, lr, #8
1a0036c0:	60e2      	str	r2, [r4, #12]
1a0036c2:	607b      	str	r3, [r7, #4]
1a0036c4:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a0036c8:	f8c8 400c 	str.w	r4, [r8, #12]
1a0036cc:	1082      	asrs	r2, r0, #2
1a0036ce:	2401      	movs	r4, #1
1a0036d0:	4094      	lsls	r4, r2
1a0036d2:	429c      	cmp	r4, r3
1a0036d4:	d856      	bhi.n	1a003784 <_malloc_r+0x1c4>
1a0036d6:	421c      	tst	r4, r3
1a0036d8:	d106      	bne.n	1a0036e8 <_malloc_r+0x128>
1a0036da:	f020 0003 	bic.w	r0, r0, #3
1a0036de:	0064      	lsls	r4, r4, #1
1a0036e0:	421c      	tst	r4, r3
1a0036e2:	f100 0004 	add.w	r0, r0, #4
1a0036e6:	d0fa      	beq.n	1a0036de <_malloc_r+0x11e>
1a0036e8:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a0036ec:	46ce      	mov	lr, r9
1a0036ee:	4680      	mov	r8, r0
1a0036f0:	f8de 300c 	ldr.w	r3, [lr, #12]
1a0036f4:	459e      	cmp	lr, r3
1a0036f6:	d107      	bne.n	1a003708 <_malloc_r+0x148>
1a0036f8:	e125      	b.n	1a003946 <_malloc_r+0x386>
1a0036fa:	2a00      	cmp	r2, #0
1a0036fc:	f280 812c 	bge.w	1a003958 <_malloc_r+0x398>
1a003700:	68db      	ldr	r3, [r3, #12]
1a003702:	459e      	cmp	lr, r3
1a003704:	f000 811f 	beq.w	1a003946 <_malloc_r+0x386>
1a003708:	6859      	ldr	r1, [r3, #4]
1a00370a:	f021 0103 	bic.w	r1, r1, #3
1a00370e:	1b4a      	subs	r2, r1, r5
1a003710:	2a0f      	cmp	r2, #15
1a003712:	ddf2      	ble.n	1a0036fa <_malloc_r+0x13a>
1a003714:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a003718:	195c      	adds	r4, r3, r5
1a00371a:	f045 0501 	orr.w	r5, r5, #1
1a00371e:	605d      	str	r5, [r3, #4]
1a003720:	f042 0501 	orr.w	r5, r2, #1
1a003724:	f8c8 e00c 	str.w	lr, [r8, #12]
1a003728:	4630      	mov	r0, r6
1a00372a:	f8ce 8008 	str.w	r8, [lr, #8]
1a00372e:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a003732:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a003736:	6065      	str	r5, [r4, #4]
1a003738:	505a      	str	r2, [r3, r1]
1a00373a:	9300      	str	r3, [sp, #0]
1a00373c:	f000 fae8 	bl	1a003d10 <__malloc_unlock>
1a003740:	9b00      	ldr	r3, [sp, #0]
1a003742:	f103 0408 	add.w	r4, r3, #8
1a003746:	e002      	b.n	1a00374e <_malloc_r+0x18e>
1a003748:	230c      	movs	r3, #12
1a00374a:	6033      	str	r3, [r6, #0]
1a00374c:	2400      	movs	r4, #0
1a00374e:	4620      	mov	r0, r4
1a003750:	b003      	add	sp, #12
1a003752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003756:	f44f 7300 	mov.w	r3, #512	; 0x200
1a00375a:	2040      	movs	r0, #64	; 0x40
1a00375c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a003760:	e773      	b.n	1a00364a <_malloc_r+0x8a>
1a003762:	68dc      	ldr	r4, [r3, #12]
1a003764:	42a3      	cmp	r3, r4
1a003766:	bf08      	it	eq
1a003768:	3002      	addeq	r0, #2
1a00376a:	f47f af41 	bne.w	1a0035f0 <_malloc_r+0x30>
1a00376e:	693c      	ldr	r4, [r7, #16]
1a003770:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a0038e0 <_malloc_r+0x320>
1a003774:	4564      	cmp	r4, ip
1a003776:	d182      	bne.n	1a00367e <_malloc_r+0xbe>
1a003778:	687b      	ldr	r3, [r7, #4]
1a00377a:	1082      	asrs	r2, r0, #2
1a00377c:	2401      	movs	r4, #1
1a00377e:	4094      	lsls	r4, r2
1a003780:	429c      	cmp	r4, r3
1a003782:	d9a8      	bls.n	1a0036d6 <_malloc_r+0x116>
1a003784:	68bc      	ldr	r4, [r7, #8]
1a003786:	6863      	ldr	r3, [r4, #4]
1a003788:	f023 0803 	bic.w	r8, r3, #3
1a00378c:	45a8      	cmp	r8, r5
1a00378e:	d303      	bcc.n	1a003798 <_malloc_r+0x1d8>
1a003790:	eba8 0305 	sub.w	r3, r8, r5
1a003794:	2b0f      	cmp	r3, #15
1a003796:	dc7a      	bgt.n	1a00388e <_malloc_r+0x2ce>
1a003798:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a0038e4 <_malloc_r+0x324>
1a00379c:	4b4c      	ldr	r3, [pc, #304]	; (1a0038d0 <_malloc_r+0x310>)
1a00379e:	f8d9 2000 	ldr.w	r2, [r9]
1a0037a2:	681b      	ldr	r3, [r3, #0]
1a0037a4:	3201      	adds	r2, #1
1a0037a6:	442b      	add	r3, r5
1a0037a8:	eb04 0a08 	add.w	sl, r4, r8
1a0037ac:	f000 813c 	beq.w	1a003a28 <_malloc_r+0x468>
1a0037b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0037b4:	330f      	adds	r3, #15
1a0037b6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a0037ba:	f02b 0b0f 	bic.w	fp, fp, #15
1a0037be:	4659      	mov	r1, fp
1a0037c0:	4630      	mov	r0, r6
1a0037c2:	f7fc ff7d 	bl	1a0006c0 <_sbrk_r>
1a0037c6:	1c41      	adds	r1, r0, #1
1a0037c8:	4602      	mov	r2, r0
1a0037ca:	f000 80fc 	beq.w	1a0039c6 <_malloc_r+0x406>
1a0037ce:	4582      	cmp	sl, r0
1a0037d0:	f200 80f7 	bhi.w	1a0039c2 <_malloc_r+0x402>
1a0037d4:	4b3f      	ldr	r3, [pc, #252]	; (1a0038d4 <_malloc_r+0x314>)
1a0037d6:	6818      	ldr	r0, [r3, #0]
1a0037d8:	4458      	add	r0, fp
1a0037da:	6018      	str	r0, [r3, #0]
1a0037dc:	4601      	mov	r1, r0
1a0037de:	f000 8157 	beq.w	1a003a90 <_malloc_r+0x4d0>
1a0037e2:	f8d9 0000 	ldr.w	r0, [r9]
1a0037e6:	9301      	str	r3, [sp, #4]
1a0037e8:	3001      	adds	r0, #1
1a0037ea:	bf1b      	ittet	ne
1a0037ec:	eba2 0a0a 	subne.w	sl, r2, sl
1a0037f0:	4451      	addne	r1, sl
1a0037f2:	f8c9 2000 	streq.w	r2, [r9]
1a0037f6:	6019      	strne	r1, [r3, #0]
1a0037f8:	f012 0a07 	ands.w	sl, r2, #7
1a0037fc:	f000 8120 	beq.w	1a003a40 <_malloc_r+0x480>
1a003800:	f1ca 0108 	rsb	r1, sl, #8
1a003804:	440a      	add	r2, r1
1a003806:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a00380a:	4493      	add	fp, r2
1a00380c:	3108      	adds	r1, #8
1a00380e:	eba1 010b 	sub.w	r1, r1, fp
1a003812:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a003816:	4649      	mov	r1, r9
1a003818:	4630      	mov	r0, r6
1a00381a:	9200      	str	r2, [sp, #0]
1a00381c:	f7fc ff50 	bl	1a0006c0 <_sbrk_r>
1a003820:	1c42      	adds	r2, r0, #1
1a003822:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003826:	f000 8158 	beq.w	1a003ada <_malloc_r+0x51a>
1a00382a:	1a80      	subs	r0, r0, r2
1a00382c:	eb00 0b09 	add.w	fp, r0, r9
1a003830:	6818      	ldr	r0, [r3, #0]
1a003832:	60ba      	str	r2, [r7, #8]
1a003834:	f04b 0101 	orr.w	r1, fp, #1
1a003838:	4448      	add	r0, r9
1a00383a:	42bc      	cmp	r4, r7
1a00383c:	6051      	str	r1, [r2, #4]
1a00383e:	6018      	str	r0, [r3, #0]
1a003840:	f000 8132 	beq.w	1a003aa8 <_malloc_r+0x4e8>
1a003844:	f1b8 0f0f 	cmp.w	r8, #15
1a003848:	f240 8130 	bls.w	1a003aac <_malloc_r+0x4ec>
1a00384c:	6861      	ldr	r1, [r4, #4]
1a00384e:	f1a8 0c0c 	sub.w	ip, r8, #12
1a003852:	f02c 0c07 	bic.w	ip, ip, #7
1a003856:	f001 0101 	and.w	r1, r1, #1
1a00385a:	eb04 0e0c 	add.w	lr, r4, ip
1a00385e:	ea41 010c 	orr.w	r1, r1, ip
1a003862:	f04f 0805 	mov.w	r8, #5
1a003866:	f1bc 0f0f 	cmp.w	ip, #15
1a00386a:	6061      	str	r1, [r4, #4]
1a00386c:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a003870:	f200 813b 	bhi.w	1a003aea <_malloc_r+0x52a>
1a003874:	6851      	ldr	r1, [r2, #4]
1a003876:	4614      	mov	r4, r2
1a003878:	4b17      	ldr	r3, [pc, #92]	; (1a0038d8 <_malloc_r+0x318>)
1a00387a:	681a      	ldr	r2, [r3, #0]
1a00387c:	4282      	cmp	r2, r0
1a00387e:	bf38      	it	cc
1a003880:	6018      	strcc	r0, [r3, #0]
1a003882:	4b16      	ldr	r3, [pc, #88]	; (1a0038dc <_malloc_r+0x31c>)
1a003884:	681a      	ldr	r2, [r3, #0]
1a003886:	4282      	cmp	r2, r0
1a003888:	bf38      	it	cc
1a00388a:	6018      	strcc	r0, [r3, #0]
1a00388c:	e09d      	b.n	1a0039ca <_malloc_r+0x40a>
1a00388e:	1962      	adds	r2, r4, r5
1a003890:	f043 0301 	orr.w	r3, r3, #1
1a003894:	f045 0501 	orr.w	r5, r5, #1
1a003898:	6065      	str	r5, [r4, #4]
1a00389a:	4630      	mov	r0, r6
1a00389c:	60ba      	str	r2, [r7, #8]
1a00389e:	6053      	str	r3, [r2, #4]
1a0038a0:	f000 fa36 	bl	1a003d10 <__malloc_unlock>
1a0038a4:	3408      	adds	r4, #8
1a0038a6:	4620      	mov	r0, r4
1a0038a8:	b003      	add	sp, #12
1a0038aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0038ae:	4423      	add	r3, r4
1a0038b0:	68e1      	ldr	r1, [r4, #12]
1a0038b2:	685a      	ldr	r2, [r3, #4]
1a0038b4:	68a5      	ldr	r5, [r4, #8]
1a0038b6:	f042 0201 	orr.w	r2, r2, #1
1a0038ba:	60e9      	str	r1, [r5, #12]
1a0038bc:	4630      	mov	r0, r6
1a0038be:	608d      	str	r5, [r1, #8]
1a0038c0:	605a      	str	r2, [r3, #4]
1a0038c2:	f000 fa25 	bl	1a003d10 <__malloc_unlock>
1a0038c6:	3408      	adds	r4, #8
1a0038c8:	e741      	b.n	1a00374e <_malloc_r+0x18e>
1a0038ca:	bf00      	nop
1a0038cc:	10000470 	.word	0x10000470
1a0038d0:	10002b58 	.word	0x10002b58
1a0038d4:	10002b28 	.word	0x10002b28
1a0038d8:	10002b50 	.word	0x10002b50
1a0038dc:	10002b54 	.word	0x10002b54
1a0038e0:	10000478 	.word	0x10000478
1a0038e4:	10000878 	.word	0x10000878
1a0038e8:	0a5a      	lsrs	r2, r3, #9
1a0038ea:	2a04      	cmp	r2, #4
1a0038ec:	d963      	bls.n	1a0039b6 <_malloc_r+0x3f6>
1a0038ee:	2a14      	cmp	r2, #20
1a0038f0:	f200 80b7 	bhi.w	1a003a62 <_malloc_r+0x4a2>
1a0038f4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a0038f8:	00c9      	lsls	r1, r1, #3
1a0038fa:	325b      	adds	r2, #91	; 0x5b
1a0038fc:	eb07 0e01 	add.w	lr, r7, r1
1a003900:	5879      	ldr	r1, [r7, r1]
1a003902:	f1ae 0e08 	sub.w	lr, lr, #8
1a003906:	458e      	cmp	lr, r1
1a003908:	f000 8091 	beq.w	1a003a2e <_malloc_r+0x46e>
1a00390c:	684a      	ldr	r2, [r1, #4]
1a00390e:	f022 0203 	bic.w	r2, r2, #3
1a003912:	429a      	cmp	r2, r3
1a003914:	d902      	bls.n	1a00391c <_malloc_r+0x35c>
1a003916:	6889      	ldr	r1, [r1, #8]
1a003918:	458e      	cmp	lr, r1
1a00391a:	d1f7      	bne.n	1a00390c <_malloc_r+0x34c>
1a00391c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a003920:	687b      	ldr	r3, [r7, #4]
1a003922:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a003926:	f8ce 4008 	str.w	r4, [lr, #8]
1a00392a:	60cc      	str	r4, [r1, #12]
1a00392c:	e6ce      	b.n	1a0036cc <_malloc_r+0x10c>
1a00392e:	2b14      	cmp	r3, #20
1a003930:	d959      	bls.n	1a0039e6 <_malloc_r+0x426>
1a003932:	2b54      	cmp	r3, #84	; 0x54
1a003934:	f200 809d 	bhi.w	1a003a72 <_malloc_r+0x4b2>
1a003938:	0b2b      	lsrs	r3, r5, #12
1a00393a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a00393e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a003942:	00c3      	lsls	r3, r0, #3
1a003944:	e681      	b.n	1a00364a <_malloc_r+0x8a>
1a003946:	f108 0801 	add.w	r8, r8, #1
1a00394a:	f018 0f03 	tst.w	r8, #3
1a00394e:	f10e 0e08 	add.w	lr, lr, #8
1a003952:	f47f aecd 	bne.w	1a0036f0 <_malloc_r+0x130>
1a003956:	e051      	b.n	1a0039fc <_malloc_r+0x43c>
1a003958:	4419      	add	r1, r3
1a00395a:	461c      	mov	r4, r3
1a00395c:	684a      	ldr	r2, [r1, #4]
1a00395e:	68db      	ldr	r3, [r3, #12]
1a003960:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a003964:	f042 0201 	orr.w	r2, r2, #1
1a003968:	604a      	str	r2, [r1, #4]
1a00396a:	4630      	mov	r0, r6
1a00396c:	60eb      	str	r3, [r5, #12]
1a00396e:	609d      	str	r5, [r3, #8]
1a003970:	f000 f9ce 	bl	1a003d10 <__malloc_unlock>
1a003974:	e6eb      	b.n	1a00374e <_malloc_r+0x18e>
1a003976:	08e8      	lsrs	r0, r5, #3
1a003978:	f105 0308 	add.w	r3, r5, #8
1a00397c:	e630      	b.n	1a0035e0 <_malloc_r+0x20>
1a00397e:	4423      	add	r3, r4
1a003980:	4630      	mov	r0, r6
1a003982:	685a      	ldr	r2, [r3, #4]
1a003984:	f042 0201 	orr.w	r2, r2, #1
1a003988:	605a      	str	r2, [r3, #4]
1a00398a:	3408      	adds	r4, #8
1a00398c:	f000 f9c0 	bl	1a003d10 <__malloc_unlock>
1a003990:	e6dd      	b.n	1a00374e <_malloc_r+0x18e>
1a003992:	1961      	adds	r1, r4, r5
1a003994:	f045 0e01 	orr.w	lr, r5, #1
1a003998:	f042 0501 	orr.w	r5, r2, #1
1a00399c:	f8c4 e004 	str.w	lr, [r4, #4]
1a0039a0:	4630      	mov	r0, r6
1a0039a2:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a0039a6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a0039aa:	604d      	str	r5, [r1, #4]
1a0039ac:	50e2      	str	r2, [r4, r3]
1a0039ae:	f000 f9af 	bl	1a003d10 <__malloc_unlock>
1a0039b2:	3408      	adds	r4, #8
1a0039b4:	e6cb      	b.n	1a00374e <_malloc_r+0x18e>
1a0039b6:	099a      	lsrs	r2, r3, #6
1a0039b8:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a0039bc:	00c9      	lsls	r1, r1, #3
1a0039be:	3238      	adds	r2, #56	; 0x38
1a0039c0:	e79c      	b.n	1a0038fc <_malloc_r+0x33c>
1a0039c2:	42bc      	cmp	r4, r7
1a0039c4:	d05f      	beq.n	1a003a86 <_malloc_r+0x4c6>
1a0039c6:	68bc      	ldr	r4, [r7, #8]
1a0039c8:	6861      	ldr	r1, [r4, #4]
1a0039ca:	f021 0b03 	bic.w	fp, r1, #3
1a0039ce:	45ab      	cmp	fp, r5
1a0039d0:	ebab 0305 	sub.w	r3, fp, r5
1a0039d4:	d302      	bcc.n	1a0039dc <_malloc_r+0x41c>
1a0039d6:	2b0f      	cmp	r3, #15
1a0039d8:	f73f af59 	bgt.w	1a00388e <_malloc_r+0x2ce>
1a0039dc:	4630      	mov	r0, r6
1a0039de:	f000 f997 	bl	1a003d10 <__malloc_unlock>
1a0039e2:	2400      	movs	r4, #0
1a0039e4:	e6b3      	b.n	1a00374e <_malloc_r+0x18e>
1a0039e6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a0039ea:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a0039ee:	00c3      	lsls	r3, r0, #3
1a0039f0:	e62b      	b.n	1a00364a <_malloc_r+0x8a>
1a0039f2:	f859 3908 	ldr.w	r3, [r9], #-8
1a0039f6:	454b      	cmp	r3, r9
1a0039f8:	f040 8096 	bne.w	1a003b28 <_malloc_r+0x568>
1a0039fc:	f010 0f03 	tst.w	r0, #3
1a003a00:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a003a04:	d1f5      	bne.n	1a0039f2 <_malloc_r+0x432>
1a003a06:	687b      	ldr	r3, [r7, #4]
1a003a08:	ea23 0304 	bic.w	r3, r3, r4
1a003a0c:	607b      	str	r3, [r7, #4]
1a003a0e:	0064      	lsls	r4, r4, #1
1a003a10:	429c      	cmp	r4, r3
1a003a12:	f63f aeb7 	bhi.w	1a003784 <_malloc_r+0x1c4>
1a003a16:	b91c      	cbnz	r4, 1a003a20 <_malloc_r+0x460>
1a003a18:	e6b4      	b.n	1a003784 <_malloc_r+0x1c4>
1a003a1a:	0064      	lsls	r4, r4, #1
1a003a1c:	f108 0804 	add.w	r8, r8, #4
1a003a20:	421c      	tst	r4, r3
1a003a22:	d0fa      	beq.n	1a003a1a <_malloc_r+0x45a>
1a003a24:	4640      	mov	r0, r8
1a003a26:	e65f      	b.n	1a0036e8 <_malloc_r+0x128>
1a003a28:	f103 0b10 	add.w	fp, r3, #16
1a003a2c:	e6c7      	b.n	1a0037be <_malloc_r+0x1fe>
1a003a2e:	687b      	ldr	r3, [r7, #4]
1a003a30:	1092      	asrs	r2, r2, #2
1a003a32:	f04f 0801 	mov.w	r8, #1
1a003a36:	fa08 f202 	lsl.w	r2, r8, r2
1a003a3a:	4313      	orrs	r3, r2
1a003a3c:	607b      	str	r3, [r7, #4]
1a003a3e:	e770      	b.n	1a003922 <_malloc_r+0x362>
1a003a40:	eb02 000b 	add.w	r0, r2, fp
1a003a44:	4240      	negs	r0, r0
1a003a46:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a003a4a:	4649      	mov	r1, r9
1a003a4c:	4630      	mov	r0, r6
1a003a4e:	9200      	str	r2, [sp, #0]
1a003a50:	f7fc fe36 	bl	1a0006c0 <_sbrk_r>
1a003a54:	1c43      	adds	r3, r0, #1
1a003a56:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003a5a:	f47f aee6 	bne.w	1a00382a <_malloc_r+0x26a>
1a003a5e:	46d1      	mov	r9, sl
1a003a60:	e6e6      	b.n	1a003830 <_malloc_r+0x270>
1a003a62:	2a54      	cmp	r2, #84	; 0x54
1a003a64:	d825      	bhi.n	1a003ab2 <_malloc_r+0x4f2>
1a003a66:	0b1a      	lsrs	r2, r3, #12
1a003a68:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a003a6c:	00c9      	lsls	r1, r1, #3
1a003a6e:	326e      	adds	r2, #110	; 0x6e
1a003a70:	e744      	b.n	1a0038fc <_malloc_r+0x33c>
1a003a72:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a003a76:	d825      	bhi.n	1a003ac4 <_malloc_r+0x504>
1a003a78:	0beb      	lsrs	r3, r5, #15
1a003a7a:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a003a7e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a003a82:	00c3      	lsls	r3, r0, #3
1a003a84:	e5e1      	b.n	1a00364a <_malloc_r+0x8a>
1a003a86:	4b29      	ldr	r3, [pc, #164]	; (1a003b2c <_malloc_r+0x56c>)
1a003a88:	6819      	ldr	r1, [r3, #0]
1a003a8a:	4459      	add	r1, fp
1a003a8c:	6019      	str	r1, [r3, #0]
1a003a8e:	e6a8      	b.n	1a0037e2 <_malloc_r+0x222>
1a003a90:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a003a94:	f1bc 0f00 	cmp.w	ip, #0
1a003a98:	f47f aea3 	bne.w	1a0037e2 <_malloc_r+0x222>
1a003a9c:	44c3      	add	fp, r8
1a003a9e:	68bc      	ldr	r4, [r7, #8]
1a003aa0:	f04b 0101 	orr.w	r1, fp, #1
1a003aa4:	6061      	str	r1, [r4, #4]
1a003aa6:	e6e7      	b.n	1a003878 <_malloc_r+0x2b8>
1a003aa8:	4614      	mov	r4, r2
1a003aaa:	e6e5      	b.n	1a003878 <_malloc_r+0x2b8>
1a003aac:	2301      	movs	r3, #1
1a003aae:	6053      	str	r3, [r2, #4]
1a003ab0:	e794      	b.n	1a0039dc <_malloc_r+0x41c>
1a003ab2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a003ab6:	d823      	bhi.n	1a003b00 <_malloc_r+0x540>
1a003ab8:	0bda      	lsrs	r2, r3, #15
1a003aba:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a003abe:	00c9      	lsls	r1, r1, #3
1a003ac0:	3277      	adds	r2, #119	; 0x77
1a003ac2:	e71b      	b.n	1a0038fc <_malloc_r+0x33c>
1a003ac4:	f240 5254 	movw	r2, #1364	; 0x554
1a003ac8:	4293      	cmp	r3, r2
1a003aca:	d823      	bhi.n	1a003b14 <_malloc_r+0x554>
1a003acc:	0cab      	lsrs	r3, r5, #18
1a003ace:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a003ad2:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a003ad6:	00c3      	lsls	r3, r0, #3
1a003ad8:	e5b7      	b.n	1a00364a <_malloc_r+0x8a>
1a003ada:	f1aa 0a08 	sub.w	sl, sl, #8
1a003ade:	44d3      	add	fp, sl
1a003ae0:	ebab 0b02 	sub.w	fp, fp, r2
1a003ae4:	f04f 0900 	mov.w	r9, #0
1a003ae8:	e6a2      	b.n	1a003830 <_malloc_r+0x270>
1a003aea:	f104 0108 	add.w	r1, r4, #8
1a003aee:	4630      	mov	r0, r6
1a003af0:	9300      	str	r3, [sp, #0]
1a003af2:	f7ff fc19 	bl	1a003328 <_free_r>
1a003af6:	68bc      	ldr	r4, [r7, #8]
1a003af8:	9b00      	ldr	r3, [sp, #0]
1a003afa:	6861      	ldr	r1, [r4, #4]
1a003afc:	6818      	ldr	r0, [r3, #0]
1a003afe:	e6bb      	b.n	1a003878 <_malloc_r+0x2b8>
1a003b00:	f240 5154 	movw	r1, #1364	; 0x554
1a003b04:	428a      	cmp	r2, r1
1a003b06:	d80b      	bhi.n	1a003b20 <_malloc_r+0x560>
1a003b08:	0c9a      	lsrs	r2, r3, #18
1a003b0a:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a003b0e:	00c9      	lsls	r1, r1, #3
1a003b10:	327c      	adds	r2, #124	; 0x7c
1a003b12:	e6f3      	b.n	1a0038fc <_malloc_r+0x33c>
1a003b14:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a003b18:	207f      	movs	r0, #127	; 0x7f
1a003b1a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a003b1e:	e594      	b.n	1a00364a <_malloc_r+0x8a>
1a003b20:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a003b24:	227e      	movs	r2, #126	; 0x7e
1a003b26:	e6e9      	b.n	1a0038fc <_malloc_r+0x33c>
1a003b28:	687b      	ldr	r3, [r7, #4]
1a003b2a:	e770      	b.n	1a003a0e <_malloc_r+0x44e>
1a003b2c:	10002b28 	.word	0x10002b28

1a003b30 <memcpy>:
1a003b30:	4684      	mov	ip, r0
1a003b32:	ea41 0300 	orr.w	r3, r1, r0
1a003b36:	f013 0303 	ands.w	r3, r3, #3
1a003b3a:	d16d      	bne.n	1a003c18 <memcpy+0xe8>
1a003b3c:	3a40      	subs	r2, #64	; 0x40
1a003b3e:	d341      	bcc.n	1a003bc4 <memcpy+0x94>
1a003b40:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b44:	f840 3b04 	str.w	r3, [r0], #4
1a003b48:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b4c:	f840 3b04 	str.w	r3, [r0], #4
1a003b50:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b54:	f840 3b04 	str.w	r3, [r0], #4
1a003b58:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b5c:	f840 3b04 	str.w	r3, [r0], #4
1a003b60:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b64:	f840 3b04 	str.w	r3, [r0], #4
1a003b68:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b6c:	f840 3b04 	str.w	r3, [r0], #4
1a003b70:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b74:	f840 3b04 	str.w	r3, [r0], #4
1a003b78:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b7c:	f840 3b04 	str.w	r3, [r0], #4
1a003b80:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b84:	f840 3b04 	str.w	r3, [r0], #4
1a003b88:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b8c:	f840 3b04 	str.w	r3, [r0], #4
1a003b90:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b94:	f840 3b04 	str.w	r3, [r0], #4
1a003b98:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b9c:	f840 3b04 	str.w	r3, [r0], #4
1a003ba0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ba4:	f840 3b04 	str.w	r3, [r0], #4
1a003ba8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003bac:	f840 3b04 	str.w	r3, [r0], #4
1a003bb0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003bb4:	f840 3b04 	str.w	r3, [r0], #4
1a003bb8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003bbc:	f840 3b04 	str.w	r3, [r0], #4
1a003bc0:	3a40      	subs	r2, #64	; 0x40
1a003bc2:	d2bd      	bcs.n	1a003b40 <memcpy+0x10>
1a003bc4:	3230      	adds	r2, #48	; 0x30
1a003bc6:	d311      	bcc.n	1a003bec <memcpy+0xbc>
1a003bc8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003bcc:	f840 3b04 	str.w	r3, [r0], #4
1a003bd0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003bd4:	f840 3b04 	str.w	r3, [r0], #4
1a003bd8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003bdc:	f840 3b04 	str.w	r3, [r0], #4
1a003be0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003be4:	f840 3b04 	str.w	r3, [r0], #4
1a003be8:	3a10      	subs	r2, #16
1a003bea:	d2ed      	bcs.n	1a003bc8 <memcpy+0x98>
1a003bec:	320c      	adds	r2, #12
1a003bee:	d305      	bcc.n	1a003bfc <memcpy+0xcc>
1a003bf0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003bf4:	f840 3b04 	str.w	r3, [r0], #4
1a003bf8:	3a04      	subs	r2, #4
1a003bfa:	d2f9      	bcs.n	1a003bf0 <memcpy+0xc0>
1a003bfc:	3204      	adds	r2, #4
1a003bfe:	d008      	beq.n	1a003c12 <memcpy+0xe2>
1a003c00:	07d2      	lsls	r2, r2, #31
1a003c02:	bf1c      	itt	ne
1a003c04:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003c08:	f800 3b01 	strbne.w	r3, [r0], #1
1a003c0c:	d301      	bcc.n	1a003c12 <memcpy+0xe2>
1a003c0e:	880b      	ldrh	r3, [r1, #0]
1a003c10:	8003      	strh	r3, [r0, #0]
1a003c12:	4660      	mov	r0, ip
1a003c14:	4770      	bx	lr
1a003c16:	bf00      	nop
1a003c18:	2a08      	cmp	r2, #8
1a003c1a:	d313      	bcc.n	1a003c44 <memcpy+0x114>
1a003c1c:	078b      	lsls	r3, r1, #30
1a003c1e:	d08d      	beq.n	1a003b3c <memcpy+0xc>
1a003c20:	f010 0303 	ands.w	r3, r0, #3
1a003c24:	d08a      	beq.n	1a003b3c <memcpy+0xc>
1a003c26:	f1c3 0304 	rsb	r3, r3, #4
1a003c2a:	1ad2      	subs	r2, r2, r3
1a003c2c:	07db      	lsls	r3, r3, #31
1a003c2e:	bf1c      	itt	ne
1a003c30:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003c34:	f800 3b01 	strbne.w	r3, [r0], #1
1a003c38:	d380      	bcc.n	1a003b3c <memcpy+0xc>
1a003c3a:	f831 3b02 	ldrh.w	r3, [r1], #2
1a003c3e:	f820 3b02 	strh.w	r3, [r0], #2
1a003c42:	e77b      	b.n	1a003b3c <memcpy+0xc>
1a003c44:	3a04      	subs	r2, #4
1a003c46:	d3d9      	bcc.n	1a003bfc <memcpy+0xcc>
1a003c48:	3a01      	subs	r2, #1
1a003c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003c4e:	f800 3b01 	strb.w	r3, [r0], #1
1a003c52:	d2f9      	bcs.n	1a003c48 <memcpy+0x118>
1a003c54:	780b      	ldrb	r3, [r1, #0]
1a003c56:	7003      	strb	r3, [r0, #0]
1a003c58:	784b      	ldrb	r3, [r1, #1]
1a003c5a:	7043      	strb	r3, [r0, #1]
1a003c5c:	788b      	ldrb	r3, [r1, #2]
1a003c5e:	7083      	strb	r3, [r0, #2]
1a003c60:	4660      	mov	r0, ip
1a003c62:	4770      	bx	lr

1a003c64 <memset>:
1a003c64:	b4f0      	push	{r4, r5, r6, r7}
1a003c66:	0786      	lsls	r6, r0, #30
1a003c68:	d046      	beq.n	1a003cf8 <memset+0x94>
1a003c6a:	1e54      	subs	r4, r2, #1
1a003c6c:	2a00      	cmp	r2, #0
1a003c6e:	d03c      	beq.n	1a003cea <memset+0x86>
1a003c70:	b2ca      	uxtb	r2, r1
1a003c72:	4603      	mov	r3, r0
1a003c74:	e002      	b.n	1a003c7c <memset+0x18>
1a003c76:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a003c7a:	d336      	bcc.n	1a003cea <memset+0x86>
1a003c7c:	f803 2b01 	strb.w	r2, [r3], #1
1a003c80:	079d      	lsls	r5, r3, #30
1a003c82:	d1f8      	bne.n	1a003c76 <memset+0x12>
1a003c84:	2c03      	cmp	r4, #3
1a003c86:	d929      	bls.n	1a003cdc <memset+0x78>
1a003c88:	b2cd      	uxtb	r5, r1
1a003c8a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a003c8e:	2c0f      	cmp	r4, #15
1a003c90:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003c94:	d933      	bls.n	1a003cfe <memset+0x9a>
1a003c96:	f1a4 0610 	sub.w	r6, r4, #16
1a003c9a:	0936      	lsrs	r6, r6, #4
1a003c9c:	f103 0720 	add.w	r7, r3, #32
1a003ca0:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a003ca4:	f103 0210 	add.w	r2, r3, #16
1a003ca8:	e942 5504 	strd	r5, r5, [r2, #-16]
1a003cac:	e942 5502 	strd	r5, r5, [r2, #-8]
1a003cb0:	3210      	adds	r2, #16
1a003cb2:	42ba      	cmp	r2, r7
1a003cb4:	d1f8      	bne.n	1a003ca8 <memset+0x44>
1a003cb6:	1c72      	adds	r2, r6, #1
1a003cb8:	f014 0f0c 	tst.w	r4, #12
1a003cbc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a003cc0:	f004 060f 	and.w	r6, r4, #15
1a003cc4:	d013      	beq.n	1a003cee <memset+0x8a>
1a003cc6:	1f33      	subs	r3, r6, #4
1a003cc8:	f023 0303 	bic.w	r3, r3, #3
1a003ccc:	3304      	adds	r3, #4
1a003cce:	4413      	add	r3, r2
1a003cd0:	f842 5b04 	str.w	r5, [r2], #4
1a003cd4:	4293      	cmp	r3, r2
1a003cd6:	d1fb      	bne.n	1a003cd0 <memset+0x6c>
1a003cd8:	f006 0403 	and.w	r4, r6, #3
1a003cdc:	b12c      	cbz	r4, 1a003cea <memset+0x86>
1a003cde:	b2c9      	uxtb	r1, r1
1a003ce0:	441c      	add	r4, r3
1a003ce2:	f803 1b01 	strb.w	r1, [r3], #1
1a003ce6:	429c      	cmp	r4, r3
1a003ce8:	d1fb      	bne.n	1a003ce2 <memset+0x7e>
1a003cea:	bcf0      	pop	{r4, r5, r6, r7}
1a003cec:	4770      	bx	lr
1a003cee:	4634      	mov	r4, r6
1a003cf0:	4613      	mov	r3, r2
1a003cf2:	2c00      	cmp	r4, #0
1a003cf4:	d1f3      	bne.n	1a003cde <memset+0x7a>
1a003cf6:	e7f8      	b.n	1a003cea <memset+0x86>
1a003cf8:	4614      	mov	r4, r2
1a003cfa:	4603      	mov	r3, r0
1a003cfc:	e7c2      	b.n	1a003c84 <memset+0x20>
1a003cfe:	461a      	mov	r2, r3
1a003d00:	4626      	mov	r6, r4
1a003d02:	e7e0      	b.n	1a003cc6 <memset+0x62>

1a003d04 <__malloc_lock>:
1a003d04:	4801      	ldr	r0, [pc, #4]	; (1a003d0c <__malloc_lock+0x8>)
1a003d06:	f7ff bc57 	b.w	1a0035b8 <__retarget_lock_acquire_recursive>
1a003d0a:	bf00      	nop
1a003d0c:	10002b94 	.word	0x10002b94

1a003d10 <__malloc_unlock>:
1a003d10:	4801      	ldr	r0, [pc, #4]	; (1a003d18 <__malloc_unlock+0x8>)
1a003d12:	f7ff bc53 	b.w	1a0035bc <__retarget_lock_release_recursive>
1a003d16:	bf00      	nop
1a003d18:	10002b94 	.word	0x10002b94

1a003d1c <printf>:
1a003d1c:	b40f      	push	{r0, r1, r2, r3}
1a003d1e:	b500      	push	{lr}
1a003d20:	4907      	ldr	r1, [pc, #28]	; (1a003d40 <printf+0x24>)
1a003d22:	b083      	sub	sp, #12
1a003d24:	ab04      	add	r3, sp, #16
1a003d26:	6808      	ldr	r0, [r1, #0]
1a003d28:	f853 2b04 	ldr.w	r2, [r3], #4
1a003d2c:	6881      	ldr	r1, [r0, #8]
1a003d2e:	9301      	str	r3, [sp, #4]
1a003d30:	f000 f916 	bl	1a003f60 <_vfprintf_r>
1a003d34:	b003      	add	sp, #12
1a003d36:	f85d eb04 	ldr.w	lr, [sp], #4
1a003d3a:	b004      	add	sp, #16
1a003d3c:	4770      	bx	lr
1a003d3e:	bf00      	nop
1a003d40:	10000040 	.word	0x10000040

1a003d44 <_puts_r>:
1a003d44:	b570      	push	{r4, r5, r6, lr}
1a003d46:	4605      	mov	r5, r0
1a003d48:	b088      	sub	sp, #32
1a003d4a:	4608      	mov	r0, r1
1a003d4c:	460c      	mov	r4, r1
1a003d4e:	f000 f897 	bl	1a003e80 <strlen>
1a003d52:	4a22      	ldr	r2, [pc, #136]	; (1a003ddc <_puts_r+0x98>)
1a003d54:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a003d56:	9404      	str	r4, [sp, #16]
1a003d58:	2601      	movs	r6, #1
1a003d5a:	1c44      	adds	r4, r0, #1
1a003d5c:	a904      	add	r1, sp, #16
1a003d5e:	9206      	str	r2, [sp, #24]
1a003d60:	2202      	movs	r2, #2
1a003d62:	9403      	str	r4, [sp, #12]
1a003d64:	9005      	str	r0, [sp, #20]
1a003d66:	68ac      	ldr	r4, [r5, #8]
1a003d68:	9607      	str	r6, [sp, #28]
1a003d6a:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a003d6e:	b31b      	cbz	r3, 1a003db8 <_puts_r+0x74>
1a003d70:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a003d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003d76:	07ce      	lsls	r6, r1, #31
1a003d78:	b29a      	uxth	r2, r3
1a003d7a:	d401      	bmi.n	1a003d80 <_puts_r+0x3c>
1a003d7c:	0590      	lsls	r0, r2, #22
1a003d7e:	d525      	bpl.n	1a003dcc <_puts_r+0x88>
1a003d80:	0491      	lsls	r1, r2, #18
1a003d82:	d406      	bmi.n	1a003d92 <_puts_r+0x4e>
1a003d84:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a003d86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a003d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a003d8e:	81a3      	strh	r3, [r4, #12]
1a003d90:	6662      	str	r2, [r4, #100]	; 0x64
1a003d92:	4628      	mov	r0, r5
1a003d94:	aa01      	add	r2, sp, #4
1a003d96:	4621      	mov	r1, r4
1a003d98:	f002 fef4 	bl	1a006b84 <__sfvwrite_r>
1a003d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003d9e:	2800      	cmp	r0, #0
1a003da0:	bf14      	ite	ne
1a003da2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a003da6:	250a      	moveq	r5, #10
1a003da8:	07da      	lsls	r2, r3, #31
1a003daa:	d402      	bmi.n	1a003db2 <_puts_r+0x6e>
1a003dac:	89a3      	ldrh	r3, [r4, #12]
1a003dae:	059b      	lsls	r3, r3, #22
1a003db0:	d506      	bpl.n	1a003dc0 <_puts_r+0x7c>
1a003db2:	4628      	mov	r0, r5
1a003db4:	b008      	add	sp, #32
1a003db6:	bd70      	pop	{r4, r5, r6, pc}
1a003db8:	4628      	mov	r0, r5
1a003dba:	f7ff fa2f 	bl	1a00321c <__sinit>
1a003dbe:	e7d7      	b.n	1a003d70 <_puts_r+0x2c>
1a003dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003dc2:	f7ff fbfb 	bl	1a0035bc <__retarget_lock_release_recursive>
1a003dc6:	4628      	mov	r0, r5
1a003dc8:	b008      	add	sp, #32
1a003dca:	bd70      	pop	{r4, r5, r6, pc}
1a003dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003dce:	f7ff fbf3 	bl	1a0035b8 <__retarget_lock_acquire_recursive>
1a003dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003dd6:	b29a      	uxth	r2, r3
1a003dd8:	e7d2      	b.n	1a003d80 <_puts_r+0x3c>
1a003dda:	bf00      	nop
1a003ddc:	1a008368 	.word	0x1a008368

1a003de0 <puts>:
1a003de0:	4b02      	ldr	r3, [pc, #8]	; (1a003dec <puts+0xc>)
1a003de2:	4601      	mov	r1, r0
1a003de4:	6818      	ldr	r0, [r3, #0]
1a003de6:	f7ff bfad 	b.w	1a003d44 <_puts_r>
1a003dea:	bf00      	nop
1a003dec:	10000040 	.word	0x10000040

1a003df0 <__sread>:
1a003df0:	b510      	push	{r4, lr}
1a003df2:	460c      	mov	r4, r1
1a003df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003df8:	f7fc fc26 	bl	1a000648 <_read_r>
1a003dfc:	2800      	cmp	r0, #0
1a003dfe:	db03      	blt.n	1a003e08 <__sread+0x18>
1a003e00:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a003e02:	4403      	add	r3, r0
1a003e04:	6523      	str	r3, [r4, #80]	; 0x50
1a003e06:	bd10      	pop	{r4, pc}
1a003e08:	89a3      	ldrh	r3, [r4, #12]
1a003e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a003e0e:	81a3      	strh	r3, [r4, #12]
1a003e10:	bd10      	pop	{r4, pc}
1a003e12:	bf00      	nop

1a003e14 <__swrite>:
1a003e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003e18:	4616      	mov	r6, r2
1a003e1a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a003e1e:	461f      	mov	r7, r3
1a003e20:	05d3      	lsls	r3, r2, #23
1a003e22:	460c      	mov	r4, r1
1a003e24:	4605      	mov	r5, r0
1a003e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003e2a:	d409      	bmi.n	1a003e40 <__swrite+0x2c>
1a003e2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a003e30:	81a2      	strh	r2, [r4, #12]
1a003e32:	463b      	mov	r3, r7
1a003e34:	4632      	mov	r2, r6
1a003e36:	4628      	mov	r0, r5
1a003e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a003e3c:	f7fc bc2b 	b.w	1a000696 <_write_r>
1a003e40:	2200      	movs	r2, #0
1a003e42:	2302      	movs	r3, #2
1a003e44:	f7fc fbfb 	bl	1a00063e <_lseek_r>
1a003e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a003e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003e50:	e7ec      	b.n	1a003e2c <__swrite+0x18>
1a003e52:	bf00      	nop

1a003e54 <__sseek>:
1a003e54:	b510      	push	{r4, lr}
1a003e56:	460c      	mov	r4, r1
1a003e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003e5c:	f7fc fbef 	bl	1a00063e <_lseek_r>
1a003e60:	89a3      	ldrh	r3, [r4, #12]
1a003e62:	1c42      	adds	r2, r0, #1
1a003e64:	bf0e      	itee	eq
1a003e66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a003e6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a003e6e:	6520      	strne	r0, [r4, #80]	; 0x50
1a003e70:	81a3      	strh	r3, [r4, #12]
1a003e72:	bd10      	pop	{r4, pc}

1a003e74 <__sclose>:
1a003e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003e78:	f7fc bbce 	b.w	1a000618 <_close_r>
1a003e7c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a003e80 <strlen>:
1a003e80:	f890 f000 	pld	[r0]
1a003e84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a003e88:	f020 0107 	bic.w	r1, r0, #7
1a003e8c:	f06f 0c00 	mvn.w	ip, #0
1a003e90:	f010 0407 	ands.w	r4, r0, #7
1a003e94:	f891 f020 	pld	[r1, #32]
1a003e98:	f040 8049 	bne.w	1a003f2e <strlen+0xae>
1a003e9c:	f04f 0400 	mov.w	r4, #0
1a003ea0:	f06f 0007 	mvn.w	r0, #7
1a003ea4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003ea8:	f891 f040 	pld	[r1, #64]	; 0x40
1a003eac:	f100 0008 	add.w	r0, r0, #8
1a003eb0:	fa82 f24c 	uadd8	r2, r2, ip
1a003eb4:	faa4 f28c 	sel	r2, r4, ip
1a003eb8:	fa83 f34c 	uadd8	r3, r3, ip
1a003ebc:	faa2 f38c 	sel	r3, r2, ip
1a003ec0:	bb4b      	cbnz	r3, 1a003f16 <strlen+0x96>
1a003ec2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a003ec6:	fa82 f24c 	uadd8	r2, r2, ip
1a003eca:	f100 0008 	add.w	r0, r0, #8
1a003ece:	faa4 f28c 	sel	r2, r4, ip
1a003ed2:	fa83 f34c 	uadd8	r3, r3, ip
1a003ed6:	faa2 f38c 	sel	r3, r2, ip
1a003eda:	b9e3      	cbnz	r3, 1a003f16 <strlen+0x96>
1a003edc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a003ee0:	fa82 f24c 	uadd8	r2, r2, ip
1a003ee4:	f100 0008 	add.w	r0, r0, #8
1a003ee8:	faa4 f28c 	sel	r2, r4, ip
1a003eec:	fa83 f34c 	uadd8	r3, r3, ip
1a003ef0:	faa2 f38c 	sel	r3, r2, ip
1a003ef4:	b97b      	cbnz	r3, 1a003f16 <strlen+0x96>
1a003ef6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a003efa:	f101 0120 	add.w	r1, r1, #32
1a003efe:	fa82 f24c 	uadd8	r2, r2, ip
1a003f02:	f100 0008 	add.w	r0, r0, #8
1a003f06:	faa4 f28c 	sel	r2, r4, ip
1a003f0a:	fa83 f34c 	uadd8	r3, r3, ip
1a003f0e:	faa2 f38c 	sel	r3, r2, ip
1a003f12:	2b00      	cmp	r3, #0
1a003f14:	d0c6      	beq.n	1a003ea4 <strlen+0x24>
1a003f16:	2a00      	cmp	r2, #0
1a003f18:	bf04      	itt	eq
1a003f1a:	3004      	addeq	r0, #4
1a003f1c:	461a      	moveq	r2, r3
1a003f1e:	ba12      	rev	r2, r2
1a003f20:	fab2 f282 	clz	r2, r2
1a003f24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a003f28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a003f2c:	4770      	bx	lr
1a003f2e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003f32:	f004 0503 	and.w	r5, r4, #3
1a003f36:	f1c4 0000 	rsb	r0, r4, #0
1a003f3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a003f3e:	f014 0f04 	tst.w	r4, #4
1a003f42:	f891 f040 	pld	[r1, #64]	; 0x40
1a003f46:	fa0c f505 	lsl.w	r5, ip, r5
1a003f4a:	ea62 0205 	orn	r2, r2, r5
1a003f4e:	bf1c      	itt	ne
1a003f50:	ea63 0305 	ornne	r3, r3, r5
1a003f54:	4662      	movne	r2, ip
1a003f56:	f04f 0400 	mov.w	r4, #0
1a003f5a:	e7a9      	b.n	1a003eb0 <strlen+0x30>
1a003f5c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a003f60 <_vfprintf_r>:
1a003f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003f64:	b0d5      	sub	sp, #340	; 0x154
1a003f66:	461c      	mov	r4, r3
1a003f68:	4689      	mov	r9, r1
1a003f6a:	4617      	mov	r7, r2
1a003f6c:	4605      	mov	r5, r0
1a003f6e:	9005      	str	r0, [sp, #20]
1a003f70:	f002 ff8c 	bl	1a006e8c <_localeconv_r>
1a003f74:	6803      	ldr	r3, [r0, #0]
1a003f76:	9315      	str	r3, [sp, #84]	; 0x54
1a003f78:	4618      	mov	r0, r3
1a003f7a:	f7ff ff81 	bl	1a003e80 <strlen>
1a003f7e:	9408      	str	r4, [sp, #32]
1a003f80:	9013      	str	r0, [sp, #76]	; 0x4c
1a003f82:	b11d      	cbz	r5, 1a003f8c <_vfprintf_r+0x2c>
1a003f84:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a003f86:	2b00      	cmp	r3, #0
1a003f88:	f000 8411 	beq.w	1a0047ae <_vfprintf_r+0x84e>
1a003f8c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a003f90:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a003f94:	07cd      	lsls	r5, r1, #31
1a003f96:	b293      	uxth	r3, r2
1a003f98:	d402      	bmi.n	1a003fa0 <_vfprintf_r+0x40>
1a003f9a:	0598      	lsls	r0, r3, #22
1a003f9c:	f140 8754 	bpl.w	1a004e48 <_vfprintf_r+0xee8>
1a003fa0:	0499      	lsls	r1, r3, #18
1a003fa2:	d40a      	bmi.n	1a003fba <_vfprintf_r+0x5a>
1a003fa4:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a003fa8:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a003fac:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a003fb0:	f8a9 300c 	strh.w	r3, [r9, #12]
1a003fb4:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a003fb8:	b29b      	uxth	r3, r3
1a003fba:	071a      	lsls	r2, r3, #28
1a003fbc:	f140 80bf 	bpl.w	1a00413e <_vfprintf_r+0x1de>
1a003fc0:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a003fc4:	2a00      	cmp	r2, #0
1a003fc6:	f000 80ba 	beq.w	1a00413e <_vfprintf_r+0x1de>
1a003fca:	f003 021a 	and.w	r2, r3, #26
1a003fce:	2a0a      	cmp	r2, #10
1a003fd0:	f000 80c3 	beq.w	1a00415a <_vfprintf_r+0x1fa>
1a003fd4:	2300      	movs	r3, #0
1a003fd6:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 1a004248 <_vfprintf_r+0x2e8>
1a003fda:	9312      	str	r3, [sp, #72]	; 0x48
1a003fdc:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a003fe0:	9314      	str	r3, [sp, #80]	; 0x50
1a003fe2:	9316      	str	r3, [sp, #88]	; 0x58
1a003fe4:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a003fe8:	9317      	str	r3, [sp, #92]	; 0x5c
1a003fea:	9304      	str	r3, [sp, #16]
1a003fec:	ab2b      	add	r3, sp, #172	; 0xac
1a003fee:	9328      	str	r3, [sp, #160]	; 0xa0
1a003ff0:	469b      	mov	fp, r3
1a003ff2:	783b      	ldrb	r3, [r7, #0]
1a003ff4:	f8cd 901c 	str.w	r9, [sp, #28]
1a003ff8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a003ffc:	2b00      	cmp	r3, #0
1a003ffe:	f000 8267 	beq.w	1a0044d0 <_vfprintf_r+0x570>
1a004002:	2b25      	cmp	r3, #37	; 0x25
1a004004:	f001 80ab 	beq.w	1a00515e <_vfprintf_r+0x11fe>
1a004008:	463d      	mov	r5, r7
1a00400a:	e003      	b.n	1a004014 <_vfprintf_r+0xb4>
1a00400c:	2b25      	cmp	r3, #37	; 0x25
1a00400e:	f000 80bb 	beq.w	1a004188 <_vfprintf_r+0x228>
1a004012:	4625      	mov	r5, r4
1a004014:	786b      	ldrb	r3, [r5, #1]
1a004016:	1c6c      	adds	r4, r5, #1
1a004018:	2b00      	cmp	r3, #0
1a00401a:	d1f7      	bne.n	1a00400c <_vfprintf_r+0xac>
1a00401c:	1be6      	subs	r6, r4, r7
1a00401e:	f000 8257 	beq.w	1a0044d0 <_vfprintf_r+0x570>
1a004022:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a004026:	3301      	adds	r3, #1
1a004028:	4432      	add	r2, r6
1a00402a:	2b07      	cmp	r3, #7
1a00402c:	f8cb 7000 	str.w	r7, [fp]
1a004030:	f8cb 6004 	str.w	r6, [fp, #4]
1a004034:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a004038:	f300 80aa 	bgt.w	1a004190 <_vfprintf_r+0x230>
1a00403c:	f10b 0b08 	add.w	fp, fp, #8
1a004040:	9a04      	ldr	r2, [sp, #16]
1a004042:	786b      	ldrb	r3, [r5, #1]
1a004044:	4432      	add	r2, r6
1a004046:	9204      	str	r2, [sp, #16]
1a004048:	2b00      	cmp	r3, #0
1a00404a:	f000 8241 	beq.w	1a0044d0 <_vfprintf_r+0x570>
1a00404e:	2300      	movs	r3, #0
1a004050:	f894 8001 	ldrb.w	r8, [r4, #1]
1a004054:	9306      	str	r3, [sp, #24]
1a004056:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a00405a:	9302      	str	r3, [sp, #8]
1a00405c:	f104 0a01 	add.w	sl, r4, #1
1a004060:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a004064:	262b      	movs	r6, #43	; 0x2b
1a004066:	2120      	movs	r1, #32
1a004068:	f10a 0a01 	add.w	sl, sl, #1
1a00406c:	f1a8 0320 	sub.w	r3, r8, #32
1a004070:	2b5a      	cmp	r3, #90	; 0x5a
1a004072:	f200 83a1 	bhi.w	1a0047b8 <_vfprintf_r+0x858>
1a004076:	e8df f013 	tbh	[pc, r3, lsl #1]
1a00407a:	0282      	.short	0x0282
1a00407c:	039f039f 	.word	0x039f039f
1a004080:	039f027b 	.word	0x039f027b
1a004084:	039f039f 	.word	0x039f039f
1a004088:	039f0301 	.word	0x039f0301
1a00408c:	02f6039f 	.word	0x02f6039f
1a004090:	039f00df 	.word	0x039f00df
1a004094:	032b00c4 	.word	0x032b00c4
1a004098:	0324039f 	.word	0x0324039f
1a00409c:	00960096 	.word	0x00960096
1a0040a0:	00960096 	.word	0x00960096
1a0040a4:	00960096 	.word	0x00960096
1a0040a8:	00960096 	.word	0x00960096
1a0040ac:	039f0096 	.word	0x039f0096
1a0040b0:	039f039f 	.word	0x039f039f
1a0040b4:	039f039f 	.word	0x039f039f
1a0040b8:	039f039f 	.word	0x039f039f
1a0040bc:	039f0345 	.word	0x039f0345
1a0040c0:	016201a8 	.word	0x016201a8
1a0040c4:	03450345 	.word	0x03450345
1a0040c8:	039f0345 	.word	0x039f0345
1a0040cc:	039f039f 	.word	0x039f039f
1a0040d0:	015b039f 	.word	0x015b039f
1a0040d4:	039f039f 	.word	0x039f039f
1a0040d8:	039f014e 	.word	0x039f014e
1a0040dc:	039f039f 	.word	0x039f039f
1a0040e0:	039f0123 	.word	0x039f0123
1a0040e4:	039f0115 	.word	0x039f0115
1a0040e8:	00cb039f 	.word	0x00cb039f
1a0040ec:	039f039f 	.word	0x039f039f
1a0040f0:	039f039f 	.word	0x039f039f
1a0040f4:	039f039f 	.word	0x039f039f
1a0040f8:	039f039f 	.word	0x039f039f
1a0040fc:	039f0345 	.word	0x039f0345
1a004100:	00ef01a8 	.word	0x00ef01a8
1a004104:	03450345 	.word	0x03450345
1a004108:	02700345 	.word	0x02700345
1a00410c:	005b00ef 	.word	0x005b00ef
1a004110:	02eb039f 	.word	0x02eb039f
1a004114:	02d1039f 	.word	0x02d1039f
1a004118:	028c02bd 	.word	0x028c02bd
1a00411c:	039f005b 	.word	0x039f005b
1a004120:	005f0123 	.word	0x005f0123
1a004124:	039f0387 	.word	0x039f0387
1a004128:	00a5039f 	.word	0x00a5039f
1a00412c:	005f039f 	.word	0x005f039f
1a004130:	9b02      	ldr	r3, [sp, #8]
1a004132:	f043 0320 	orr.w	r3, r3, #32
1a004136:	9302      	str	r3, [sp, #8]
1a004138:	f89a 8000 	ldrb.w	r8, [sl]
1a00413c:	e794      	b.n	1a004068 <_vfprintf_r+0x108>
1a00413e:	4649      	mov	r1, r9
1a004140:	9805      	ldr	r0, [sp, #20]
1a004142:	f001 fcf9 	bl	1a005b38 <__swsetup_r>
1a004146:	2800      	cmp	r0, #0
1a004148:	f041 8381 	bne.w	1a00584e <_vfprintf_r+0x18ee>
1a00414c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a004150:	f003 021a 	and.w	r2, r3, #26
1a004154:	2a0a      	cmp	r2, #10
1a004156:	f47f af3d 	bne.w	1a003fd4 <_vfprintf_r+0x74>
1a00415a:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a00415e:	2a00      	cmp	r2, #0
1a004160:	f6ff af38 	blt.w	1a003fd4 <_vfprintf_r+0x74>
1a004164:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a004168:	07d6      	lsls	r6, r2, #31
1a00416a:	d402      	bmi.n	1a004172 <_vfprintf_r+0x212>
1a00416c:	059d      	lsls	r5, r3, #22
1a00416e:	f141 8190 	bpl.w	1a005492 <_vfprintf_r+0x1532>
1a004172:	4623      	mov	r3, r4
1a004174:	463a      	mov	r2, r7
1a004176:	4649      	mov	r1, r9
1a004178:	9805      	ldr	r0, [sp, #20]
1a00417a:	f001 fc9b 	bl	1a005ab4 <__sbprintf>
1a00417e:	9004      	str	r0, [sp, #16]
1a004180:	9804      	ldr	r0, [sp, #16]
1a004182:	b055      	add	sp, #340	; 0x154
1a004184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004188:	1be6      	subs	r6, r4, r7
1a00418a:	f43f af60 	beq.w	1a00404e <_vfprintf_r+0xee>
1a00418e:	e748      	b.n	1a004022 <_vfprintf_r+0xc2>
1a004190:	aa28      	add	r2, sp, #160	; 0xa0
1a004192:	9907      	ldr	r1, [sp, #28]
1a004194:	9805      	ldr	r0, [sp, #20]
1a004196:	f003 fd1f 	bl	1a007bd8 <__sprint_r>
1a00419a:	2800      	cmp	r0, #0
1a00419c:	f041 8427 	bne.w	1a0059ee <_vfprintf_r+0x1a8e>
1a0041a0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0041a4:	e74c      	b.n	1a004040 <_vfprintf_r+0xe0>
1a0041a6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0041aa:	2200      	movs	r2, #0
1a0041ac:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a0041b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0041b4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a0041b8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0041bc:	2b09      	cmp	r3, #9
1a0041be:	d9f5      	bls.n	1a0041ac <_vfprintf_r+0x24c>
1a0041c0:	9206      	str	r2, [sp, #24]
1a0041c2:	e753      	b.n	1a00406c <_vfprintf_r+0x10c>
1a0041c4:	4b22      	ldr	r3, [pc, #136]	; (1a004250 <_vfprintf_r+0x2f0>)
1a0041c6:	9314      	str	r3, [sp, #80]	; 0x50
1a0041c8:	9b02      	ldr	r3, [sp, #8]
1a0041ca:	069f      	lsls	r7, r3, #26
1a0041cc:	d525      	bpl.n	1a00421a <_vfprintf_r+0x2ba>
1a0041ce:	9c08      	ldr	r4, [sp, #32]
1a0041d0:	3407      	adds	r4, #7
1a0041d2:	f024 0307 	bic.w	r3, r4, #7
1a0041d6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0041da:	9308      	str	r3, [sp, #32]
1a0041dc:	9a02      	ldr	r2, [sp, #8]
1a0041de:	07d1      	lsls	r1, r2, #31
1a0041e0:	d50a      	bpl.n	1a0041f8 <_vfprintf_r+0x298>
1a0041e2:	ea54 0305 	orrs.w	r3, r4, r5
1a0041e6:	d007      	beq.n	1a0041f8 <_vfprintf_r+0x298>
1a0041e8:	2330      	movs	r3, #48	; 0x30
1a0041ea:	f042 0202 	orr.w	r2, r2, #2
1a0041ee:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a0041f2:	9202      	str	r2, [sp, #8]
1a0041f4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a0041f8:	9b02      	ldr	r3, [sp, #8]
1a0041fa:	f423 6680 	bic.w	r6, r3, #1024	; 0x400
1a0041fe:	2302      	movs	r3, #2
1a004200:	e1d9      	b.n	1a0045b6 <_vfprintf_r+0x656>
1a004202:	f89a 8000 	ldrb.w	r8, [sl]
1a004206:	9b02      	ldr	r3, [sp, #8]
1a004208:	f043 0304 	orr.w	r3, r3, #4
1a00420c:	9302      	str	r3, [sp, #8]
1a00420e:	e72b      	b.n	1a004068 <_vfprintf_r+0x108>
1a004210:	4b10      	ldr	r3, [pc, #64]	; (1a004254 <_vfprintf_r+0x2f4>)
1a004212:	9314      	str	r3, [sp, #80]	; 0x50
1a004214:	9b02      	ldr	r3, [sp, #8]
1a004216:	069f      	lsls	r7, r3, #26
1a004218:	d4d9      	bmi.n	1a0041ce <_vfprintf_r+0x26e>
1a00421a:	9b08      	ldr	r3, [sp, #32]
1a00421c:	f853 4b04 	ldr.w	r4, [r3], #4
1a004220:	9308      	str	r3, [sp, #32]
1a004222:	9b02      	ldr	r3, [sp, #8]
1a004224:	06de      	lsls	r6, r3, #27
1a004226:	f100 864f 	bmi.w	1a004ec8 <_vfprintf_r+0xf68>
1a00422a:	9b02      	ldr	r3, [sp, #8]
1a00422c:	065d      	lsls	r5, r3, #25
1a00422e:	f140 8647 	bpl.w	1a004ec0 <_vfprintf_r+0xf60>
1a004232:	b2a4      	uxth	r4, r4
1a004234:	2500      	movs	r5, #0
1a004236:	e7d1      	b.n	1a0041dc <_vfprintf_r+0x27c>
1a004238:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
1a00423c:	f89a 8000 	ldrb.w	r8, [sl]
1a004240:	e712      	b.n	1a004068 <_vfprintf_r+0x108>
1a004242:	bf00      	nop
1a004244:	f3af 8000 	nop.w
	...
1a004250:	1a008390 	.word	0x1a008390
1a004254:	1a00837c 	.word	0x1a00837c
1a004258:	9e02      	ldr	r6, [sp, #8]
1a00425a:	06b0      	lsls	r0, r6, #26
1a00425c:	f140 870b 	bpl.w	1a005076 <_vfprintf_r+0x1116>
1a004260:	9c08      	ldr	r4, [sp, #32]
1a004262:	3407      	adds	r4, #7
1a004264:	f024 0307 	bic.w	r3, r4, #7
1a004268:	4619      	mov	r1, r3
1a00426a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a00426e:	9108      	str	r1, [sp, #32]
1a004270:	4614      	mov	r4, r2
1a004272:	461d      	mov	r5, r3
1a004274:	2a00      	cmp	r2, #0
1a004276:	f173 0300 	sbcs.w	r3, r3, #0
1a00427a:	db71      	blt.n	1a004360 <_vfprintf_r+0x400>
1a00427c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a004280:	f000 82c5 	beq.w	1a00480e <_vfprintf_r+0x8ae>
1a004284:	f026 0380 	bic.w	r3, r6, #128	; 0x80
1a004288:	9302      	str	r3, [sp, #8]
1a00428a:	ea54 0305 	orrs.w	r3, r4, r5
1a00428e:	f040 82bd 	bne.w	1a00480c <_vfprintf_r+0x8ac>
1a004292:	f1b9 0f00 	cmp.w	r9, #0
1a004296:	f041 810e 	bne.w	1a0054b6 <_vfprintf_r+0x1556>
1a00429a:	f04f 0900 	mov.w	r9, #0
1a00429e:	464e      	mov	r6, r9
1a0042a0:	af54      	add	r7, sp, #336	; 0x150
1a0042a2:	e2bf      	b.n	1a004824 <_vfprintf_r+0x8c4>
1a0042a4:	9b02      	ldr	r3, [sp, #8]
1a0042a6:	069d      	lsls	r5, r3, #26
1a0042a8:	f043 0610 	orr.w	r6, r3, #16
1a0042ac:	f100 828f 	bmi.w	1a0047ce <_vfprintf_r+0x86e>
1a0042b0:	9b08      	ldr	r3, [sp, #32]
1a0042b2:	1d1a      	adds	r2, r3, #4
1a0042b4:	9b08      	ldr	r3, [sp, #32]
1a0042b6:	9208      	str	r2, [sp, #32]
1a0042b8:	681c      	ldr	r4, [r3, #0]
1a0042ba:	2500      	movs	r5, #0
1a0042bc:	2301      	movs	r3, #1
1a0042be:	e17a      	b.n	1a0045b6 <_vfprintf_r+0x656>
1a0042c0:	9c08      	ldr	r4, [sp, #32]
1a0042c2:	f854 7b04 	ldr.w	r7, [r4], #4
1a0042c6:	2500      	movs	r5, #0
1a0042c8:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a0042cc:	2f00      	cmp	r7, #0
1a0042ce:	f000 8737 	beq.w	1a005140 <_vfprintf_r+0x11e0>
1a0042d2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0042d6:	f000 87bc 	beq.w	1a005252 <_vfprintf_r+0x12f2>
1a0042da:	464a      	mov	r2, r9
1a0042dc:	4629      	mov	r1, r5
1a0042de:	4638      	mov	r0, r7
1a0042e0:	f002 fe56 	bl	1a006f90 <memchr>
1a0042e4:	9009      	str	r0, [sp, #36]	; 0x24
1a0042e6:	2800      	cmp	r0, #0
1a0042e8:	f001 824a 	beq.w	1a005780 <_vfprintf_r+0x1820>
1a0042ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0042ee:	46a9      	mov	r9, r5
1a0042f0:	1bde      	subs	r6, r3, r7
1a0042f2:	e9cd 990e 	strd	r9, r9, [sp, #56]	; 0x38
1a0042f6:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0042fa:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0042fe:	9408      	str	r4, [sp, #32]
1a004300:	9303      	str	r3, [sp, #12]
1a004302:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a004306:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
1a00430a:	2a00      	cmp	r2, #0
1a00430c:	d06f      	beq.n	1a0043ee <_vfprintf_r+0x48e>
1a00430e:	9b03      	ldr	r3, [sp, #12]
1a004310:	3301      	adds	r3, #1
1a004312:	9303      	str	r3, [sp, #12]
1a004314:	e06b      	b.n	1a0043ee <_vfprintf_r+0x48e>
1a004316:	9b02      	ldr	r3, [sp, #8]
1a004318:	069c      	lsls	r4, r3, #26
1a00431a:	f043 0610 	orr.w	r6, r3, #16
1a00431e:	f100 825f 	bmi.w	1a0047e0 <_vfprintf_r+0x880>
1a004322:	9b08      	ldr	r3, [sp, #32]
1a004324:	1d1a      	adds	r2, r3, #4
1a004326:	9b08      	ldr	r3, [sp, #32]
1a004328:	9208      	str	r2, [sp, #32]
1a00432a:	681c      	ldr	r4, [r3, #0]
1a00432c:	2500      	movs	r5, #0
1a00432e:	e25e      	b.n	1a0047ee <_vfprintf_r+0x88e>
1a004330:	9b02      	ldr	r3, [sp, #8]
1a004332:	f89a 8000 	ldrb.w	r8, [sl]
1a004336:	f043 0308 	orr.w	r3, r3, #8
1a00433a:	9302      	str	r3, [sp, #8]
1a00433c:	e694      	b.n	1a004068 <_vfprintf_r+0x108>
1a00433e:	9b02      	ldr	r3, [sp, #8]
1a004340:	069c      	lsls	r4, r3, #26
1a004342:	f043 0610 	orr.w	r6, r3, #16
1a004346:	d48b      	bmi.n	1a004260 <_vfprintf_r+0x300>
1a004348:	9b08      	ldr	r3, [sp, #32]
1a00434a:	1d1a      	adds	r2, r3, #4
1a00434c:	9b08      	ldr	r3, [sp, #32]
1a00434e:	9208      	str	r2, [sp, #32]
1a004350:	681c      	ldr	r4, [r3, #0]
1a004352:	17e5      	asrs	r5, r4, #31
1a004354:	4622      	mov	r2, r4
1a004356:	462b      	mov	r3, r5
1a004358:	2a00      	cmp	r2, #0
1a00435a:	f173 0300 	sbcs.w	r3, r3, #0
1a00435e:	da8d      	bge.n	1a00427c <_vfprintf_r+0x31c>
1a004360:	4264      	negs	r4, r4
1a004362:	f04f 032d 	mov.w	r3, #45	; 0x2d
1a004366:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a00436a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a00436e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a004372:	f04f 0301 	mov.w	r3, #1
1a004376:	f040 8125 	bne.w	1a0045c4 <_vfprintf_r+0x664>
1a00437a:	2b01      	cmp	r3, #1
1a00437c:	f000 8247 	beq.w	1a00480e <_vfprintf_r+0x8ae>
1a004380:	2b02      	cmp	r3, #2
1a004382:	f000 8479 	beq.w	1a004c78 <_vfprintf_r+0xd18>
1a004386:	a954      	add	r1, sp, #336	; 0x150
1a004388:	e000      	b.n	1a00438c <_vfprintf_r+0x42c>
1a00438a:	4639      	mov	r1, r7
1a00438c:	08e2      	lsrs	r2, r4, #3
1a00438e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a004392:	08e8      	lsrs	r0, r5, #3
1a004394:	f004 0307 	and.w	r3, r4, #7
1a004398:	4605      	mov	r5, r0
1a00439a:	4614      	mov	r4, r2
1a00439c:	3330      	adds	r3, #48	; 0x30
1a00439e:	ea54 0205 	orrs.w	r2, r4, r5
1a0043a2:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0043a6:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a0043aa:	d1ee      	bne.n	1a00438a <_vfprintf_r+0x42a>
1a0043ac:	07f2      	lsls	r2, r6, #31
1a0043ae:	f140 8288 	bpl.w	1a0048c2 <_vfprintf_r+0x962>
1a0043b2:	2b30      	cmp	r3, #48	; 0x30
1a0043b4:	f000 8285 	beq.w	1a0048c2 <_vfprintf_r+0x962>
1a0043b8:	2330      	movs	r3, #48	; 0x30
1a0043ba:	3902      	subs	r1, #2
1a0043bc:	f807 3c01 	strb.w	r3, [r7, #-1]
1a0043c0:	ab54      	add	r3, sp, #336	; 0x150
1a0043c2:	9602      	str	r6, [sp, #8]
1a0043c4:	460f      	mov	r7, r1
1a0043c6:	1a5e      	subs	r6, r3, r1
1a0043c8:	e22c      	b.n	1a004824 <_vfprintf_r+0x8c4>
1a0043ca:	9c08      	ldr	r4, [sp, #32]
1a0043cc:	2300      	movs	r3, #0
1a0043ce:	f854 2b04 	ldr.w	r2, [r4], #4
1a0043d2:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a0043d6:	2601      	movs	r6, #1
1a0043d8:	461a      	mov	r2, r3
1a0043da:	9603      	str	r6, [sp, #12]
1a0043dc:	9408      	str	r4, [sp, #32]
1a0043de:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a0043e2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a0043e6:	9209      	str	r2, [sp, #36]	; 0x24
1a0043e8:	4691      	mov	r9, r2
1a0043ea:	920c      	str	r2, [sp, #48]	; 0x30
1a0043ec:	af3b      	add	r7, sp, #236	; 0xec
1a0043ee:	9b02      	ldr	r3, [sp, #8]
1a0043f0:	f013 0302 	ands.w	r3, r3, #2
1a0043f4:	930a      	str	r3, [sp, #40]	; 0x28
1a0043f6:	d002      	beq.n	1a0043fe <_vfprintf_r+0x49e>
1a0043f8:	9b03      	ldr	r3, [sp, #12]
1a0043fa:	3302      	adds	r3, #2
1a0043fc:	9303      	str	r3, [sp, #12]
1a0043fe:	9b02      	ldr	r3, [sp, #8]
1a004400:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004402:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a004406:	930b      	str	r3, [sp, #44]	; 0x2c
1a004408:	d104      	bne.n	1a004414 <_vfprintf_r+0x4b4>
1a00440a:	9b06      	ldr	r3, [sp, #24]
1a00440c:	9903      	ldr	r1, [sp, #12]
1a00440e:	1a5d      	subs	r5, r3, r1
1a004410:	2d00      	cmp	r5, #0
1a004412:	dc66      	bgt.n	1a0044e2 <_vfprintf_r+0x582>
1a004414:	b172      	cbz	r2, 1a004434 <_vfprintf_r+0x4d4>
1a004416:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004418:	3201      	adds	r2, #1
1a00441a:	3401      	adds	r4, #1
1a00441c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a004420:	2101      	movs	r1, #1
1a004422:	2a07      	cmp	r2, #7
1a004424:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004428:	e9cb 0100 	strd	r0, r1, [fp]
1a00442c:	f300 83b1 	bgt.w	1a004b92 <_vfprintf_r+0xc32>
1a004430:	f10b 0b08 	add.w	fp, fp, #8
1a004434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004436:	b16b      	cbz	r3, 1a004454 <_vfprintf_r+0x4f4>
1a004438:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00443a:	3301      	adds	r3, #1
1a00443c:	3402      	adds	r4, #2
1a00443e:	a921      	add	r1, sp, #132	; 0x84
1a004440:	2202      	movs	r2, #2
1a004442:	2b07      	cmp	r3, #7
1a004444:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004448:	e9cb 1200 	strd	r1, r2, [fp]
1a00444c:	f300 83ad 	bgt.w	1a004baa <_vfprintf_r+0xc4a>
1a004450:	f10b 0b08 	add.w	fp, fp, #8
1a004454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004456:	2b80      	cmp	r3, #128	; 0x80
1a004458:	f000 8295 	beq.w	1a004986 <_vfprintf_r+0xa26>
1a00445c:	eba9 0506 	sub.w	r5, r9, r6
1a004460:	2d00      	cmp	r5, #0
1a004462:	f300 82d3 	bgt.w	1a004a0c <_vfprintf_r+0xaac>
1a004466:	9b02      	ldr	r3, [sp, #8]
1a004468:	05db      	lsls	r3, r3, #23
1a00446a:	f100 822e 	bmi.w	1a0048ca <_vfprintf_r+0x96a>
1a00446e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004470:	f8cb 7000 	str.w	r7, [fp]
1a004474:	3301      	adds	r3, #1
1a004476:	4434      	add	r4, r6
1a004478:	2b07      	cmp	r3, #7
1a00447a:	942a      	str	r4, [sp, #168]	; 0xa8
1a00447c:	f8cb 6004 	str.w	r6, [fp, #4]
1a004480:	9329      	str	r3, [sp, #164]	; 0xa4
1a004482:	f300 8325 	bgt.w	1a004ad0 <_vfprintf_r+0xb70>
1a004486:	f10b 0b08 	add.w	fp, fp, #8
1a00448a:	9b02      	ldr	r3, [sp, #8]
1a00448c:	075d      	lsls	r5, r3, #29
1a00448e:	d505      	bpl.n	1a00449c <_vfprintf_r+0x53c>
1a004490:	9b06      	ldr	r3, [sp, #24]
1a004492:	9a03      	ldr	r2, [sp, #12]
1a004494:	1a9d      	subs	r5, r3, r2
1a004496:	2d00      	cmp	r5, #0
1a004498:	f300 83ae 	bgt.w	1a004bf8 <_vfprintf_r+0xc98>
1a00449c:	9b04      	ldr	r3, [sp, #16]
1a00449e:	9a06      	ldr	r2, [sp, #24]
1a0044a0:	9903      	ldr	r1, [sp, #12]
1a0044a2:	428a      	cmp	r2, r1
1a0044a4:	bfac      	ite	ge
1a0044a6:	189b      	addge	r3, r3, r2
1a0044a8:	185b      	addlt	r3, r3, r1
1a0044aa:	9304      	str	r3, [sp, #16]
1a0044ac:	2c00      	cmp	r4, #0
1a0044ae:	f040 82e7 	bne.w	1a004a80 <_vfprintf_r+0xb20>
1a0044b2:	2300      	movs	r3, #0
1a0044b4:	9329      	str	r3, [sp, #164]	; 0xa4
1a0044b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0044b8:	b11b      	cbz	r3, 1a0044c2 <_vfprintf_r+0x562>
1a0044ba:	9909      	ldr	r1, [sp, #36]	; 0x24
1a0044bc:	9805      	ldr	r0, [sp, #20]
1a0044be:	f7fe ff33 	bl	1a003328 <_free_r>
1a0044c2:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0044c6:	4657      	mov	r7, sl
1a0044c8:	783b      	ldrb	r3, [r7, #0]
1a0044ca:	2b00      	cmp	r3, #0
1a0044cc:	f47f ad99 	bne.w	1a004002 <_vfprintf_r+0xa2>
1a0044d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a0044d2:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0044d6:	2b00      	cmp	r3, #0
1a0044d8:	f040 86f5 	bne.w	1a0052c6 <_vfprintf_r+0x1366>
1a0044dc:	2300      	movs	r3, #0
1a0044de:	9329      	str	r3, [sp, #164]	; 0xa4
1a0044e0:	e375      	b.n	1a004bce <_vfprintf_r+0xc6e>
1a0044e2:	2d10      	cmp	r5, #16
1a0044e4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0044e6:	dd29      	ble.n	1a00453c <_vfprintf_r+0x5dc>
1a0044e8:	4659      	mov	r1, fp
1a0044ea:	4620      	mov	r0, r4
1a0044ec:	961e      	str	r6, [sp, #120]	; 0x78
1a0044ee:	2310      	movs	r3, #16
1a0044f0:	9c05      	ldr	r4, [sp, #20]
1a0044f2:	9e07      	ldr	r6, [sp, #28]
1a0044f4:	46bb      	mov	fp, r7
1a0044f6:	e004      	b.n	1a004502 <_vfprintf_r+0x5a2>
1a0044f8:	3d10      	subs	r5, #16
1a0044fa:	2d10      	cmp	r5, #16
1a0044fc:	f101 0108 	add.w	r1, r1, #8
1a004500:	dd18      	ble.n	1a004534 <_vfprintf_r+0x5d4>
1a004502:	3201      	adds	r2, #1
1a004504:	4fbc      	ldr	r7, [pc, #752]	; (1a0047f8 <_vfprintf_r+0x898>)
1a004506:	3010      	adds	r0, #16
1a004508:	2a07      	cmp	r2, #7
1a00450a:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00450e:	e9c1 7300 	strd	r7, r3, [r1]
1a004512:	ddf1      	ble.n	1a0044f8 <_vfprintf_r+0x598>
1a004514:	aa28      	add	r2, sp, #160	; 0xa0
1a004516:	4631      	mov	r1, r6
1a004518:	4620      	mov	r0, r4
1a00451a:	f003 fb5d 	bl	1a007bd8 <__sprint_r>
1a00451e:	2800      	cmp	r0, #0
1a004520:	f040 834f 	bne.w	1a004bc2 <_vfprintf_r+0xc62>
1a004524:	3d10      	subs	r5, #16
1a004526:	2d10      	cmp	r5, #16
1a004528:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00452c:	a92b      	add	r1, sp, #172	; 0xac
1a00452e:	f04f 0310 	mov.w	r3, #16
1a004532:	dce6      	bgt.n	1a004502 <_vfprintf_r+0x5a2>
1a004534:	9e1e      	ldr	r6, [sp, #120]	; 0x78
1a004536:	465f      	mov	r7, fp
1a004538:	4604      	mov	r4, r0
1a00453a:	468b      	mov	fp, r1
1a00453c:	3201      	adds	r2, #1
1a00453e:	4bae      	ldr	r3, [pc, #696]	; (1a0047f8 <_vfprintf_r+0x898>)
1a004540:	442c      	add	r4, r5
1a004542:	2a07      	cmp	r2, #7
1a004544:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004548:	e9cb 3500 	strd	r3, r5, [fp]
1a00454c:	f300 862a 	bgt.w	1a0051a4 <_vfprintf_r+0x1244>
1a004550:	f10b 0b08 	add.w	fp, fp, #8
1a004554:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004558:	e75c      	b.n	1a004414 <_vfprintf_r+0x4b4>
1a00455a:	f89a 8000 	ldrb.w	r8, [sl]
1a00455e:	9b02      	ldr	r3, [sp, #8]
1a004560:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a004564:	f000 85e3 	beq.w	1a00512e <_vfprintf_r+0x11ce>
1a004568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00456c:	9302      	str	r3, [sp, #8]
1a00456e:	e57b      	b.n	1a004068 <_vfprintf_r+0x108>
1a004570:	9b02      	ldr	r3, [sp, #8]
1a004572:	f89a 8000 	ldrb.w	r8, [sl]
1a004576:	f043 0301 	orr.w	r3, r3, #1
1a00457a:	9302      	str	r3, [sp, #8]
1a00457c:	e574      	b.n	1a004068 <_vfprintf_r+0x108>
1a00457e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a004582:	f89a 8000 	ldrb.w	r8, [sl]
1a004586:	2b00      	cmp	r3, #0
1a004588:	f47f ad6e 	bne.w	1a004068 <_vfprintf_r+0x108>
1a00458c:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a004590:	e56a      	b.n	1a004068 <_vfprintf_r+0x108>
1a004592:	9c08      	ldr	r4, [sp, #32]
1a004594:	f647 0230 	movw	r2, #30768	; 0x7830
1a004598:	f854 3b04 	ldr.w	r3, [r4], #4
1a00459c:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a0045a0:	9a02      	ldr	r2, [sp, #8]
1a0045a2:	9408      	str	r4, [sp, #32]
1a0045a4:	461c      	mov	r4, r3
1a0045a6:	4b95      	ldr	r3, [pc, #596]	; (1a0047fc <_vfprintf_r+0x89c>)
1a0045a8:	9314      	str	r3, [sp, #80]	; 0x50
1a0045aa:	f042 0602 	orr.w	r6, r2, #2
1a0045ae:	2500      	movs	r5, #0
1a0045b0:	2302      	movs	r3, #2
1a0045b2:	f04f 0878 	mov.w	r8, #120	; 0x78
1a0045b6:	2200      	movs	r2, #0
1a0045b8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0045bc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a0045c0:	f43f aedb 	beq.w	1a00437a <_vfprintf_r+0x41a>
1a0045c4:	f026 0280 	bic.w	r2, r6, #128	; 0x80
1a0045c8:	9202      	str	r2, [sp, #8]
1a0045ca:	ea54 0205 	orrs.w	r2, r4, r5
1a0045ce:	f040 82dd 	bne.w	1a004b8c <_vfprintf_r+0xc2c>
1a0045d2:	f1b9 0f00 	cmp.w	r9, #0
1a0045d6:	f040 8348 	bne.w	1a004c6a <_vfprintf_r+0xd0a>
1a0045da:	2b00      	cmp	r3, #0
1a0045dc:	f47f ae5d 	bne.w	1a00429a <_vfprintf_r+0x33a>
1a0045e0:	f016 0601 	ands.w	r6, r6, #1
1a0045e4:	f000 846a 	beq.w	1a004ebc <_vfprintf_r+0xf5c>
1a0045e8:	2330      	movs	r3, #48	; 0x30
1a0045ea:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a0045ee:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a0045f2:	e117      	b.n	1a004824 <_vfprintf_r+0x8c4>
1a0045f4:	9e02      	ldr	r6, [sp, #8]
1a0045f6:	06b0      	lsls	r0, r6, #26
1a0045f8:	f100 80f2 	bmi.w	1a0047e0 <_vfprintf_r+0x880>
1a0045fc:	9b02      	ldr	r3, [sp, #8]
1a0045fe:	9a08      	ldr	r2, [sp, #32]
1a004600:	06d9      	lsls	r1, r3, #27
1a004602:	f852 4b04 	ldr.w	r4, [r2], #4
1a004606:	f101 8243 	bmi.w	1a005a90 <_vfprintf_r+0x1b30>
1a00460a:	9e02      	ldr	r6, [sp, #8]
1a00460c:	4633      	mov	r3, r6
1a00460e:	065b      	lsls	r3, r3, #25
1a004610:	f140 8635 	bpl.w	1a00527e <_vfprintf_r+0x131e>
1a004614:	9208      	str	r2, [sp, #32]
1a004616:	b2a4      	uxth	r4, r4
1a004618:	2500      	movs	r5, #0
1a00461a:	e0e8      	b.n	1a0047ee <_vfprintf_r+0x88e>
1a00461c:	9902      	ldr	r1, [sp, #8]
1a00461e:	9a08      	ldr	r2, [sp, #32]
1a004620:	0689      	lsls	r1, r1, #26
1a004622:	f102 0304 	add.w	r3, r2, #4
1a004626:	f100 8452 	bmi.w	1a004ece <_vfprintf_r+0xf6e>
1a00462a:	9a02      	ldr	r2, [sp, #8]
1a00462c:	06d7      	lsls	r7, r2, #27
1a00462e:	f100 85e1 	bmi.w	1a0051f4 <_vfprintf_r+0x1294>
1a004632:	9a02      	ldr	r2, [sp, #8]
1a004634:	0656      	lsls	r6, r2, #25
1a004636:	f100 8664 	bmi.w	1a005302 <_vfprintf_r+0x13a2>
1a00463a:	9a02      	ldr	r2, [sp, #8]
1a00463c:	0595      	lsls	r5, r2, #22
1a00463e:	f140 85d9 	bpl.w	1a0051f4 <_vfprintf_r+0x1294>
1a004642:	9a08      	ldr	r2, [sp, #32]
1a004644:	9308      	str	r3, [sp, #32]
1a004646:	6812      	ldr	r2, [r2, #0]
1a004648:	9b04      	ldr	r3, [sp, #16]
1a00464a:	7013      	strb	r3, [r2, #0]
1a00464c:	4657      	mov	r7, sl
1a00464e:	e73b      	b.n	1a0044c8 <_vfprintf_r+0x568>
1a004650:	f89a 8000 	ldrb.w	r8, [sl]
1a004654:	9b02      	ldr	r3, [sp, #8]
1a004656:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a00465a:	f000 855f 	beq.w	1a00511c <_vfprintf_r+0x11bc>
1a00465e:	f043 0310 	orr.w	r3, r3, #16
1a004662:	9302      	str	r3, [sp, #8]
1a004664:	e500      	b.n	1a004068 <_vfprintf_r+0x108>
1a004666:	9b08      	ldr	r3, [sp, #32]
1a004668:	f89a 8000 	ldrb.w	r8, [sl]
1a00466c:	f853 2b04 	ldr.w	r2, [r3], #4
1a004670:	9206      	str	r2, [sp, #24]
1a004672:	2a00      	cmp	r2, #0
1a004674:	f2c0 8513 	blt.w	1a00509e <_vfprintf_r+0x113e>
1a004678:	9308      	str	r3, [sp, #32]
1a00467a:	e4f5      	b.n	1a004068 <_vfprintf_r+0x108>
1a00467c:	9d05      	ldr	r5, [sp, #20]
1a00467e:	4628      	mov	r0, r5
1a004680:	f002 fc04 	bl	1a006e8c <_localeconv_r>
1a004684:	6843      	ldr	r3, [r0, #4]
1a004686:	9317      	str	r3, [sp, #92]	; 0x5c
1a004688:	4618      	mov	r0, r3
1a00468a:	f7ff fbf9 	bl	1a003e80 <strlen>
1a00468e:	9019      	str	r0, [sp, #100]	; 0x64
1a004690:	4604      	mov	r4, r0
1a004692:	4628      	mov	r0, r5
1a004694:	f002 fbfa 	bl	1a006e8c <_localeconv_r>
1a004698:	6883      	ldr	r3, [r0, #8]
1a00469a:	9318      	str	r3, [sp, #96]	; 0x60
1a00469c:	2120      	movs	r1, #32
1a00469e:	2c00      	cmp	r4, #0
1a0046a0:	f43f ad4a 	beq.w	1a004138 <_vfprintf_r+0x1d8>
1a0046a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a0046a6:	f89a 8000 	ldrb.w	r8, [sl]
1a0046aa:	2b00      	cmp	r3, #0
1a0046ac:	f43f acdc 	beq.w	1a004068 <_vfprintf_r+0x108>
1a0046b0:	781b      	ldrb	r3, [r3, #0]
1a0046b2:	2b00      	cmp	r3, #0
1a0046b4:	f43f acd8 	beq.w	1a004068 <_vfprintf_r+0x108>
1a0046b8:	9b02      	ldr	r3, [sp, #8]
1a0046ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a0046be:	9302      	str	r3, [sp, #8]
1a0046c0:	e4d2      	b.n	1a004068 <_vfprintf_r+0x108>
1a0046c2:	9b02      	ldr	r3, [sp, #8]
1a0046c4:	f89a 8000 	ldrb.w	r8, [sl]
1a0046c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0046cc:	9302      	str	r3, [sp, #8]
1a0046ce:	e4cb      	b.n	1a004068 <_vfprintf_r+0x108>
1a0046d0:	4652      	mov	r2, sl
1a0046d2:	f812 8b01 	ldrb.w	r8, [r2], #1
1a0046d6:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a0046da:	f001 81be 	beq.w	1a005a5a <_vfprintf_r+0x1afa>
1a0046de:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0046e2:	2b09      	cmp	r3, #9
1a0046e4:	4692      	mov	sl, r2
1a0046e6:	f04f 0900 	mov.w	r9, #0
1a0046ea:	f63f acbf 	bhi.w	1a00406c <_vfprintf_r+0x10c>
1a0046ee:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a0046f2:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a0046f6:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a0046fa:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0046fe:	2b09      	cmp	r3, #9
1a004700:	d9f5      	bls.n	1a0046ee <_vfprintf_r+0x78e>
1a004702:	e4b3      	b.n	1a00406c <_vfprintf_r+0x10c>
1a004704:	9c08      	ldr	r4, [sp, #32]
1a004706:	3407      	adds	r4, #7
1a004708:	f024 0307 	bic.w	r3, r4, #7
1a00470c:	ecb3 7b02 	vldmia	r3!, {d7}
1a004710:	ec55 4b17 	vmov	r4, r5, d7
1a004714:	9308      	str	r3, [sp, #32]
1a004716:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a00471a:	931b      	str	r3, [sp, #108]	; 0x6c
1a00471c:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a004720:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a004724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004728:	4b35      	ldr	r3, [pc, #212]	; (1a004800 <_vfprintf_r+0x8a0>)
1a00472a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00472e:	f003 fbab 	bl	1a007e88 <__aeabi_dcmpun>
1a004732:	2800      	cmp	r0, #0
1a004734:	f040 83dc 	bne.w	1a004ef0 <_vfprintf_r+0xf90>
1a004738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00473c:	4b30      	ldr	r3, [pc, #192]	; (1a004800 <_vfprintf_r+0x8a0>)
1a00473e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a004742:	f7fe fa61 	bl	1a002c08 <__aeabi_dcmple>
1a004746:	2800      	cmp	r0, #0
1a004748:	f040 83d2 	bne.w	1a004ef0 <_vfprintf_r+0xf90>
1a00474c:	2200      	movs	r2, #0
1a00474e:	2300      	movs	r3, #0
1a004750:	4620      	mov	r0, r4
1a004752:	4629      	mov	r1, r5
1a004754:	f7fe fa4e 	bl	1a002bf4 <__aeabi_dcmplt>
1a004758:	2800      	cmp	r0, #0
1a00475a:	f040 8780 	bne.w	1a00565e <_vfprintf_r+0x16fe>
1a00475e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004762:	4f28      	ldr	r7, [pc, #160]	; (1a004804 <_vfprintf_r+0x8a4>)
1a004764:	4b28      	ldr	r3, [pc, #160]	; (1a004808 <_vfprintf_r+0x8a8>)
1a004766:	9802      	ldr	r0, [sp, #8]
1a004768:	2100      	movs	r1, #0
1a00476a:	2603      	movs	r6, #3
1a00476c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a004770:	9603      	str	r6, [sp, #12]
1a004772:	9109      	str	r1, [sp, #36]	; 0x24
1a004774:	9002      	str	r0, [sp, #8]
1a004776:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a00477a:	bfc8      	it	gt
1a00477c:	461f      	movgt	r7, r3
1a00477e:	4689      	mov	r9, r1
1a004780:	910c      	str	r1, [sp, #48]	; 0x30
1a004782:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a004786:	e5c0      	b.n	1a00430a <_vfprintf_r+0x3aa>
1a004788:	9e02      	ldr	r6, [sp, #8]
1a00478a:	06b4      	lsls	r4, r6, #26
1a00478c:	d41f      	bmi.n	1a0047ce <_vfprintf_r+0x86e>
1a00478e:	9b02      	ldr	r3, [sp, #8]
1a004790:	9a08      	ldr	r2, [sp, #32]
1a004792:	06d8      	lsls	r0, r3, #27
1a004794:	f852 4b04 	ldr.w	r4, [r2], #4
1a004798:	f101 8174 	bmi.w	1a005a84 <_vfprintf_r+0x1b24>
1a00479c:	9e02      	ldr	r6, [sp, #8]
1a00479e:	0671      	lsls	r1, r6, #25
1a0047a0:	f140 8577 	bpl.w	1a005292 <_vfprintf_r+0x1332>
1a0047a4:	9208      	str	r2, [sp, #32]
1a0047a6:	b2a4      	uxth	r4, r4
1a0047a8:	2500      	movs	r5, #0
1a0047aa:	2301      	movs	r3, #1
1a0047ac:	e703      	b.n	1a0045b6 <_vfprintf_r+0x656>
1a0047ae:	9805      	ldr	r0, [sp, #20]
1a0047b0:	f7fe fd34 	bl	1a00321c <__sinit>
1a0047b4:	f7ff bbea 	b.w	1a003f8c <_vfprintf_r+0x2c>
1a0047b8:	f1b8 0f00 	cmp.w	r8, #0
1a0047bc:	f43f ae88 	beq.w	1a0044d0 <_vfprintf_r+0x570>
1a0047c0:	2300      	movs	r3, #0
1a0047c2:	2601      	movs	r6, #1
1a0047c4:	461a      	mov	r2, r3
1a0047c6:	9603      	str	r6, [sp, #12]
1a0047c8:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a0047cc:	e607      	b.n	1a0043de <_vfprintf_r+0x47e>
1a0047ce:	9c08      	ldr	r4, [sp, #32]
1a0047d0:	3407      	adds	r4, #7
1a0047d2:	f024 0307 	bic.w	r3, r4, #7
1a0047d6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0047da:	9308      	str	r3, [sp, #32]
1a0047dc:	2301      	movs	r3, #1
1a0047de:	e6ea      	b.n	1a0045b6 <_vfprintf_r+0x656>
1a0047e0:	9c08      	ldr	r4, [sp, #32]
1a0047e2:	3407      	adds	r4, #7
1a0047e4:	f024 0307 	bic.w	r3, r4, #7
1a0047e8:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0047ec:	9308      	str	r3, [sp, #32]
1a0047ee:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
1a0047f2:	2300      	movs	r3, #0
1a0047f4:	e6df      	b.n	1a0045b6 <_vfprintf_r+0x656>
1a0047f6:	bf00      	nop
1a0047f8:	1a0083b0 	.word	0x1a0083b0
1a0047fc:	1a008390 	.word	0x1a008390
1a004800:	7fefffff 	.word	0x7fefffff
1a004804:	1a00836c 	.word	0x1a00836c
1a004808:	1a008370 	.word	0x1a008370
1a00480c:	9e02      	ldr	r6, [sp, #8]
1a00480e:	2d00      	cmp	r5, #0
1a004810:	bf08      	it	eq
1a004812:	2c0a      	cmpeq	r4, #10
1a004814:	d213      	bcs.n	1a00483e <_vfprintf_r+0x8de>
1a004816:	3430      	adds	r4, #48	; 0x30
1a004818:	9602      	str	r6, [sp, #8]
1a00481a:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a00481e:	2601      	movs	r6, #1
1a004820:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a004824:	2300      	movs	r3, #0
1a004826:	454e      	cmp	r6, r9
1a004828:	9309      	str	r3, [sp, #36]	; 0x24
1a00482a:	930c      	str	r3, [sp, #48]	; 0x30
1a00482c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a004830:	4633      	mov	r3, r6
1a004832:	bfb8      	it	lt
1a004834:	464b      	movlt	r3, r9
1a004836:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00483a:	9303      	str	r3, [sp, #12]
1a00483c:	e565      	b.n	1a00430a <_vfprintf_r+0x3aa>
1a00483e:	f406 6380 	and.w	r3, r6, #1024	; 0x400
1a004842:	2200      	movs	r2, #0
1a004844:	e9cd a802 	strd	sl, r8, [sp, #8]
1a004848:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a00484c:	af54      	add	r7, sp, #336	; 0x150
1a00484e:	46cb      	mov	fp, r9
1a004850:	4692      	mov	sl, r2
1a004852:	46b1      	mov	r9, r6
1a004854:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a004858:	461e      	mov	r6, r3
1a00485a:	e007      	b.n	1a00486c <_vfprintf_r+0x90c>
1a00485c:	f7fe f9f2 	bl	1a002c44 <__aeabi_uldivmod>
1a004860:	2d00      	cmp	r5, #0
1a004862:	bf08      	it	eq
1a004864:	2c0a      	cmpeq	r4, #10
1a004866:	d320      	bcc.n	1a0048aa <_vfprintf_r+0x94a>
1a004868:	4604      	mov	r4, r0
1a00486a:	460d      	mov	r5, r1
1a00486c:	220a      	movs	r2, #10
1a00486e:	2300      	movs	r3, #0
1a004870:	4620      	mov	r0, r4
1a004872:	4629      	mov	r1, r5
1a004874:	f7fe f9e6 	bl	1a002c44 <__aeabi_uldivmod>
1a004878:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a00487c:	f807 cc01 	strb.w	ip, [r7, #-1]
1a004880:	4620      	mov	r0, r4
1a004882:	4629      	mov	r1, r5
1a004884:	220a      	movs	r2, #10
1a004886:	2300      	movs	r3, #0
1a004888:	f10a 0a01 	add.w	sl, sl, #1
1a00488c:	3f01      	subs	r7, #1
1a00488e:	2e00      	cmp	r6, #0
1a004890:	d0e4      	beq.n	1a00485c <_vfprintf_r+0x8fc>
1a004892:	f898 c000 	ldrb.w	ip, [r8]
1a004896:	45e2      	cmp	sl, ip
1a004898:	d1e0      	bne.n	1a00485c <_vfprintf_r+0x8fc>
1a00489a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a00489e:	d0dd      	beq.n	1a00485c <_vfprintf_r+0x8fc>
1a0048a0:	429d      	cmp	r5, r3
1a0048a2:	bf08      	it	eq
1a0048a4:	4294      	cmpeq	r4, r2
1a0048a6:	f080 871e 	bcs.w	1a0056e6 <_vfprintf_r+0x1786>
1a0048aa:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a0048ae:	464e      	mov	r6, r9
1a0048b0:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0048b4:	46d9      	mov	r9, fp
1a0048b6:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0048ba:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a0048be:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a0048c2:	9602      	str	r6, [sp, #8]
1a0048c4:	ab54      	add	r3, sp, #336	; 0x150
1a0048c6:	1bde      	subs	r6, r3, r7
1a0048c8:	e7ac      	b.n	1a004824 <_vfprintf_r+0x8c4>
1a0048ca:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a0048ce:	f340 810a 	ble.w	1a004ae6 <_vfprintf_r+0xb86>
1a0048d2:	2200      	movs	r2, #0
1a0048d4:	2300      	movs	r3, #0
1a0048d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0048da:	f7fe f981 	bl	1a002be0 <__aeabi_dcmpeq>
1a0048de:	2800      	cmp	r0, #0
1a0048e0:	f000 81de 	beq.w	1a004ca0 <_vfprintf_r+0xd40>
1a0048e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0048e6:	4ac2      	ldr	r2, [pc, #776]	; (1a004bf0 <_vfprintf_r+0xc90>)
1a0048e8:	f8cb 2000 	str.w	r2, [fp]
1a0048ec:	3301      	adds	r3, #1
1a0048ee:	3401      	adds	r4, #1
1a0048f0:	2201      	movs	r2, #1
1a0048f2:	2b07      	cmp	r3, #7
1a0048f4:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0048f8:	f8cb 2004 	str.w	r2, [fp, #4]
1a0048fc:	f300 8463 	bgt.w	1a0051c6 <_vfprintf_r+0x1266>
1a004900:	f10b 0b08 	add.w	fp, fp, #8
1a004904:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004906:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004908:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00490a:	4293      	cmp	r3, r2
1a00490c:	f280 82a5 	bge.w	1a004e5a <_vfprintf_r+0xefa>
1a004910:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004912:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004914:	f8cb 2000 	str.w	r2, [fp]
1a004918:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a00491a:	f8cb 2004 	str.w	r2, [fp, #4]
1a00491e:	3301      	adds	r3, #1
1a004920:	4414      	add	r4, r2
1a004922:	2b07      	cmp	r3, #7
1a004924:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004928:	f300 83ec 	bgt.w	1a005104 <_vfprintf_r+0x11a4>
1a00492c:	f10b 0b08 	add.w	fp, fp, #8
1a004930:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004932:	1e5d      	subs	r5, r3, #1
1a004934:	2d00      	cmp	r5, #0
1a004936:	f77f ada8 	ble.w	1a00448a <_vfprintf_r+0x52a>
1a00493a:	2d10      	cmp	r5, #16
1a00493c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00493e:	4bad      	ldr	r3, [pc, #692]	; (1a004bf4 <_vfprintf_r+0xc94>)
1a004940:	f340 844e 	ble.w	1a0051e0 <_vfprintf_r+0x1280>
1a004944:	2610      	movs	r6, #16
1a004946:	9f05      	ldr	r7, [sp, #20]
1a004948:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a00494c:	4699      	mov	r9, r3
1a00494e:	e005      	b.n	1a00495c <_vfprintf_r+0x9fc>
1a004950:	f10b 0b08 	add.w	fp, fp, #8
1a004954:	3d10      	subs	r5, #16
1a004956:	2d10      	cmp	r5, #16
1a004958:	f340 8441 	ble.w	1a0051de <_vfprintf_r+0x127e>
1a00495c:	3201      	adds	r2, #1
1a00495e:	3410      	adds	r4, #16
1a004960:	2a07      	cmp	r2, #7
1a004962:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004966:	e9cb 9600 	strd	r9, r6, [fp]
1a00496a:	ddf1      	ble.n	1a004950 <_vfprintf_r+0x9f0>
1a00496c:	aa28      	add	r2, sp, #160	; 0xa0
1a00496e:	4641      	mov	r1, r8
1a004970:	4638      	mov	r0, r7
1a004972:	f003 f931 	bl	1a007bd8 <__sprint_r>
1a004976:	2800      	cmp	r0, #0
1a004978:	f040 8423 	bne.w	1a0051c2 <_vfprintf_r+0x1262>
1a00497c:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a004980:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004984:	e7e6      	b.n	1a004954 <_vfprintf_r+0x9f4>
1a004986:	9b06      	ldr	r3, [sp, #24]
1a004988:	9a03      	ldr	r2, [sp, #12]
1a00498a:	1a9d      	subs	r5, r3, r2
1a00498c:	2d00      	cmp	r5, #0
1a00498e:	f77f ad65 	ble.w	1a00445c <_vfprintf_r+0x4fc>
1a004992:	2d10      	cmp	r5, #16
1a004994:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004996:	4b97      	ldr	r3, [pc, #604]	; (1a004bf4 <_vfprintf_r+0xc94>)
1a004998:	dd28      	ble.n	1a0049ec <_vfprintf_r+0xa8c>
1a00499a:	960a      	str	r6, [sp, #40]	; 0x28
1a00499c:	4659      	mov	r1, fp
1a00499e:	4620      	mov	r0, r4
1a0049a0:	46bb      	mov	fp, r7
1a0049a2:	9c05      	ldr	r4, [sp, #20]
1a0049a4:	9e07      	ldr	r6, [sp, #28]
1a0049a6:	461f      	mov	r7, r3
1a0049a8:	e004      	b.n	1a0049b4 <_vfprintf_r+0xa54>
1a0049aa:	3d10      	subs	r5, #16
1a0049ac:	2d10      	cmp	r5, #16
1a0049ae:	f101 0108 	add.w	r1, r1, #8
1a0049b2:	dd16      	ble.n	1a0049e2 <_vfprintf_r+0xa82>
1a0049b4:	3201      	adds	r2, #1
1a0049b6:	3010      	adds	r0, #16
1a0049b8:	2310      	movs	r3, #16
1a0049ba:	2a07      	cmp	r2, #7
1a0049bc:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a0049c0:	600f      	str	r7, [r1, #0]
1a0049c2:	604b      	str	r3, [r1, #4]
1a0049c4:	ddf1      	ble.n	1a0049aa <_vfprintf_r+0xa4a>
1a0049c6:	aa28      	add	r2, sp, #160	; 0xa0
1a0049c8:	4631      	mov	r1, r6
1a0049ca:	4620      	mov	r0, r4
1a0049cc:	f003 f904 	bl	1a007bd8 <__sprint_r>
1a0049d0:	2800      	cmp	r0, #0
1a0049d2:	f040 80f6 	bne.w	1a004bc2 <_vfprintf_r+0xc62>
1a0049d6:	3d10      	subs	r5, #16
1a0049d8:	2d10      	cmp	r5, #16
1a0049da:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a0049de:	a92b      	add	r1, sp, #172	; 0xac
1a0049e0:	dce8      	bgt.n	1a0049b4 <_vfprintf_r+0xa54>
1a0049e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a0049e4:	463b      	mov	r3, r7
1a0049e6:	4604      	mov	r4, r0
1a0049e8:	465f      	mov	r7, fp
1a0049ea:	468b      	mov	fp, r1
1a0049ec:	3201      	adds	r2, #1
1a0049ee:	442c      	add	r4, r5
1a0049f0:	2a07      	cmp	r2, #7
1a0049f2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0049f6:	e9cb 3500 	strd	r3, r5, [fp]
1a0049fa:	f300 8355 	bgt.w	1a0050a8 <_vfprintf_r+0x1148>
1a0049fe:	eba9 0506 	sub.w	r5, r9, r6
1a004a02:	2d00      	cmp	r5, #0
1a004a04:	f10b 0b08 	add.w	fp, fp, #8
1a004a08:	f77f ad2d 	ble.w	1a004466 <_vfprintf_r+0x506>
1a004a0c:	2d10      	cmp	r5, #16
1a004a0e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004a10:	4b78      	ldr	r3, [pc, #480]	; (1a004bf4 <_vfprintf_r+0xc94>)
1a004a12:	dd29      	ble.n	1a004a68 <_vfprintf_r+0xb08>
1a004a14:	960a      	str	r6, [sp, #40]	; 0x28
1a004a16:	4659      	mov	r1, fp
1a004a18:	4620      	mov	r0, r4
1a004a1a:	46bb      	mov	fp, r7
1a004a1c:	f04f 0910 	mov.w	r9, #16
1a004a20:	9c05      	ldr	r4, [sp, #20]
1a004a22:	9e07      	ldr	r6, [sp, #28]
1a004a24:	461f      	mov	r7, r3
1a004a26:	e004      	b.n	1a004a32 <_vfprintf_r+0xad2>
1a004a28:	3d10      	subs	r5, #16
1a004a2a:	2d10      	cmp	r5, #16
1a004a2c:	f101 0108 	add.w	r1, r1, #8
1a004a30:	dd15      	ble.n	1a004a5e <_vfprintf_r+0xafe>
1a004a32:	3201      	adds	r2, #1
1a004a34:	3010      	adds	r0, #16
1a004a36:	2a07      	cmp	r2, #7
1a004a38:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a004a3c:	e9c1 7900 	strd	r7, r9, [r1]
1a004a40:	ddf2      	ble.n	1a004a28 <_vfprintf_r+0xac8>
1a004a42:	aa28      	add	r2, sp, #160	; 0xa0
1a004a44:	4631      	mov	r1, r6
1a004a46:	4620      	mov	r0, r4
1a004a48:	f003 f8c6 	bl	1a007bd8 <__sprint_r>
1a004a4c:	2800      	cmp	r0, #0
1a004a4e:	f040 80b8 	bne.w	1a004bc2 <_vfprintf_r+0xc62>
1a004a52:	3d10      	subs	r5, #16
1a004a54:	2d10      	cmp	r5, #16
1a004a56:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a004a5a:	a92b      	add	r1, sp, #172	; 0xac
1a004a5c:	dce9      	bgt.n	1a004a32 <_vfprintf_r+0xad2>
1a004a5e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a004a60:	463b      	mov	r3, r7
1a004a62:	4604      	mov	r4, r0
1a004a64:	465f      	mov	r7, fp
1a004a66:	468b      	mov	fp, r1
1a004a68:	3201      	adds	r2, #1
1a004a6a:	442c      	add	r4, r5
1a004a6c:	2a07      	cmp	r2, #7
1a004a6e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004a72:	e9cb 3500 	strd	r3, r5, [fp]
1a004a76:	f300 81da 	bgt.w	1a004e2e <_vfprintf_r+0xece>
1a004a7a:	f10b 0b08 	add.w	fp, fp, #8
1a004a7e:	e4f2      	b.n	1a004466 <_vfprintf_r+0x506>
1a004a80:	aa28      	add	r2, sp, #160	; 0xa0
1a004a82:	9907      	ldr	r1, [sp, #28]
1a004a84:	9805      	ldr	r0, [sp, #20]
1a004a86:	f003 f8a7 	bl	1a007bd8 <__sprint_r>
1a004a8a:	2800      	cmp	r0, #0
1a004a8c:	f43f ad11 	beq.w	1a0044b2 <_vfprintf_r+0x552>
1a004a90:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004a94:	e096      	b.n	1a004bc4 <_vfprintf_r+0xc64>
1a004a96:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004a98:	9915      	ldr	r1, [sp, #84]	; 0x54
1a004a9a:	f8cb 1000 	str.w	r1, [fp]
1a004a9e:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a004aa0:	f8cb 1004 	str.w	r1, [fp, #4]
1a004aa4:	3201      	adds	r2, #1
1a004aa6:	440c      	add	r4, r1
1a004aa8:	2a07      	cmp	r2, #7
1a004aaa:	942a      	str	r4, [sp, #168]	; 0xa8
1a004aac:	9229      	str	r2, [sp, #164]	; 0xa4
1a004aae:	f300 84e1 	bgt.w	1a005474 <_vfprintf_r+0x1514>
1a004ab2:	f10b 0b08 	add.w	fp, fp, #8
1a004ab6:	2b00      	cmp	r3, #0
1a004ab8:	f2c0 86a2 	blt.w	1a005800 <_vfprintf_r+0x18a0>
1a004abc:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004abe:	3201      	adds	r2, #1
1a004ac0:	441c      	add	r4, r3
1a004ac2:	2a07      	cmp	r2, #7
1a004ac4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004ac8:	e9cb 7300 	strd	r7, r3, [fp]
1a004acc:	f77f acdb 	ble.w	1a004486 <_vfprintf_r+0x526>
1a004ad0:	aa28      	add	r2, sp, #160	; 0xa0
1a004ad2:	9907      	ldr	r1, [sp, #28]
1a004ad4:	9805      	ldr	r0, [sp, #20]
1a004ad6:	f003 f87f 	bl	1a007bd8 <__sprint_r>
1a004ada:	2800      	cmp	r0, #0
1a004adc:	d1d8      	bne.n	1a004a90 <_vfprintf_r+0xb30>
1a004ade:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004ae0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004ae4:	e4d1      	b.n	1a00448a <_vfprintf_r+0x52a>
1a004ae6:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004ae8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004aea:	2a01      	cmp	r2, #1
1a004aec:	f104 0401 	add.w	r4, r4, #1
1a004af0:	f103 0501 	add.w	r5, r3, #1
1a004af4:	f10b 0608 	add.w	r6, fp, #8
1a004af8:	f340 8158 	ble.w	1a004dac <_vfprintf_r+0xe4c>
1a004afc:	2301      	movs	r3, #1
1a004afe:	2d07      	cmp	r5, #7
1a004b00:	f8cb 7000 	str.w	r7, [fp]
1a004b04:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a004b08:	f8cb 3004 	str.w	r3, [fp, #4]
1a004b0c:	f300 832a 	bgt.w	1a005164 <_vfprintf_r+0x1204>
1a004b10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004b12:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004b14:	1c69      	adds	r1, r5, #1
1a004b16:	441c      	add	r4, r3
1a004b18:	2907      	cmp	r1, #7
1a004b1a:	910b      	str	r1, [sp, #44]	; 0x2c
1a004b1c:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a004b20:	e9c6 2300 	strd	r2, r3, [r6]
1a004b24:	f300 832a 	bgt.w	1a00517c <_vfprintf_r+0x121c>
1a004b28:	3608      	adds	r6, #8
1a004b2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a004b2c:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a004b2e:	f102 0901 	add.w	r9, r2, #1
1a004b32:	2300      	movs	r3, #0
1a004b34:	2200      	movs	r2, #0
1a004b36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004b3a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a004b3e:	f106 0b08 	add.w	fp, r6, #8
1a004b42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a004b46:	f7fe f84b 	bl	1a002be0 <__aeabi_dcmpeq>
1a004b4a:	2800      	cmp	r0, #0
1a004b4c:	f040 8141 	bne.w	1a004dd2 <_vfprintf_r+0xe72>
1a004b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004b52:	f8c6 8004 	str.w	r8, [r6, #4]
1a004b56:	3701      	adds	r7, #1
1a004b58:	4444      	add	r4, r8
1a004b5a:	2b07      	cmp	r3, #7
1a004b5c:	6037      	str	r7, [r6, #0]
1a004b5e:	942a      	str	r4, [sp, #168]	; 0xa8
1a004b60:	9329      	str	r3, [sp, #164]	; 0xa4
1a004b62:	f300 82bf 	bgt.w	1a0050e4 <_vfprintf_r+0x1184>
1a004b66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a004b68:	f106 0310 	add.w	r3, r6, #16
1a004b6c:	3202      	adds	r2, #2
1a004b6e:	465e      	mov	r6, fp
1a004b70:	920a      	str	r2, [sp, #40]	; 0x28
1a004b72:	469b      	mov	fp, r3
1a004b74:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a004b76:	6072      	str	r2, [r6, #4]
1a004b78:	4414      	add	r4, r2
1a004b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004b7c:	942a      	str	r4, [sp, #168]	; 0xa8
1a004b7e:	ab24      	add	r3, sp, #144	; 0x90
1a004b80:	2a07      	cmp	r2, #7
1a004b82:	9229      	str	r2, [sp, #164]	; 0xa4
1a004b84:	6033      	str	r3, [r6, #0]
1a004b86:	f77f ac80 	ble.w	1a00448a <_vfprintf_r+0x52a>
1a004b8a:	e7a1      	b.n	1a004ad0 <_vfprintf_r+0xb70>
1a004b8c:	9e02      	ldr	r6, [sp, #8]
1a004b8e:	f7ff bbf4 	b.w	1a00437a <_vfprintf_r+0x41a>
1a004b92:	aa28      	add	r2, sp, #160	; 0xa0
1a004b94:	9907      	ldr	r1, [sp, #28]
1a004b96:	9805      	ldr	r0, [sp, #20]
1a004b98:	f003 f81e 	bl	1a007bd8 <__sprint_r>
1a004b9c:	2800      	cmp	r0, #0
1a004b9e:	f47f af77 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a004ba2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004ba4:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004ba8:	e444      	b.n	1a004434 <_vfprintf_r+0x4d4>
1a004baa:	aa28      	add	r2, sp, #160	; 0xa0
1a004bac:	9907      	ldr	r1, [sp, #28]
1a004bae:	9805      	ldr	r0, [sp, #20]
1a004bb0:	f003 f812 	bl	1a007bd8 <__sprint_r>
1a004bb4:	2800      	cmp	r0, #0
1a004bb6:	f47f af6b 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a004bba:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004bbc:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004bc0:	e448      	b.n	1a004454 <_vfprintf_r+0x4f4>
1a004bc2:	46b1      	mov	r9, r6
1a004bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
1a004bc6:	b111      	cbz	r1, 1a004bce <_vfprintf_r+0xc6e>
1a004bc8:	9805      	ldr	r0, [sp, #20]
1a004bca:	f7fe fbad 	bl	1a003328 <_free_r>
1a004bce:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a004bd2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a004bd6:	07d4      	lsls	r4, r2, #31
1a004bd8:	d402      	bmi.n	1a004be0 <_vfprintf_r+0xc80>
1a004bda:	0598      	lsls	r0, r3, #22
1a004bdc:	f140 82db 	bpl.w	1a005196 <_vfprintf_r+0x1236>
1a004be0:	0659      	lsls	r1, r3, #25
1a004be2:	f100 8640 	bmi.w	1a005866 <_vfprintf_r+0x1906>
1a004be6:	9804      	ldr	r0, [sp, #16]
1a004be8:	b055      	add	sp, #340	; 0x154
1a004bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004bee:	bf00      	nop
1a004bf0:	1a0083ac 	.word	0x1a0083ac
1a004bf4:	1a0083c0 	.word	0x1a0083c0
1a004bf8:	2d10      	cmp	r5, #16
1a004bfa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004bfc:	dd21      	ble.n	1a004c42 <_vfprintf_r+0xce2>
1a004bfe:	2610      	movs	r6, #16
1a004c00:	9f05      	ldr	r7, [sp, #20]
1a004c02:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a004c06:	e004      	b.n	1a004c12 <_vfprintf_r+0xcb2>
1a004c08:	3d10      	subs	r5, #16
1a004c0a:	2d10      	cmp	r5, #16
1a004c0c:	f10b 0b08 	add.w	fp, fp, #8
1a004c10:	dd17      	ble.n	1a004c42 <_vfprintf_r+0xce2>
1a004c12:	3301      	adds	r3, #1
1a004c14:	4ab3      	ldr	r2, [pc, #716]	; (1a004ee4 <_vfprintf_r+0xf84>)
1a004c16:	3410      	adds	r4, #16
1a004c18:	2b07      	cmp	r3, #7
1a004c1a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004c1e:	e9cb 2600 	strd	r2, r6, [fp]
1a004c22:	ddf1      	ble.n	1a004c08 <_vfprintf_r+0xca8>
1a004c24:	aa28      	add	r2, sp, #160	; 0xa0
1a004c26:	4641      	mov	r1, r8
1a004c28:	4638      	mov	r0, r7
1a004c2a:	f002 ffd5 	bl	1a007bd8 <__sprint_r>
1a004c2e:	2800      	cmp	r0, #0
1a004c30:	f040 82c7 	bne.w	1a0051c2 <_vfprintf_r+0x1262>
1a004c34:	3d10      	subs	r5, #16
1a004c36:	2d10      	cmp	r5, #16
1a004c38:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a004c3c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004c40:	dce7      	bgt.n	1a004c12 <_vfprintf_r+0xcb2>
1a004c42:	3301      	adds	r3, #1
1a004c44:	4aa7      	ldr	r2, [pc, #668]	; (1a004ee4 <_vfprintf_r+0xf84>)
1a004c46:	442c      	add	r4, r5
1a004c48:	2b07      	cmp	r3, #7
1a004c4a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004c4e:	e9cb 2500 	strd	r2, r5, [fp]
1a004c52:	f77f ac23 	ble.w	1a00449c <_vfprintf_r+0x53c>
1a004c56:	aa28      	add	r2, sp, #160	; 0xa0
1a004c58:	9907      	ldr	r1, [sp, #28]
1a004c5a:	9805      	ldr	r0, [sp, #20]
1a004c5c:	f002 ffbc 	bl	1a007bd8 <__sprint_r>
1a004c60:	2800      	cmp	r0, #0
1a004c62:	f47f af15 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a004c66:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004c68:	e418      	b.n	1a00449c <_vfprintf_r+0x53c>
1a004c6a:	2b01      	cmp	r3, #1
1a004c6c:	f000 8423 	beq.w	1a0054b6 <_vfprintf_r+0x1556>
1a004c70:	2b02      	cmp	r3, #2
1a004c72:	9e02      	ldr	r6, [sp, #8]
1a004c74:	f47f ab87 	bne.w	1a004386 <_vfprintf_r+0x426>
1a004c78:	9814      	ldr	r0, [sp, #80]	; 0x50
1a004c7a:	af54      	add	r7, sp, #336	; 0x150
1a004c7c:	0923      	lsrs	r3, r4, #4
1a004c7e:	f004 010f 	and.w	r1, r4, #15
1a004c82:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a004c86:	092a      	lsrs	r2, r5, #4
1a004c88:	461c      	mov	r4, r3
1a004c8a:	4615      	mov	r5, r2
1a004c8c:	5c43      	ldrb	r3, [r0, r1]
1a004c8e:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a004c92:	ea54 0305 	orrs.w	r3, r4, r5
1a004c96:	d1f1      	bne.n	1a004c7c <_vfprintf_r+0xd1c>
1a004c98:	ab54      	add	r3, sp, #336	; 0x150
1a004c9a:	9602      	str	r6, [sp, #8]
1a004c9c:	1bde      	subs	r6, r3, r7
1a004c9e:	e5c1      	b.n	1a004824 <_vfprintf_r+0x8c4>
1a004ca0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004ca2:	2b00      	cmp	r3, #0
1a004ca4:	f340 80df 	ble.w	1a004e66 <_vfprintf_r+0xf06>
1a004ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004caa:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004cac:	4293      	cmp	r3, r2
1a004cae:	bfa8      	it	ge
1a004cb0:	4613      	movge	r3, r2
1a004cb2:	2b00      	cmp	r3, #0
1a004cb4:	461d      	mov	r5, r3
1a004cb6:	dd0d      	ble.n	1a004cd4 <_vfprintf_r+0xd74>
1a004cb8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004cba:	f8cb 7000 	str.w	r7, [fp]
1a004cbe:	3301      	adds	r3, #1
1a004cc0:	442c      	add	r4, r5
1a004cc2:	2b07      	cmp	r3, #7
1a004cc4:	942a      	str	r4, [sp, #168]	; 0xa8
1a004cc6:	f8cb 5004 	str.w	r5, [fp, #4]
1a004cca:	9329      	str	r3, [sp, #164]	; 0xa4
1a004ccc:	f300 84fe 	bgt.w	1a0056cc <_vfprintf_r+0x176c>
1a004cd0:	f10b 0b08 	add.w	fp, fp, #8
1a004cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004cd6:	2d00      	cmp	r5, #0
1a004cd8:	bfa8      	it	ge
1a004cda:	1b5b      	subge	r3, r3, r5
1a004cdc:	2b00      	cmp	r3, #0
1a004cde:	461d      	mov	r5, r3
1a004ce0:	f300 8290 	bgt.w	1a005204 <_vfprintf_r+0x12a4>
1a004ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004ce6:	443b      	add	r3, r7
1a004ce8:	4699      	mov	r9, r3
1a004cea:	9b02      	ldr	r3, [sp, #8]
1a004cec:	0558      	lsls	r0, r3, #21
1a004cee:	f100 8413 	bmi.w	1a005518 <_vfprintf_r+0x15b8>
1a004cf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004cf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004cf6:	4293      	cmp	r3, r2
1a004cf8:	db03      	blt.n	1a004d02 <_vfprintf_r+0xda2>
1a004cfa:	9a02      	ldr	r2, [sp, #8]
1a004cfc:	07d1      	lsls	r1, r2, #31
1a004cfe:	f140 82f7 	bpl.w	1a0052f0 <_vfprintf_r+0x1390>
1a004d02:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004d04:	9915      	ldr	r1, [sp, #84]	; 0x54
1a004d06:	f8cb 1000 	str.w	r1, [fp]
1a004d0a:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a004d0c:	f8cb 1004 	str.w	r1, [fp, #4]
1a004d10:	3201      	adds	r2, #1
1a004d12:	440c      	add	r4, r1
1a004d14:	2a07      	cmp	r2, #7
1a004d16:	942a      	str	r4, [sp, #168]	; 0xa8
1a004d18:	9229      	str	r2, [sp, #164]	; 0xa4
1a004d1a:	f300 8523 	bgt.w	1a005764 <_vfprintf_r+0x1804>
1a004d1e:	f10b 0b08 	add.w	fp, fp, #8
1a004d22:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004d24:	18bd      	adds	r5, r7, r2
1a004d26:	eba5 0509 	sub.w	r5, r5, r9
1a004d2a:	1ad3      	subs	r3, r2, r3
1a004d2c:	429d      	cmp	r5, r3
1a004d2e:	bfa8      	it	ge
1a004d30:	461d      	movge	r5, r3
1a004d32:	2d00      	cmp	r5, #0
1a004d34:	dd0d      	ble.n	1a004d52 <_vfprintf_r+0xdf2>
1a004d36:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004d38:	f8cb 9000 	str.w	r9, [fp]
1a004d3c:	3201      	adds	r2, #1
1a004d3e:	442c      	add	r4, r5
1a004d40:	2a07      	cmp	r2, #7
1a004d42:	942a      	str	r4, [sp, #168]	; 0xa8
1a004d44:	f8cb 5004 	str.w	r5, [fp, #4]
1a004d48:	9229      	str	r2, [sp, #164]	; 0xa4
1a004d4a:	f300 8546 	bgt.w	1a0057da <_vfprintf_r+0x187a>
1a004d4e:	f10b 0b08 	add.w	fp, fp, #8
1a004d52:	2d00      	cmp	r5, #0
1a004d54:	bfac      	ite	ge
1a004d56:	1b5d      	subge	r5, r3, r5
1a004d58:	461d      	movlt	r5, r3
1a004d5a:	2d00      	cmp	r5, #0
1a004d5c:	f77f ab95 	ble.w	1a00448a <_vfprintf_r+0x52a>
1a004d60:	2d10      	cmp	r5, #16
1a004d62:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004d64:	4b60      	ldr	r3, [pc, #384]	; (1a004ee8 <_vfprintf_r+0xf88>)
1a004d66:	f340 823b 	ble.w	1a0051e0 <_vfprintf_r+0x1280>
1a004d6a:	2610      	movs	r6, #16
1a004d6c:	9f05      	ldr	r7, [sp, #20]
1a004d6e:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a004d72:	4699      	mov	r9, r3
1a004d74:	e005      	b.n	1a004d82 <_vfprintf_r+0xe22>
1a004d76:	f10b 0b08 	add.w	fp, fp, #8
1a004d7a:	3d10      	subs	r5, #16
1a004d7c:	2d10      	cmp	r5, #16
1a004d7e:	f340 822e 	ble.w	1a0051de <_vfprintf_r+0x127e>
1a004d82:	3201      	adds	r2, #1
1a004d84:	3410      	adds	r4, #16
1a004d86:	2a07      	cmp	r2, #7
1a004d88:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004d8c:	e9cb 9600 	strd	r9, r6, [fp]
1a004d90:	ddf1      	ble.n	1a004d76 <_vfprintf_r+0xe16>
1a004d92:	aa28      	add	r2, sp, #160	; 0xa0
1a004d94:	4641      	mov	r1, r8
1a004d96:	4638      	mov	r0, r7
1a004d98:	f002 ff1e 	bl	1a007bd8 <__sprint_r>
1a004d9c:	2800      	cmp	r0, #0
1a004d9e:	f040 8210 	bne.w	1a0051c2 <_vfprintf_r+0x1262>
1a004da2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a004da6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004daa:	e7e6      	b.n	1a004d7a <_vfprintf_r+0xe1a>
1a004dac:	9a02      	ldr	r2, [sp, #8]
1a004dae:	07d2      	lsls	r2, r2, #31
1a004db0:	f53f aea4 	bmi.w	1a004afc <_vfprintf_r+0xb9c>
1a004db4:	2201      	movs	r2, #1
1a004db6:	2d07      	cmp	r5, #7
1a004db8:	f8cb 7000 	str.w	r7, [fp]
1a004dbc:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a004dc0:	f8cb 2004 	str.w	r2, [fp, #4]
1a004dc4:	f300 818e 	bgt.w	1a0050e4 <_vfprintf_r+0x1184>
1a004dc8:	3302      	adds	r3, #2
1a004dca:	930a      	str	r3, [sp, #40]	; 0x28
1a004dcc:	f10b 0b10 	add.w	fp, fp, #16
1a004dd0:	e6d0      	b.n	1a004b74 <_vfprintf_r+0xc14>
1a004dd2:	f1b8 0f00 	cmp.w	r8, #0
1a004dd6:	f77f aecd 	ble.w	1a004b74 <_vfprintf_r+0xc14>
1a004dda:	f1b8 0f10 	cmp.w	r8, #16
1a004dde:	4b42      	ldr	r3, [pc, #264]	; (1a004ee8 <_vfprintf_r+0xf88>)
1a004de0:	f340 8635 	ble.w	1a005a4e <_vfprintf_r+0x1aee>
1a004de4:	461a      	mov	r2, r3
1a004de6:	464d      	mov	r5, r9
1a004de8:	4623      	mov	r3, r4
1a004dea:	2710      	movs	r7, #16
1a004dec:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a004df0:	f8dd 9014 	ldr.w	r9, [sp, #20]
1a004df4:	4614      	mov	r4, r2
1a004df6:	e007      	b.n	1a004e08 <_vfprintf_r+0xea8>
1a004df8:	3608      	adds	r6, #8
1a004dfa:	f1a8 0810 	sub.w	r8, r8, #16
1a004dfe:	f1b8 0f10 	cmp.w	r8, #16
1a004e02:	f340 815e 	ble.w	1a0050c2 <_vfprintf_r+0x1162>
1a004e06:	3501      	adds	r5, #1
1a004e08:	3310      	adds	r3, #16
1a004e0a:	2d07      	cmp	r5, #7
1a004e0c:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a004e10:	e9c6 4700 	strd	r4, r7, [r6]
1a004e14:	ddf0      	ble.n	1a004df8 <_vfprintf_r+0xe98>
1a004e16:	aa28      	add	r2, sp, #160	; 0xa0
1a004e18:	4659      	mov	r1, fp
1a004e1a:	4648      	mov	r0, r9
1a004e1c:	f002 fedc 	bl	1a007bd8 <__sprint_r>
1a004e20:	2800      	cmp	r0, #0
1a004e22:	f040 821d 	bne.w	1a005260 <_vfprintf_r+0x1300>
1a004e26:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a004e2a:	ae2b      	add	r6, sp, #172	; 0xac
1a004e2c:	e7e5      	b.n	1a004dfa <_vfprintf_r+0xe9a>
1a004e2e:	aa28      	add	r2, sp, #160	; 0xa0
1a004e30:	9907      	ldr	r1, [sp, #28]
1a004e32:	9805      	ldr	r0, [sp, #20]
1a004e34:	f002 fed0 	bl	1a007bd8 <__sprint_r>
1a004e38:	2800      	cmp	r0, #0
1a004e3a:	f47f ae29 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a004e3e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004e40:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004e44:	f7ff bb0f 	b.w	1a004466 <_vfprintf_r+0x506>
1a004e48:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a004e4c:	f7fe fbb4 	bl	1a0035b8 <__retarget_lock_acquire_recursive>
1a004e50:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a004e54:	b293      	uxth	r3, r2
1a004e56:	f7ff b8a3 	b.w	1a003fa0 <_vfprintf_r+0x40>
1a004e5a:	9b02      	ldr	r3, [sp, #8]
1a004e5c:	07dd      	lsls	r5, r3, #31
1a004e5e:	f53f ad57 	bmi.w	1a004910 <_vfprintf_r+0x9b0>
1a004e62:	f7ff bb12 	b.w	1a00448a <_vfprintf_r+0x52a>
1a004e66:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004e68:	4920      	ldr	r1, [pc, #128]	; (1a004eec <_vfprintf_r+0xf8c>)
1a004e6a:	f8cb 1000 	str.w	r1, [fp]
1a004e6e:	3201      	adds	r2, #1
1a004e70:	3401      	adds	r4, #1
1a004e72:	2101      	movs	r1, #1
1a004e74:	2a07      	cmp	r2, #7
1a004e76:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004e7a:	f8cb 1004 	str.w	r1, [fp, #4]
1a004e7e:	f300 8409 	bgt.w	1a005694 <_vfprintf_r+0x1734>
1a004e82:	f10b 0b08 	add.w	fp, fp, #8
1a004e86:	2b00      	cmp	r3, #0
1a004e88:	f47f ae05 	bne.w	1a004a96 <_vfprintf_r+0xb36>
1a004e8c:	9b02      	ldr	r3, [sp, #8]
1a004e8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004e90:	f003 0301 	and.w	r3, r3, #1
1a004e94:	4313      	orrs	r3, r2
1a004e96:	f43f aaf8 	beq.w	1a00448a <_vfprintf_r+0x52a>
1a004e9a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004e9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a004e9e:	f8cb 3000 	str.w	r3, [fp]
1a004ea2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004ea4:	f8cb 3004 	str.w	r3, [fp, #4]
1a004ea8:	3201      	adds	r2, #1
1a004eaa:	441c      	add	r4, r3
1a004eac:	2a07      	cmp	r2, #7
1a004eae:	942a      	str	r4, [sp, #168]	; 0xa8
1a004eb0:	9229      	str	r2, [sp, #164]	; 0xa4
1a004eb2:	f300 82df 	bgt.w	1a005474 <_vfprintf_r+0x1514>
1a004eb6:	f10b 0b08 	add.w	fp, fp, #8
1a004eba:	e5ff      	b.n	1a004abc <_vfprintf_r+0xb5c>
1a004ebc:	af54      	add	r7, sp, #336	; 0x150
1a004ebe:	e4b1      	b.n	1a004824 <_vfprintf_r+0x8c4>
1a004ec0:	9b02      	ldr	r3, [sp, #8]
1a004ec2:	0598      	lsls	r0, r3, #22
1a004ec4:	f100 822d 	bmi.w	1a005322 <_vfprintf_r+0x13c2>
1a004ec8:	2500      	movs	r5, #0
1a004eca:	f7ff b987 	b.w	1a0041dc <_vfprintf_r+0x27c>
1a004ece:	9904      	ldr	r1, [sp, #16]
1a004ed0:	6812      	ldr	r2, [r2, #0]
1a004ed2:	9308      	str	r3, [sp, #32]
1a004ed4:	17cd      	asrs	r5, r1, #31
1a004ed6:	4608      	mov	r0, r1
1a004ed8:	4629      	mov	r1, r5
1a004eda:	e9c2 0100 	strd	r0, r1, [r2]
1a004ede:	4657      	mov	r7, sl
1a004ee0:	f7ff baf2 	b.w	1a0044c8 <_vfprintf_r+0x568>
1a004ee4:	1a0083b0 	.word	0x1a0083b0
1a004ee8:	1a0083c0 	.word	0x1a0083c0
1a004eec:	1a0083ac 	.word	0x1a0083ac
1a004ef0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004ef4:	4602      	mov	r2, r0
1a004ef6:	460b      	mov	r3, r1
1a004ef8:	f002 ffc6 	bl	1a007e88 <__aeabi_dcmpun>
1a004efc:	2800      	cmp	r0, #0
1a004efe:	f040 853a 	bne.w	1a005976 <_vfprintf_r+0x1a16>
1a004f02:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a004f06:	f000 84d0 	beq.w	1a0058aa <_vfprintf_r+0x194a>
1a004f0a:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a004f0e:	f000 820c 	beq.w	1a00532a <_vfprintf_r+0x13ca>
1a004f12:	f028 0320 	bic.w	r3, r8, #32
1a004f16:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a004f1a:	9303      	str	r3, [sp, #12]
1a004f1c:	f000 8500 	beq.w	1a005920 <_vfprintf_r+0x19c0>
1a004f20:	2b47      	cmp	r3, #71	; 0x47
1a004f22:	d104      	bne.n	1a004f2e <_vfprintf_r+0xfce>
1a004f24:	f1b9 0f00 	cmp.w	r9, #0
1a004f28:	bf08      	it	eq
1a004f2a:	f04f 0901 	moveq.w	r9, #1
1a004f2e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a004f32:	9902      	ldr	r1, [sp, #8]
1a004f34:	2d00      	cmp	r5, #0
1a004f36:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a004f3a:	f2c0 8395 	blt.w	1a005668 <_vfprintf_r+0x1708>
1a004f3e:	2300      	movs	r3, #0
1a004f40:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
1a004f44:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a004f48:	931e      	str	r3, [sp, #120]	; 0x78
1a004f4a:	9202      	str	r2, [sp, #8]
1a004f4c:	9b03      	ldr	r3, [sp, #12]
1a004f4e:	2b46      	cmp	r3, #70	; 0x46
1a004f50:	f000 83df 	beq.w	1a005712 <_vfprintf_r+0x17b2>
1a004f54:	2b45      	cmp	r3, #69	; 0x45
1a004f56:	f000 84d2 	beq.w	1a0058fe <_vfprintf_r+0x199e>
1a004f5a:	aa26      	add	r2, sp, #152	; 0x98
1a004f5c:	ab23      	add	r3, sp, #140	; 0x8c
1a004f5e:	e9cd 3200 	strd	r3, r2, [sp]
1a004f62:	2102      	movs	r1, #2
1a004f64:	ab22      	add	r3, sp, #136	; 0x88
1a004f66:	464a      	mov	r2, r9
1a004f68:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004f6c:	9805      	ldr	r0, [sp, #20]
1a004f6e:	f000 fedf 	bl	1a005d30 <_dtoa_r>
1a004f72:	9b03      	ldr	r3, [sp, #12]
1a004f74:	2b47      	cmp	r3, #71	; 0x47
1a004f76:	4607      	mov	r7, r0
1a004f78:	f040 858d 	bne.w	1a005a96 <_vfprintf_r+0x1b36>
1a004f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004f7e:	07db      	lsls	r3, r3, #31
1a004f80:	f100 843b 	bmi.w	1a0057fa <_vfprintf_r+0x189a>
1a004f84:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a004f86:	1bf3      	subs	r3, r6, r7
1a004f88:	9312      	str	r3, [sp, #72]	; 0x48
1a004f8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004f8c:	930e      	str	r3, [sp, #56]	; 0x38
1a004f8e:	9b03      	ldr	r3, [sp, #12]
1a004f90:	2b47      	cmp	r3, #71	; 0x47
1a004f92:	f000 8293 	beq.w	1a0054bc <_vfprintf_r+0x155c>
1a004f96:	9b03      	ldr	r3, [sp, #12]
1a004f98:	2b46      	cmp	r3, #70	; 0x46
1a004f9a:	f000 83fd 	beq.w	1a005798 <_vfprintf_r+0x1838>
1a004f9e:	9903      	ldr	r1, [sp, #12]
1a004fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004fa2:	2941      	cmp	r1, #65	; 0x41
1a004fa4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a004fa8:	fa5f f388 	uxtb.w	r3, r8
1a004fac:	bf03      	ittte	eq
1a004fae:	330f      	addeq	r3, #15
1a004fb0:	b2db      	uxtbeq	r3, r3
1a004fb2:	2101      	moveq	r1, #1
1a004fb4:	2100      	movne	r1, #0
1a004fb6:	2a00      	cmp	r2, #0
1a004fb8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a004fbc:	bfb8      	it	lt
1a004fbe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a004fc0:	9222      	str	r2, [sp, #136]	; 0x88
1a004fc2:	bfb6      	itet	lt
1a004fc4:	f1c3 0201 	rsblt	r2, r3, #1
1a004fc8:	232b      	movge	r3, #43	; 0x2b
1a004fca:	232d      	movlt	r3, #45	; 0x2d
1a004fcc:	2a09      	cmp	r2, #9
1a004fce:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a004fd2:	f340 84c1 	ble.w	1a005958 <_vfprintf_r+0x19f8>
1a004fd6:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a004fda:	4620      	mov	r0, r4
1a004fdc:	4dbe      	ldr	r5, [pc, #760]	; (1a0052d8 <_vfprintf_r+0x1378>)
1a004fde:	e001      	b.n	1a004fe4 <_vfprintf_r+0x1084>
1a004fe0:	4608      	mov	r0, r1
1a004fe2:	461a      	mov	r2, r3
1a004fe4:	fb85 3102 	smull	r3, r1, r5, r2
1a004fe8:	17d3      	asrs	r3, r2, #31
1a004fea:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a004fee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a004ff2:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a004ff6:	3130      	adds	r1, #48	; 0x30
1a004ff8:	2a63      	cmp	r2, #99	; 0x63
1a004ffa:	f800 1c01 	strb.w	r1, [r0, #-1]
1a004ffe:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a005002:	dced      	bgt.n	1a004fe0 <_vfprintf_r+0x1080>
1a005004:	3330      	adds	r3, #48	; 0x30
1a005006:	1e82      	subs	r2, r0, #2
1a005008:	b2db      	uxtb	r3, r3
1a00500a:	4294      	cmp	r4, r2
1a00500c:	f801 3c01 	strb.w	r3, [r1, #-1]
1a005010:	f240 8544 	bls.w	1a005a9c <_vfprintf_r+0x1b3c>
1a005014:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a005018:	e001      	b.n	1a00501e <_vfprintf_r+0x10be>
1a00501a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00501e:	f802 3b01 	strb.w	r3, [r2], #1
1a005022:	42a1      	cmp	r1, r4
1a005024:	d1f9      	bne.n	1a00501a <_vfprintf_r+0x10ba>
1a005026:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a00502a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a00502e:	1a1b      	subs	r3, r3, r0
1a005030:	4413      	add	r3, r2
1a005032:	aa24      	add	r2, sp, #144	; 0x90
1a005034:	1a9b      	subs	r3, r3, r2
1a005036:	9316      	str	r3, [sp, #88]	; 0x58
1a005038:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00503a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a00503c:	2b01      	cmp	r3, #1
1a00503e:	eb03 0602 	add.w	r6, r3, r2
1a005042:	f340 84ee 	ble.w	1a005a22 <_vfprintf_r+0x1ac2>
1a005046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a005048:	441e      	add	r6, r3
1a00504a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00504c:	2200      	movs	r2, #0
1a00504e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a005052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a005056:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a00505a:	9302      	str	r3, [sp, #8]
1a00505c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005060:	920c      	str	r2, [sp, #48]	; 0x30
1a005062:	9303      	str	r3, [sp, #12]
1a005064:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a005066:	2b00      	cmp	r3, #0
1a005068:	f040 824f 	bne.w	1a00550a <_vfprintf_r+0x15aa>
1a00506c:	4699      	mov	r9, r3
1a00506e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a005072:	f7ff b94a 	b.w	1a00430a <_vfprintf_r+0x3aa>
1a005076:	9b08      	ldr	r3, [sp, #32]
1a005078:	1d1a      	adds	r2, r3, #4
1a00507a:	9b02      	ldr	r3, [sp, #8]
1a00507c:	06d9      	lsls	r1, r3, #27
1a00507e:	f100 8504 	bmi.w	1a005a8a <_vfprintf_r+0x1b2a>
1a005082:	9e02      	ldr	r6, [sp, #8]
1a005084:	4633      	mov	r3, r6
1a005086:	065b      	lsls	r3, r3, #25
1a005088:	f140 80ec 	bpl.w	1a005264 <_vfprintf_r+0x1304>
1a00508c:	9b08      	ldr	r3, [sp, #32]
1a00508e:	9208      	str	r2, [sp, #32]
1a005090:	f9b3 4000 	ldrsh.w	r4, [r3]
1a005094:	17e5      	asrs	r5, r4, #31
1a005096:	4622      	mov	r2, r4
1a005098:	462b      	mov	r3, r5
1a00509a:	f7ff b8eb 	b.w	1a004274 <_vfprintf_r+0x314>
1a00509e:	4252      	negs	r2, r2
1a0050a0:	9206      	str	r2, [sp, #24]
1a0050a2:	9308      	str	r3, [sp, #32]
1a0050a4:	f7ff b8af 	b.w	1a004206 <_vfprintf_r+0x2a6>
1a0050a8:	aa28      	add	r2, sp, #160	; 0xa0
1a0050aa:	9907      	ldr	r1, [sp, #28]
1a0050ac:	9805      	ldr	r0, [sp, #20]
1a0050ae:	f002 fd93 	bl	1a007bd8 <__sprint_r>
1a0050b2:	2800      	cmp	r0, #0
1a0050b4:	f47f acec 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a0050b8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0050ba:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0050be:	f7ff b9cd 	b.w	1a00445c <_vfprintf_r+0x4fc>
1a0050c2:	4622      	mov	r2, r4
1a0050c4:	461c      	mov	r4, r3
1a0050c6:	4613      	mov	r3, r2
1a0050c8:	462a      	mov	r2, r5
1a0050ca:	3201      	adds	r2, #1
1a0050cc:	920a      	str	r2, [sp, #40]	; 0x28
1a0050ce:	f106 0208 	add.w	r2, r6, #8
1a0050d2:	e9c6 3800 	strd	r3, r8, [r6]
1a0050d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0050d8:	9329      	str	r3, [sp, #164]	; 0xa4
1a0050da:	4444      	add	r4, r8
1a0050dc:	2b07      	cmp	r3, #7
1a0050de:	942a      	str	r4, [sp, #168]	; 0xa8
1a0050e0:	f340 8100 	ble.w	1a0052e4 <_vfprintf_r+0x1384>
1a0050e4:	aa28      	add	r2, sp, #160	; 0xa0
1a0050e6:	9907      	ldr	r1, [sp, #28]
1a0050e8:	9805      	ldr	r0, [sp, #20]
1a0050ea:	f002 fd75 	bl	1a007bd8 <__sprint_r>
1a0050ee:	2800      	cmp	r0, #0
1a0050f0:	f47f acce 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a0050f4:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a0050f8:	3301      	adds	r3, #1
1a0050fa:	930a      	str	r3, [sp, #40]	; 0x28
1a0050fc:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a005100:	ae2b      	add	r6, sp, #172	; 0xac
1a005102:	e537      	b.n	1a004b74 <_vfprintf_r+0xc14>
1a005104:	aa28      	add	r2, sp, #160	; 0xa0
1a005106:	9907      	ldr	r1, [sp, #28]
1a005108:	9805      	ldr	r0, [sp, #20]
1a00510a:	f002 fd65 	bl	1a007bd8 <__sprint_r>
1a00510e:	2800      	cmp	r0, #0
1a005110:	f47f acbe 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a005114:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005116:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00511a:	e409      	b.n	1a004930 <_vfprintf_r+0x9d0>
1a00511c:	f043 0320 	orr.w	r3, r3, #32
1a005120:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a005124:	9302      	str	r3, [sp, #8]
1a005126:	f10a 0a01 	add.w	sl, sl, #1
1a00512a:	f7fe bf9d 	b.w	1a004068 <_vfprintf_r+0x108>
1a00512e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a005132:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a005136:	9302      	str	r3, [sp, #8]
1a005138:	f10a 0a01 	add.w	sl, sl, #1
1a00513c:	f7fe bf94 	b.w	1a004068 <_vfprintf_r+0x108>
1a005140:	464e      	mov	r6, r9
1a005142:	2e06      	cmp	r6, #6
1a005144:	bf28      	it	cs
1a005146:	2606      	movcs	r6, #6
1a005148:	46b9      	mov	r9, r7
1a00514a:	970c      	str	r7, [sp, #48]	; 0x30
1a00514c:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
1a005150:	9709      	str	r7, [sp, #36]	; 0x24
1a005152:	463a      	mov	r2, r7
1a005154:	9603      	str	r6, [sp, #12]
1a005156:	9408      	str	r4, [sp, #32]
1a005158:	4f60      	ldr	r7, [pc, #384]	; (1a0052dc <_vfprintf_r+0x137c>)
1a00515a:	f7ff b8d6 	b.w	1a00430a <_vfprintf_r+0x3aa>
1a00515e:	463c      	mov	r4, r7
1a005160:	f7fe bf75 	b.w	1a00404e <_vfprintf_r+0xee>
1a005164:	aa28      	add	r2, sp, #160	; 0xa0
1a005166:	9907      	ldr	r1, [sp, #28]
1a005168:	9805      	ldr	r0, [sp, #20]
1a00516a:	f002 fd35 	bl	1a007bd8 <__sprint_r>
1a00516e:	2800      	cmp	r0, #0
1a005170:	f47f ac8e 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a005174:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a005178:	ae2b      	add	r6, sp, #172	; 0xac
1a00517a:	e4c9      	b.n	1a004b10 <_vfprintf_r+0xbb0>
1a00517c:	aa28      	add	r2, sp, #160	; 0xa0
1a00517e:	9907      	ldr	r1, [sp, #28]
1a005180:	9805      	ldr	r0, [sp, #20]
1a005182:	f002 fd29 	bl	1a007bd8 <__sprint_r>
1a005186:	2800      	cmp	r0, #0
1a005188:	f47f ac82 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a00518c:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a005190:	ae2b      	add	r6, sp, #172	; 0xac
1a005192:	930b      	str	r3, [sp, #44]	; 0x2c
1a005194:	e4c9      	b.n	1a004b2a <_vfprintf_r+0xbca>
1a005196:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a00519a:	f7fe fa0f 	bl	1a0035bc <__retarget_lock_release_recursive>
1a00519e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0051a2:	e51d      	b.n	1a004be0 <_vfprintf_r+0xc80>
1a0051a4:	aa28      	add	r2, sp, #160	; 0xa0
1a0051a6:	9907      	ldr	r1, [sp, #28]
1a0051a8:	9805      	ldr	r0, [sp, #20]
1a0051aa:	f002 fd15 	bl	1a007bd8 <__sprint_r>
1a0051ae:	2800      	cmp	r0, #0
1a0051b0:	f47f ac6e 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a0051b4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0051b8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0051ba:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0051be:	f7ff b929 	b.w	1a004414 <_vfprintf_r+0x4b4>
1a0051c2:	46c1      	mov	r9, r8
1a0051c4:	e4fe      	b.n	1a004bc4 <_vfprintf_r+0xc64>
1a0051c6:	aa28      	add	r2, sp, #160	; 0xa0
1a0051c8:	9907      	ldr	r1, [sp, #28]
1a0051ca:	9805      	ldr	r0, [sp, #20]
1a0051cc:	f002 fd04 	bl	1a007bd8 <__sprint_r>
1a0051d0:	2800      	cmp	r0, #0
1a0051d2:	f47f ac5d 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a0051d6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0051da:	f7ff bb93 	b.w	1a004904 <_vfprintf_r+0x9a4>
1a0051de:	464b      	mov	r3, r9
1a0051e0:	3201      	adds	r2, #1
1a0051e2:	442c      	add	r4, r5
1a0051e4:	2a07      	cmp	r2, #7
1a0051e6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0051ea:	e9cb 3500 	strd	r3, r5, [fp]
1a0051ee:	f77f a94a 	ble.w	1a004486 <_vfprintf_r+0x526>
1a0051f2:	e46d      	b.n	1a004ad0 <_vfprintf_r+0xb70>
1a0051f4:	9a08      	ldr	r2, [sp, #32]
1a0051f6:	6812      	ldr	r2, [r2, #0]
1a0051f8:	9308      	str	r3, [sp, #32]
1a0051fa:	9b04      	ldr	r3, [sp, #16]
1a0051fc:	6013      	str	r3, [r2, #0]
1a0051fe:	4657      	mov	r7, sl
1a005200:	f7ff b962 	b.w	1a0044c8 <_vfprintf_r+0x568>
1a005204:	2d10      	cmp	r5, #16
1a005206:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005208:	4b35      	ldr	r3, [pc, #212]	; (1a0052e0 <_vfprintf_r+0x1380>)
1a00520a:	dd50      	ble.n	1a0052ae <_vfprintf_r+0x134e>
1a00520c:	4619      	mov	r1, r3
1a00520e:	2610      	movs	r6, #16
1a005210:	4623      	mov	r3, r4
1a005212:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a005216:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00521a:	460c      	mov	r4, r1
1a00521c:	e004      	b.n	1a005228 <_vfprintf_r+0x12c8>
1a00521e:	f10b 0b08 	add.w	fp, fp, #8
1a005222:	3d10      	subs	r5, #16
1a005224:	2d10      	cmp	r5, #16
1a005226:	dd3f      	ble.n	1a0052a8 <_vfprintf_r+0x1348>
1a005228:	3201      	adds	r2, #1
1a00522a:	3310      	adds	r3, #16
1a00522c:	2a07      	cmp	r2, #7
1a00522e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a005232:	e9cb 4600 	strd	r4, r6, [fp]
1a005236:	ddf2      	ble.n	1a00521e <_vfprintf_r+0x12be>
1a005238:	aa28      	add	r2, sp, #160	; 0xa0
1a00523a:	4649      	mov	r1, r9
1a00523c:	4640      	mov	r0, r8
1a00523e:	f002 fccb 	bl	1a007bd8 <__sprint_r>
1a005242:	2800      	cmp	r0, #0
1a005244:	f47f acbe 	bne.w	1a004bc4 <_vfprintf_r+0xc64>
1a005248:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a00524c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005250:	e7e7      	b.n	1a005222 <_vfprintf_r+0x12c2>
1a005252:	4638      	mov	r0, r7
1a005254:	f7fe fe14 	bl	1a003e80 <strlen>
1a005258:	46a9      	mov	r9, r5
1a00525a:	4606      	mov	r6, r0
1a00525c:	f7ff b849 	b.w	1a0042f2 <_vfprintf_r+0x392>
1a005260:	46d9      	mov	r9, fp
1a005262:	e4af      	b.n	1a004bc4 <_vfprintf_r+0xc64>
1a005264:	9e02      	ldr	r6, [sp, #8]
1a005266:	9b08      	ldr	r3, [sp, #32]
1a005268:	f416 7f00 	tst.w	r6, #512	; 0x200
1a00526c:	d051      	beq.n	1a005312 <_vfprintf_r+0x13b2>
1a00526e:	f993 4000 	ldrsb.w	r4, [r3]
1a005272:	9208      	str	r2, [sp, #32]
1a005274:	17e5      	asrs	r5, r4, #31
1a005276:	4622      	mov	r2, r4
1a005278:	462b      	mov	r3, r5
1a00527a:	f7fe bffb 	b.w	1a004274 <_vfprintf_r+0x314>
1a00527e:	9e02      	ldr	r6, [sp, #8]
1a005280:	05b7      	lsls	r7, r6, #22
1a005282:	bf47      	ittee	mi
1a005284:	9208      	strmi	r2, [sp, #32]
1a005286:	b2e4      	uxtbmi	r4, r4
1a005288:	9e02      	ldrpl	r6, [sp, #8]
1a00528a:	9208      	strpl	r2, [sp, #32]
1a00528c:	2500      	movs	r5, #0
1a00528e:	f7ff baae 	b.w	1a0047ee <_vfprintf_r+0x88e>
1a005292:	9e02      	ldr	r6, [sp, #8]
1a005294:	9208      	str	r2, [sp, #32]
1a005296:	4633      	mov	r3, r6
1a005298:	059b      	lsls	r3, r3, #22
1a00529a:	bf4c      	ite	mi
1a00529c:	b2e4      	uxtbmi	r4, r4
1a00529e:	9e02      	ldrpl	r6, [sp, #8]
1a0052a0:	2500      	movs	r5, #0
1a0052a2:	2301      	movs	r3, #1
1a0052a4:	f7ff b987 	b.w	1a0045b6 <_vfprintf_r+0x656>
1a0052a8:	4621      	mov	r1, r4
1a0052aa:	461c      	mov	r4, r3
1a0052ac:	460b      	mov	r3, r1
1a0052ae:	3201      	adds	r2, #1
1a0052b0:	442c      	add	r4, r5
1a0052b2:	2a07      	cmp	r2, #7
1a0052b4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0052b8:	e9cb 3500 	strd	r3, r5, [fp]
1a0052bc:	f300 80ef 	bgt.w	1a00549e <_vfprintf_r+0x153e>
1a0052c0:	f10b 0b08 	add.w	fp, fp, #8
1a0052c4:	e50e      	b.n	1a004ce4 <_vfprintf_r+0xd84>
1a0052c6:	9805      	ldr	r0, [sp, #20]
1a0052c8:	aa28      	add	r2, sp, #160	; 0xa0
1a0052ca:	4649      	mov	r1, r9
1a0052cc:	f002 fc84 	bl	1a007bd8 <__sprint_r>
1a0052d0:	2800      	cmp	r0, #0
1a0052d2:	f43f a903 	beq.w	1a0044dc <_vfprintf_r+0x57c>
1a0052d6:	e47a      	b.n	1a004bce <_vfprintf_r+0xc6e>
1a0052d8:	66666667 	.word	0x66666667
1a0052dc:	1a0083a4 	.word	0x1a0083a4
1a0052e0:	1a0083c0 	.word	0x1a0083c0
1a0052e4:	3301      	adds	r3, #1
1a0052e6:	930a      	str	r3, [sp, #40]	; 0x28
1a0052e8:	f102 0b08 	add.w	fp, r2, #8
1a0052ec:	4616      	mov	r6, r2
1a0052ee:	e441      	b.n	1a004b74 <_vfprintf_r+0xc14>
1a0052f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0052f2:	18bd      	adds	r5, r7, r2
1a0052f4:	eba5 0509 	sub.w	r5, r5, r9
1a0052f8:	1ad3      	subs	r3, r2, r3
1a0052fa:	429d      	cmp	r5, r3
1a0052fc:	bfa8      	it	ge
1a0052fe:	461d      	movge	r5, r3
1a005300:	e527      	b.n	1a004d52 <_vfprintf_r+0xdf2>
1a005302:	9a08      	ldr	r2, [sp, #32]
1a005304:	9308      	str	r3, [sp, #32]
1a005306:	6812      	ldr	r2, [r2, #0]
1a005308:	9b04      	ldr	r3, [sp, #16]
1a00530a:	8013      	strh	r3, [r2, #0]
1a00530c:	4657      	mov	r7, sl
1a00530e:	f7ff b8db 	b.w	1a0044c8 <_vfprintf_r+0x568>
1a005312:	681c      	ldr	r4, [r3, #0]
1a005314:	9208      	str	r2, [sp, #32]
1a005316:	17e5      	asrs	r5, r4, #31
1a005318:	9e02      	ldr	r6, [sp, #8]
1a00531a:	4622      	mov	r2, r4
1a00531c:	462b      	mov	r3, r5
1a00531e:	f7fe bfa9 	b.w	1a004274 <_vfprintf_r+0x314>
1a005322:	b2e4      	uxtb	r4, r4
1a005324:	2500      	movs	r5, #0
1a005326:	f7fe bf59 	b.w	1a0041dc <_vfprintf_r+0x27c>
1a00532a:	2330      	movs	r3, #48	; 0x30
1a00532c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a005330:	2358      	movs	r3, #88	; 0x58
1a005332:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a005336:	9b02      	ldr	r3, [sp, #8]
1a005338:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a00533c:	f043 0302 	orr.w	r3, r3, #2
1a005340:	930a      	str	r3, [sp, #40]	; 0x28
1a005342:	f300 82b7 	bgt.w	1a0058b4 <_vfprintf_r+0x1954>
1a005346:	2300      	movs	r3, #0
1a005348:	9309      	str	r3, [sp, #36]	; 0x24
1a00534a:	af3b      	add	r7, sp, #236	; 0xec
1a00534c:	9a02      	ldr	r2, [sp, #8]
1a00534e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a005350:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a005354:	9202      	str	r2, [sp, #8]
1a005356:	2b00      	cmp	r3, #0
1a005358:	f028 0220 	bic.w	r2, r8, #32
1a00535c:	9203      	str	r2, [sp, #12]
1a00535e:	f2c0 8188 	blt.w	1a005672 <_vfprintf_r+0x1712>
1a005362:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a005366:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a00536a:	2300      	movs	r3, #0
1a00536c:	931e      	str	r3, [sp, #120]	; 0x78
1a00536e:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a005372:	f000 82d9 	beq.w	1a005928 <_vfprintf_r+0x19c8>
1a005376:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a00537a:	f47f ade7 	bne.w	1a004f4c <_vfprintf_r+0xfec>
1a00537e:	a822      	add	r0, sp, #136	; 0x88
1a005380:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005384:	f002 fb7c 	bl	1a007a80 <frexp>
1a005388:	2200      	movs	r2, #0
1a00538a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00538e:	ec51 0b10 	vmov	r0, r1, d0
1a005392:	f7fd f9bd 	bl	1a002710 <__aeabi_dmul>
1a005396:	2200      	movs	r2, #0
1a005398:	2300      	movs	r3, #0
1a00539a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00539e:	f7fd fc1f 	bl	1a002be0 <__aeabi_dcmpeq>
1a0053a2:	b108      	cbz	r0, 1a0053a8 <_vfprintf_r+0x1448>
1a0053a4:	2301      	movs	r3, #1
1a0053a6:	9322      	str	r3, [sp, #136]	; 0x88
1a0053a8:	4bb6      	ldr	r3, [pc, #728]	; (1a005684 <_vfprintf_r+0x1724>)
1a0053aa:	930b      	str	r3, [sp, #44]	; 0x2c
1a0053ac:	e9cd 8a0e 	strd	r8, sl, [sp, #56]	; 0x38
1a0053b0:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
1a0053b4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
1a0053b8:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
1a0053bc:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a0053c0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a0053c4:	970c      	str	r7, [sp, #48]	; 0x30
1a0053c6:	46ba      	mov	sl, r7
1a0053c8:	e003      	b.n	1a0053d2 <_vfprintf_r+0x1472>
1a0053ca:	f7fd fc09 	bl	1a002be0 <__aeabi_dcmpeq>
1a0053ce:	bb20      	cbnz	r0, 1a00541a <_vfprintf_r+0x14ba>
1a0053d0:	46b2      	mov	sl, r6
1a0053d2:	2200      	movs	r2, #0
1a0053d4:	4bac      	ldr	r3, [pc, #688]	; (1a005688 <_vfprintf_r+0x1728>)
1a0053d6:	4640      	mov	r0, r8
1a0053d8:	4649      	mov	r1, r9
1a0053da:	f7fd f999 	bl	1a002710 <__aeabi_dmul>
1a0053de:	4689      	mov	r9, r1
1a0053e0:	4680      	mov	r8, r0
1a0053e2:	f002 fd67 	bl	1a007eb4 <__aeabi_d2iz>
1a0053e6:	4607      	mov	r7, r0
1a0053e8:	f7fd f928 	bl	1a00263c <__aeabi_i2d>
1a0053ec:	4602      	mov	r2, r0
1a0053ee:	460b      	mov	r3, r1
1a0053f0:	4640      	mov	r0, r8
1a0053f2:	4649      	mov	r1, r9
1a0053f4:	f7fc ffd4 	bl	1a0023a0 <__aeabi_dsub>
1a0053f8:	4656      	mov	r6, sl
1a0053fa:	f81b 4007 	ldrb.w	r4, [fp, r7]
1a0053fe:	f806 4b01 	strb.w	r4, [r6], #1
1a005402:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a005406:	462c      	mov	r4, r5
1a005408:	4680      	mov	r8, r0
1a00540a:	4689      	mov	r9, r1
1a00540c:	f04f 0200 	mov.w	r2, #0
1a005410:	f04f 0300 	mov.w	r3, #0
1a005414:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a005418:	d1d7      	bne.n	1a0053ca <_vfprintf_r+0x146a>
1a00541a:	4640      	mov	r0, r8
1a00541c:	4649      	mov	r1, r9
1a00541e:	2200      	movs	r2, #0
1a005420:	4b9a      	ldr	r3, [pc, #616]	; (1a00568c <_vfprintf_r+0x172c>)
1a005422:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a005426:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
1a00542a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a00542e:	463d      	mov	r5, r7
1a005430:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
1a005434:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a005436:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a00543a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00543e:	f7fd fbf7 	bl	1a002c30 <__aeabi_dcmpgt>
1a005442:	2800      	cmp	r0, #0
1a005444:	f040 8214 	bne.w	1a005870 <_vfprintf_r+0x1910>
1a005448:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00544c:	2200      	movs	r2, #0
1a00544e:	4b8f      	ldr	r3, [pc, #572]	; (1a00568c <_vfprintf_r+0x172c>)
1a005450:	f7fd fbc6 	bl	1a002be0 <__aeabi_dcmpeq>
1a005454:	b118      	cbz	r0, 1a00545e <_vfprintf_r+0x14fe>
1a005456:	462b      	mov	r3, r5
1a005458:	07db      	lsls	r3, r3, #31
1a00545a:	f100 8209 	bmi.w	1a005870 <_vfprintf_r+0x1910>
1a00545e:	2c00      	cmp	r4, #0
1a005460:	f6ff ad91 	blt.w	1a004f86 <_vfprintf_r+0x1026>
1a005464:	1c63      	adds	r3, r4, #1
1a005466:	4433      	add	r3, r6
1a005468:	2230      	movs	r2, #48	; 0x30
1a00546a:	f806 2b01 	strb.w	r2, [r6], #1
1a00546e:	429e      	cmp	r6, r3
1a005470:	d1fb      	bne.n	1a00546a <_vfprintf_r+0x150a>
1a005472:	e588      	b.n	1a004f86 <_vfprintf_r+0x1026>
1a005474:	aa28      	add	r2, sp, #160	; 0xa0
1a005476:	9907      	ldr	r1, [sp, #28]
1a005478:	9805      	ldr	r0, [sp, #20]
1a00547a:	f002 fbad 	bl	1a007bd8 <__sprint_r>
1a00547e:	2800      	cmp	r0, #0
1a005480:	f47f ab06 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a005484:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005486:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a00548a:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00548e:	f7ff bb12 	b.w	1a004ab6 <_vfprintf_r+0xb56>
1a005492:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a005496:	f7fe f891 	bl	1a0035bc <__retarget_lock_release_recursive>
1a00549a:	f7fe be6a 	b.w	1a004172 <_vfprintf_r+0x212>
1a00549e:	aa28      	add	r2, sp, #160	; 0xa0
1a0054a0:	9907      	ldr	r1, [sp, #28]
1a0054a2:	9805      	ldr	r0, [sp, #20]
1a0054a4:	f002 fb98 	bl	1a007bd8 <__sprint_r>
1a0054a8:	2800      	cmp	r0, #0
1a0054aa:	f47f aaf1 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a0054ae:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0054b0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0054b4:	e416      	b.n	1a004ce4 <_vfprintf_r+0xd84>
1a0054b6:	9e02      	ldr	r6, [sp, #8]
1a0054b8:	f7ff b9ad 	b.w	1a004816 <_vfprintf_r+0x8b6>
1a0054bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0054be:	1cde      	adds	r6, r3, #3
1a0054c0:	db01      	blt.n	1a0054c6 <_vfprintf_r+0x1566>
1a0054c2:	4599      	cmp	r9, r3
1a0054c4:	da05      	bge.n	1a0054d2 <_vfprintf_r+0x1572>
1a0054c6:	f1a8 0802 	sub.w	r8, r8, #2
1a0054ca:	f028 0320 	bic.w	r3, r8, #32
1a0054ce:	9303      	str	r3, [sp, #12]
1a0054d0:	e565      	b.n	1a004f9e <_vfprintf_r+0x103e>
1a0054d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0054d4:	4619      	mov	r1, r3
1a0054d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0054d8:	4299      	cmp	r1, r3
1a0054da:	f300 8174 	bgt.w	1a0057c6 <_vfprintf_r+0x1866>
1a0054de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0054e0:	07d4      	lsls	r4, r2, #31
1a0054e2:	f140 8254 	bpl.w	1a00598e <_vfprintf_r+0x1a2e>
1a0054e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a0054e8:	189e      	adds	r6, r3, r2
1a0054ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0054ec:	0558      	lsls	r0, r3, #21
1a0054ee:	d503      	bpl.n	1a0054f8 <_vfprintf_r+0x1598>
1a0054f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0054f2:	2b00      	cmp	r3, #0
1a0054f4:	f300 824d 	bgt.w	1a005992 <_vfprintf_r+0x1a32>
1a0054f8:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0054fc:	9303      	str	r3, [sp, #12]
1a0054fe:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005502:	2300      	movs	r3, #0
1a005504:	930c      	str	r3, [sp, #48]	; 0x30
1a005506:	930f      	str	r3, [sp, #60]	; 0x3c
1a005508:	e5ac      	b.n	1a005064 <_vfprintf_r+0x1104>
1a00550a:	222d      	movs	r2, #45	; 0x2d
1a00550c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a005510:	f04f 0900 	mov.w	r9, #0
1a005514:	f7fe befb 	b.w	1a00430e <_vfprintf_r+0x3ae>
1a005518:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00551a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a00551e:	18fb      	adds	r3, r7, r3
1a005520:	930a      	str	r3, [sp, #40]	; 0x28
1a005522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005524:	970e      	str	r7, [sp, #56]	; 0x38
1a005526:	465a      	mov	r2, fp
1a005528:	464f      	mov	r7, r9
1a00552a:	4e59      	ldr	r6, [pc, #356]	; (1a005690 <_vfprintf_r+0x1730>)
1a00552c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a005530:	f8dd a014 	ldr.w	sl, [sp, #20]
1a005534:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a005538:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
1a00553c:	4621      	mov	r1, r4
1a00553e:	2b00      	cmp	r3, #0
1a005540:	d032      	beq.n	1a0055a8 <_vfprintf_r+0x1648>
1a005542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005544:	2b00      	cmp	r3, #0
1a005546:	d16e      	bne.n	1a005626 <_vfprintf_r+0x16c6>
1a005548:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00554a:	3b01      	subs	r3, #1
1a00554c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a005550:	930f      	str	r3, [sp, #60]	; 0x3c
1a005552:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005554:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a005556:	6010      	str	r0, [r2, #0]
1a005558:	3301      	adds	r3, #1
1a00555a:	4449      	add	r1, r9
1a00555c:	2b07      	cmp	r3, #7
1a00555e:	912a      	str	r1, [sp, #168]	; 0xa8
1a005560:	f8c2 9004 	str.w	r9, [r2, #4]
1a005564:	9329      	str	r3, [sp, #164]	; 0xa4
1a005566:	dc62      	bgt.n	1a00562e <_vfprintf_r+0x16ce>
1a005568:	3208      	adds	r2, #8
1a00556a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00556c:	f898 3000 	ldrb.w	r3, [r8]
1a005570:	1bc5      	subs	r5, r0, r7
1a005572:	429d      	cmp	r5, r3
1a005574:	bfa8      	it	ge
1a005576:	461d      	movge	r5, r3
1a005578:	2d00      	cmp	r5, #0
1a00557a:	dd0b      	ble.n	1a005594 <_vfprintf_r+0x1634>
1a00557c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00557e:	6017      	str	r7, [r2, #0]
1a005580:	3301      	adds	r3, #1
1a005582:	4429      	add	r1, r5
1a005584:	2b07      	cmp	r3, #7
1a005586:	912a      	str	r1, [sp, #168]	; 0xa8
1a005588:	6055      	str	r5, [r2, #4]
1a00558a:	9329      	str	r3, [sp, #164]	; 0xa4
1a00558c:	dc5a      	bgt.n	1a005644 <_vfprintf_r+0x16e4>
1a00558e:	f898 3000 	ldrb.w	r3, [r8]
1a005592:	3208      	adds	r2, #8
1a005594:	2d00      	cmp	r5, #0
1a005596:	bfac      	ite	ge
1a005598:	1b5d      	subge	r5, r3, r5
1a00559a:	461d      	movlt	r5, r3
1a00559c:	2d00      	cmp	r5, #0
1a00559e:	dc15      	bgt.n	1a0055cc <_vfprintf_r+0x166c>
1a0055a0:	441f      	add	r7, r3
1a0055a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0055a4:	2b00      	cmp	r3, #0
1a0055a6:	d1cc      	bne.n	1a005542 <_vfprintf_r+0x15e2>
1a0055a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0055aa:	2b00      	cmp	r3, #0
1a0055ac:	d13b      	bne.n	1a005626 <_vfprintf_r+0x16c6>
1a0055ae:	46b9      	mov	r9, r7
1a0055b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0055b2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a0055b4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a0055b8:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0055bc:	18fb      	adds	r3, r7, r3
1a0055be:	4599      	cmp	r9, r3
1a0055c0:	4693      	mov	fp, r2
1a0055c2:	460c      	mov	r4, r1
1a0055c4:	bf28      	it	cs
1a0055c6:	4699      	movcs	r9, r3
1a0055c8:	f7ff bb93 	b.w	1a004cf2 <_vfprintf_r+0xd92>
1a0055cc:	2d10      	cmp	r5, #16
1a0055ce:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a0055d0:	dd1c      	ble.n	1a00560c <_vfprintf_r+0x16ac>
1a0055d2:	2410      	movs	r4, #16
1a0055d4:	e004      	b.n	1a0055e0 <_vfprintf_r+0x1680>
1a0055d6:	3d10      	subs	r5, #16
1a0055d8:	2d10      	cmp	r5, #16
1a0055da:	f102 0208 	add.w	r2, r2, #8
1a0055de:	dd15      	ble.n	1a00560c <_vfprintf_r+0x16ac>
1a0055e0:	3001      	adds	r0, #1
1a0055e2:	3110      	adds	r1, #16
1a0055e4:	2807      	cmp	r0, #7
1a0055e6:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a0055ea:	e9c2 6400 	strd	r6, r4, [r2]
1a0055ee:	ddf2      	ble.n	1a0055d6 <_vfprintf_r+0x1676>
1a0055f0:	aa28      	add	r2, sp, #160	; 0xa0
1a0055f2:	4659      	mov	r1, fp
1a0055f4:	4650      	mov	r0, sl
1a0055f6:	f002 faef 	bl	1a007bd8 <__sprint_r>
1a0055fa:	2800      	cmp	r0, #0
1a0055fc:	f47f ae30 	bne.w	1a005260 <_vfprintf_r+0x1300>
1a005600:	3d10      	subs	r5, #16
1a005602:	2d10      	cmp	r5, #16
1a005604:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a005608:	aa2b      	add	r2, sp, #172	; 0xac
1a00560a:	dce9      	bgt.n	1a0055e0 <_vfprintf_r+0x1680>
1a00560c:	3001      	adds	r0, #1
1a00560e:	4429      	add	r1, r5
1a005610:	2807      	cmp	r0, #7
1a005612:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a005616:	e9c2 6500 	strd	r6, r5, [r2]
1a00561a:	dc49      	bgt.n	1a0056b0 <_vfprintf_r+0x1750>
1a00561c:	f898 3000 	ldrb.w	r3, [r8]
1a005620:	3208      	adds	r2, #8
1a005622:	441f      	add	r7, r3
1a005624:	e7bd      	b.n	1a0055a2 <_vfprintf_r+0x1642>
1a005626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005628:	3b01      	subs	r3, #1
1a00562a:	930c      	str	r3, [sp, #48]	; 0x30
1a00562c:	e791      	b.n	1a005552 <_vfprintf_r+0x15f2>
1a00562e:	aa28      	add	r2, sp, #160	; 0xa0
1a005630:	4659      	mov	r1, fp
1a005632:	4650      	mov	r0, sl
1a005634:	f002 fad0 	bl	1a007bd8 <__sprint_r>
1a005638:	2800      	cmp	r0, #0
1a00563a:	f47f ae11 	bne.w	1a005260 <_vfprintf_r+0x1300>
1a00563e:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a005640:	aa2b      	add	r2, sp, #172	; 0xac
1a005642:	e792      	b.n	1a00556a <_vfprintf_r+0x160a>
1a005644:	aa28      	add	r2, sp, #160	; 0xa0
1a005646:	4659      	mov	r1, fp
1a005648:	4650      	mov	r0, sl
1a00564a:	f002 fac5 	bl	1a007bd8 <__sprint_r>
1a00564e:	2800      	cmp	r0, #0
1a005650:	f47f ae06 	bne.w	1a005260 <_vfprintf_r+0x1300>
1a005654:	f898 3000 	ldrb.w	r3, [r8]
1a005658:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00565a:	aa2b      	add	r2, sp, #172	; 0xac
1a00565c:	e79a      	b.n	1a005594 <_vfprintf_r+0x1634>
1a00565e:	222d      	movs	r2, #45	; 0x2d
1a005660:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a005664:	f7ff b87d 	b.w	1a004762 <_vfprintf_r+0x802>
1a005668:	9b02      	ldr	r3, [sp, #8]
1a00566a:	930a      	str	r3, [sp, #40]	; 0x28
1a00566c:	2300      	movs	r3, #0
1a00566e:	9309      	str	r3, [sp, #36]	; 0x24
1a005670:	9202      	str	r2, [sp, #8]
1a005672:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a005676:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a00567a:	931d      	str	r3, [sp, #116]	; 0x74
1a00567c:	232d      	movs	r3, #45	; 0x2d
1a00567e:	911c      	str	r1, [sp, #112]	; 0x70
1a005680:	931e      	str	r3, [sp, #120]	; 0x78
1a005682:	e674      	b.n	1a00536e <_vfprintf_r+0x140e>
1a005684:	1a00837c 	.word	0x1a00837c
1a005688:	40300000 	.word	0x40300000
1a00568c:	3fe00000 	.word	0x3fe00000
1a005690:	1a0083c0 	.word	0x1a0083c0
1a005694:	aa28      	add	r2, sp, #160	; 0xa0
1a005696:	9907      	ldr	r1, [sp, #28]
1a005698:	9805      	ldr	r0, [sp, #20]
1a00569a:	f002 fa9d 	bl	1a007bd8 <__sprint_r>
1a00569e:	2800      	cmp	r0, #0
1a0056a0:	f47f a9f6 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a0056a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0056a6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0056a8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0056ac:	f7ff bbeb 	b.w	1a004e86 <_vfprintf_r+0xf26>
1a0056b0:	aa28      	add	r2, sp, #160	; 0xa0
1a0056b2:	4659      	mov	r1, fp
1a0056b4:	4650      	mov	r0, sl
1a0056b6:	f002 fa8f 	bl	1a007bd8 <__sprint_r>
1a0056ba:	2800      	cmp	r0, #0
1a0056bc:	f47f add0 	bne.w	1a005260 <_vfprintf_r+0x1300>
1a0056c0:	f898 3000 	ldrb.w	r3, [r8]
1a0056c4:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a0056c6:	aa2b      	add	r2, sp, #172	; 0xac
1a0056c8:	441f      	add	r7, r3
1a0056ca:	e76a      	b.n	1a0055a2 <_vfprintf_r+0x1642>
1a0056cc:	aa28      	add	r2, sp, #160	; 0xa0
1a0056ce:	9907      	ldr	r1, [sp, #28]
1a0056d0:	9805      	ldr	r0, [sp, #20]
1a0056d2:	f002 fa81 	bl	1a007bd8 <__sprint_r>
1a0056d6:	2800      	cmp	r0, #0
1a0056d8:	f47f a9da 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a0056dc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0056de:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0056e2:	f7ff baf7 	b.w	1a004cd4 <_vfprintf_r+0xd74>
1a0056e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a0056e8:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a0056ea:	1aff      	subs	r7, r7, r3
1a0056ec:	461a      	mov	r2, r3
1a0056ee:	4638      	mov	r0, r7
1a0056f0:	f002 f9fc 	bl	1a007aec <strncpy>
1a0056f4:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0056f8:	b10b      	cbz	r3, 1a0056fe <_vfprintf_r+0x179e>
1a0056fa:	f108 0801 	add.w	r8, r8, #1
1a0056fe:	220a      	movs	r2, #10
1a005700:	2300      	movs	r3, #0
1a005702:	4620      	mov	r0, r4
1a005704:	4629      	mov	r1, r5
1a005706:	f04f 0a00 	mov.w	sl, #0
1a00570a:	f7fd fa9b 	bl	1a002c44 <__aeabi_uldivmod>
1a00570e:	f7ff b8ab 	b.w	1a004868 <_vfprintf_r+0x908>
1a005712:	aa26      	add	r2, sp, #152	; 0x98
1a005714:	ab23      	add	r3, sp, #140	; 0x8c
1a005716:	e9cd 3200 	strd	r3, r2, [sp]
1a00571a:	2103      	movs	r1, #3
1a00571c:	ab22      	add	r3, sp, #136	; 0x88
1a00571e:	464a      	mov	r2, r9
1a005720:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005724:	9805      	ldr	r0, [sp, #20]
1a005726:	f000 fb03 	bl	1a005d30 <_dtoa_r>
1a00572a:	7803      	ldrb	r3, [r0, #0]
1a00572c:	2b30      	cmp	r3, #48	; 0x30
1a00572e:	4607      	mov	r7, r0
1a005730:	f000 8161 	beq.w	1a0059f6 <_vfprintf_r+0x1a96>
1a005734:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005736:	444b      	add	r3, r9
1a005738:	18fc      	adds	r4, r7, r3
1a00573a:	2200      	movs	r2, #0
1a00573c:	2300      	movs	r3, #0
1a00573e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a005742:	f7fd fa4d 	bl	1a002be0 <__aeabi_dcmpeq>
1a005746:	b108      	cbz	r0, 1a00574c <_vfprintf_r+0x17ec>
1a005748:	4626      	mov	r6, r4
1a00574a:	e41c      	b.n	1a004f86 <_vfprintf_r+0x1026>
1a00574c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00574e:	42a6      	cmp	r6, r4
1a005750:	f4bf ac19 	bcs.w	1a004f86 <_vfprintf_r+0x1026>
1a005754:	2230      	movs	r2, #48	; 0x30
1a005756:	1c73      	adds	r3, r6, #1
1a005758:	9326      	str	r3, [sp, #152]	; 0x98
1a00575a:	7032      	strb	r2, [r6, #0]
1a00575c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00575e:	42b4      	cmp	r4, r6
1a005760:	d8f9      	bhi.n	1a005756 <_vfprintf_r+0x17f6>
1a005762:	e410      	b.n	1a004f86 <_vfprintf_r+0x1026>
1a005764:	aa28      	add	r2, sp, #160	; 0xa0
1a005766:	9907      	ldr	r1, [sp, #28]
1a005768:	9805      	ldr	r0, [sp, #20]
1a00576a:	f002 fa35 	bl	1a007bd8 <__sprint_r>
1a00576e:	2800      	cmp	r0, #0
1a005770:	f47f a98e 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a005774:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005776:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005778:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00577c:	f7ff bad1 	b.w	1a004d22 <_vfprintf_r+0xdc2>
1a005780:	464e      	mov	r6, r9
1a005782:	f8cd 900c 	str.w	r9, [sp, #12]
1a005786:	9408      	str	r4, [sp, #32]
1a005788:	4681      	mov	r9, r0
1a00578a:	900c      	str	r0, [sp, #48]	; 0x30
1a00578c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a005790:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a005794:	f7fe bdb9 	b.w	1a00430a <_vfprintf_r+0x3aa>
1a005798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00579a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a00579c:	f003 0301 	and.w	r3, r3, #1
1a0057a0:	2a00      	cmp	r2, #0
1a0057a2:	ea43 0309 	orr.w	r3, r3, r9
1a0057a6:	f340 8142 	ble.w	1a005a2e <_vfprintf_r+0x1ace>
1a0057aa:	2b00      	cmp	r3, #0
1a0057ac:	f040 8119 	bne.w	1a0059e2 <_vfprintf_r+0x1a82>
1a0057b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a0057b2:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0057b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0057b8:	055a      	lsls	r2, r3, #21
1a0057ba:	f100 80ec 	bmi.w	1a005996 <_vfprintf_r+0x1a36>
1a0057be:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0057c2:	9303      	str	r3, [sp, #12]
1a0057c4:	e69d      	b.n	1a005502 <_vfprintf_r+0x15a2>
1a0057c6:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a0057ca:	189e      	adds	r6, r3, r2
1a0057cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0057ce:	2b00      	cmp	r3, #0
1a0057d0:	f340 811e 	ble.w	1a005a10 <_vfprintf_r+0x1ab0>
1a0057d4:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0057d8:	e7ed      	b.n	1a0057b6 <_vfprintf_r+0x1856>
1a0057da:	aa28      	add	r2, sp, #160	; 0xa0
1a0057dc:	9907      	ldr	r1, [sp, #28]
1a0057de:	9805      	ldr	r0, [sp, #20]
1a0057e0:	f002 f9fa 	bl	1a007bd8 <__sprint_r>
1a0057e4:	2800      	cmp	r0, #0
1a0057e6:	f47f a953 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a0057ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0057ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0057ee:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0057f0:	1ad3      	subs	r3, r2, r3
1a0057f2:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0057f6:	f7ff baac 	b.w	1a004d52 <_vfprintf_r+0xdf2>
1a0057fa:	eb07 0409 	add.w	r4, r7, r9
1a0057fe:	e79c      	b.n	1a00573a <_vfprintf_r+0x17da>
1a005800:	425d      	negs	r5, r3
1a005802:	3310      	adds	r3, #16
1a005804:	4ba7      	ldr	r3, [pc, #668]	; (1a005aa4 <_vfprintf_r+0x1b44>)
1a005806:	da63      	bge.n	1a0058d0 <_vfprintf_r+0x1970>
1a005808:	4619      	mov	r1, r3
1a00580a:	2610      	movs	r6, #16
1a00580c:	4623      	mov	r3, r4
1a00580e:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a005812:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005816:	460c      	mov	r4, r1
1a005818:	e004      	b.n	1a005824 <_vfprintf_r+0x18c4>
1a00581a:	f10b 0b08 	add.w	fp, fp, #8
1a00581e:	3d10      	subs	r5, #16
1a005820:	2d10      	cmp	r5, #16
1a005822:	dd52      	ble.n	1a0058ca <_vfprintf_r+0x196a>
1a005824:	3201      	adds	r2, #1
1a005826:	3310      	adds	r3, #16
1a005828:	2a07      	cmp	r2, #7
1a00582a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a00582e:	e9cb 4600 	strd	r4, r6, [fp]
1a005832:	ddf2      	ble.n	1a00581a <_vfprintf_r+0x18ba>
1a005834:	aa28      	add	r2, sp, #160	; 0xa0
1a005836:	4649      	mov	r1, r9
1a005838:	4640      	mov	r0, r8
1a00583a:	f002 f9cd 	bl	1a007bd8 <__sprint_r>
1a00583e:	2800      	cmp	r0, #0
1a005840:	f47f a9c0 	bne.w	1a004bc4 <_vfprintf_r+0xc64>
1a005844:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a005848:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00584c:	e7e7      	b.n	1a00581e <_vfprintf_r+0x18be>
1a00584e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a005852:	07db      	lsls	r3, r3, #31
1a005854:	d407      	bmi.n	1a005866 <_vfprintf_r+0x1906>
1a005856:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00585a:	059f      	lsls	r7, r3, #22
1a00585c:	d403      	bmi.n	1a005866 <_vfprintf_r+0x1906>
1a00585e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a005862:	f7fd feab 	bl	1a0035bc <__retarget_lock_release_recursive>
1a005866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00586a:	9304      	str	r3, [sp, #16]
1a00586c:	f7ff b9bb 	b.w	1a004be6 <_vfprintf_r+0xc86>
1a005870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005872:	9326      	str	r3, [sp, #152]	; 0x98
1a005874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005876:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1a00587a:	7bd9      	ldrb	r1, [r3, #15]
1a00587c:	428a      	cmp	r2, r1
1a00587e:	4633      	mov	r3, r6
1a005880:	d109      	bne.n	1a005896 <_vfprintf_r+0x1936>
1a005882:	2030      	movs	r0, #48	; 0x30
1a005884:	f803 0c01 	strb.w	r0, [r3, #-1]
1a005888:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a00588a:	1e5a      	subs	r2, r3, #1
1a00588c:	9226      	str	r2, [sp, #152]	; 0x98
1a00588e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a005892:	4291      	cmp	r1, r2
1a005894:	d0f6      	beq.n	1a005884 <_vfprintf_r+0x1924>
1a005896:	2a39      	cmp	r2, #57	; 0x39
1a005898:	bf0b      	itete	eq
1a00589a:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a00589c:	3201      	addne	r2, #1
1a00589e:	7a92      	ldrbeq	r2, [r2, #10]
1a0058a0:	b2d2      	uxtbne	r2, r2
1a0058a2:	f803 2c01 	strb.w	r2, [r3, #-1]
1a0058a6:	f7ff bb6e 	b.w	1a004f86 <_vfprintf_r+0x1026>
1a0058aa:	2330      	movs	r3, #48	; 0x30
1a0058ac:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a0058b0:	2378      	movs	r3, #120	; 0x78
1a0058b2:	e53e      	b.n	1a005332 <_vfprintf_r+0x13d2>
1a0058b4:	f109 0101 	add.w	r1, r9, #1
1a0058b8:	9805      	ldr	r0, [sp, #20]
1a0058ba:	f7fd fe81 	bl	1a0035c0 <_malloc_r>
1a0058be:	4607      	mov	r7, r0
1a0058c0:	2800      	cmp	r0, #0
1a0058c2:	f000 80d5 	beq.w	1a005a70 <_vfprintf_r+0x1b10>
1a0058c6:	9009      	str	r0, [sp, #36]	; 0x24
1a0058c8:	e540      	b.n	1a00534c <_vfprintf_r+0x13ec>
1a0058ca:	4621      	mov	r1, r4
1a0058cc:	461c      	mov	r4, r3
1a0058ce:	460b      	mov	r3, r1
1a0058d0:	3201      	adds	r2, #1
1a0058d2:	442c      	add	r4, r5
1a0058d4:	2a07      	cmp	r2, #7
1a0058d6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0058da:	e9cb 3500 	strd	r3, r5, [fp]
1a0058de:	f77f aaea 	ble.w	1a004eb6 <_vfprintf_r+0xf56>
1a0058e2:	aa28      	add	r2, sp, #160	; 0xa0
1a0058e4:	9907      	ldr	r1, [sp, #28]
1a0058e6:	9805      	ldr	r0, [sp, #20]
1a0058e8:	f002 f976 	bl	1a007bd8 <__sprint_r>
1a0058ec:	2800      	cmp	r0, #0
1a0058ee:	f47f a8cf 	bne.w	1a004a90 <_vfprintf_r+0xb30>
1a0058f2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0058f6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0058fa:	f7ff b8df 	b.w	1a004abc <_vfprintf_r+0xb5c>
1a0058fe:	f109 0401 	add.w	r4, r9, #1
1a005902:	a926      	add	r1, sp, #152	; 0x98
1a005904:	ab23      	add	r3, sp, #140	; 0x8c
1a005906:	e9cd 3100 	strd	r3, r1, [sp]
1a00590a:	4622      	mov	r2, r4
1a00590c:	ab22      	add	r3, sp, #136	; 0x88
1a00590e:	2102      	movs	r1, #2
1a005910:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005914:	9805      	ldr	r0, [sp, #20]
1a005916:	f000 fa0b 	bl	1a005d30 <_dtoa_r>
1a00591a:	4607      	mov	r7, r0
1a00591c:	443c      	add	r4, r7
1a00591e:	e70c      	b.n	1a00573a <_vfprintf_r+0x17da>
1a005920:	f04f 0906 	mov.w	r9, #6
1a005924:	f7ff bb03 	b.w	1a004f2e <_vfprintf_r+0xfce>
1a005928:	a822      	add	r0, sp, #136	; 0x88
1a00592a:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00592e:	f002 f8a7 	bl	1a007a80 <frexp>
1a005932:	2200      	movs	r2, #0
1a005934:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a005938:	ec51 0b10 	vmov	r0, r1, d0
1a00593c:	f7fc fee8 	bl	1a002710 <__aeabi_dmul>
1a005940:	2200      	movs	r2, #0
1a005942:	2300      	movs	r3, #0
1a005944:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a005948:	f7fd f94a 	bl	1a002be0 <__aeabi_dcmpeq>
1a00594c:	b108      	cbz	r0, 1a005952 <_vfprintf_r+0x19f2>
1a00594e:	2301      	movs	r3, #1
1a005950:	9322      	str	r3, [sp, #136]	; 0x88
1a005952:	4b55      	ldr	r3, [pc, #340]	; (1a005aa8 <_vfprintf_r+0x1b48>)
1a005954:	930b      	str	r3, [sp, #44]	; 0x2c
1a005956:	e529      	b.n	1a0053ac <_vfprintf_r+0x144c>
1a005958:	2900      	cmp	r1, #0
1a00595a:	d17b      	bne.n	1a005a54 <_vfprintf_r+0x1af4>
1a00595c:	2330      	movs	r3, #48	; 0x30
1a00595e:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a005962:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a005966:	3230      	adds	r2, #48	; 0x30
1a005968:	f803 2b01 	strb.w	r2, [r3], #1
1a00596c:	aa24      	add	r2, sp, #144	; 0x90
1a00596e:	1a9b      	subs	r3, r3, r2
1a005970:	9316      	str	r3, [sp, #88]	; 0x58
1a005972:	f7ff bb61 	b.w	1a005038 <_vfprintf_r+0x10d8>
1a005976:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a005978:	4f4c      	ldr	r7, [pc, #304]	; (1a005aac <_vfprintf_r+0x1b4c>)
1a00597a:	2b00      	cmp	r3, #0
1a00597c:	bfb6      	itet	lt
1a00597e:	222d      	movlt	r2, #45	; 0x2d
1a005980:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a005984:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a005988:	4b49      	ldr	r3, [pc, #292]	; (1a005ab0 <_vfprintf_r+0x1b50>)
1a00598a:	f7fe beec 	b.w	1a004766 <_vfprintf_r+0x806>
1a00598e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a005990:	e5ab      	b.n	1a0054ea <_vfprintf_r+0x158a>
1a005992:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005996:	9818      	ldr	r0, [sp, #96]	; 0x60
1a005998:	2200      	movs	r2, #0
1a00599a:	920c      	str	r2, [sp, #48]	; 0x30
1a00599c:	920f      	str	r2, [sp, #60]	; 0x3c
1a00599e:	7803      	ldrb	r3, [r0, #0]
1a0059a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a0059a2:	2bff      	cmp	r3, #255	; 0xff
1a0059a4:	d00c      	beq.n	1a0059c0 <_vfprintf_r+0x1a60>
1a0059a6:	4293      	cmp	r3, r2
1a0059a8:	da0a      	bge.n	1a0059c0 <_vfprintf_r+0x1a60>
1a0059aa:	7841      	ldrb	r1, [r0, #1]
1a0059ac:	1ad2      	subs	r2, r2, r3
1a0059ae:	b1a1      	cbz	r1, 1a0059da <_vfprintf_r+0x1a7a>
1a0059b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0059b2:	3301      	adds	r3, #1
1a0059b4:	930f      	str	r3, [sp, #60]	; 0x3c
1a0059b6:	460b      	mov	r3, r1
1a0059b8:	2bff      	cmp	r3, #255	; 0xff
1a0059ba:	f100 0001 	add.w	r0, r0, #1
1a0059be:	d1f2      	bne.n	1a0059a6 <_vfprintf_r+0x1a46>
1a0059c0:	920e      	str	r2, [sp, #56]	; 0x38
1a0059c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0059c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0059c6:	9018      	str	r0, [sp, #96]	; 0x60
1a0059c8:	4413      	add	r3, r2
1a0059ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a0059cc:	fb02 6603 	mla	r6, r2, r3, r6
1a0059d0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0059d4:	9303      	str	r3, [sp, #12]
1a0059d6:	f7ff bb45 	b.w	1a005064 <_vfprintf_r+0x1104>
1a0059da:	990c      	ldr	r1, [sp, #48]	; 0x30
1a0059dc:	3101      	adds	r1, #1
1a0059de:	910c      	str	r1, [sp, #48]	; 0x30
1a0059e0:	e7df      	b.n	1a0059a2 <_vfprintf_r+0x1a42>
1a0059e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0059e4:	18d6      	adds	r6, r2, r3
1a0059e6:	444e      	add	r6, r9
1a0059e8:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0059ec:	e6e3      	b.n	1a0057b6 <_vfprintf_r+0x1856>
1a0059ee:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0059f2:	f7ff b8ec 	b.w	1a004bce <_vfprintf_r+0xc6e>
1a0059f6:	2200      	movs	r2, #0
1a0059f8:	2300      	movs	r3, #0
1a0059fa:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a0059fe:	f7fd f8ef 	bl	1a002be0 <__aeabi_dcmpeq>
1a005a02:	2800      	cmp	r0, #0
1a005a04:	f47f ae96 	bne.w	1a005734 <_vfprintf_r+0x17d4>
1a005a08:	f1c9 0301 	rsb	r3, r9, #1
1a005a0c:	9322      	str	r3, [sp, #136]	; 0x88
1a005a0e:	e692      	b.n	1a005736 <_vfprintf_r+0x17d6>
1a005a10:	f1c3 0301 	rsb	r3, r3, #1
1a005a14:	441e      	add	r6, r3
1a005a16:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005a1a:	9303      	str	r3, [sp, #12]
1a005a1c:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005a20:	e56f      	b.n	1a005502 <_vfprintf_r+0x15a2>
1a005a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005a24:	07dd      	lsls	r5, r3, #31
1a005a26:	f57f ab10 	bpl.w	1a00504a <_vfprintf_r+0x10ea>
1a005a2a:	f7ff bb0c 	b.w	1a005046 <_vfprintf_r+0x10e6>
1a005a2e:	b92b      	cbnz	r3, 1a005a3c <_vfprintf_r+0x1adc>
1a005a30:	2301      	movs	r3, #1
1a005a32:	9303      	str	r3, [sp, #12]
1a005a34:	461e      	mov	r6, r3
1a005a36:	f04f 0866 	mov.w	r8, #102	; 0x66
1a005a3a:	e562      	b.n	1a005502 <_vfprintf_r+0x15a2>
1a005a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a005a3e:	1c5e      	adds	r6, r3, #1
1a005a40:	444e      	add	r6, r9
1a005a42:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005a46:	9303      	str	r3, [sp, #12]
1a005a48:	f04f 0866 	mov.w	r8, #102	; 0x66
1a005a4c:	e559      	b.n	1a005502 <_vfprintf_r+0x15a2>
1a005a4e:	465a      	mov	r2, fp
1a005a50:	f7ff bb3f 	b.w	1a0050d2 <_vfprintf_r+0x1172>
1a005a54:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a005a58:	e785      	b.n	1a005966 <_vfprintf_r+0x1a06>
1a005a5a:	9b08      	ldr	r3, [sp, #32]
1a005a5c:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a005a60:	f853 0b04 	ldr.w	r0, [r3], #4
1a005a64:	9308      	str	r3, [sp, #32]
1a005a66:	4692      	mov	sl, r2
1a005a68:	ea40 79e0 	orr.w	r9, r0, r0, asr #31
1a005a6c:	f7fe bafc 	b.w	1a004068 <_vfprintf_r+0x108>
1a005a70:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005a74:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a005a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005a7c:	f8a9 300c 	strh.w	r3, [r9, #12]
1a005a80:	f7ff b8a5 	b.w	1a004bce <_vfprintf_r+0xc6e>
1a005a84:	461e      	mov	r6, r3
1a005a86:	f7fe bc15 	b.w	1a0042b4 <_vfprintf_r+0x354>
1a005a8a:	461e      	mov	r6, r3
1a005a8c:	f7fe bc5e 	b.w	1a00434c <_vfprintf_r+0x3ec>
1a005a90:	461e      	mov	r6, r3
1a005a92:	f7fe bc48 	b.w	1a004326 <_vfprintf_r+0x3c6>
1a005a96:	464c      	mov	r4, r9
1a005a98:	443c      	add	r4, r7
1a005a9a:	e64e      	b.n	1a00573a <_vfprintf_r+0x17da>
1a005a9c:	2302      	movs	r3, #2
1a005a9e:	9316      	str	r3, [sp, #88]	; 0x58
1a005aa0:	f7ff baca 	b.w	1a005038 <_vfprintf_r+0x10d8>
1a005aa4:	1a0083c0 	.word	0x1a0083c0
1a005aa8:	1a008390 	.word	0x1a008390
1a005aac:	1a008374 	.word	0x1a008374
1a005ab0:	1a008378 	.word	0x1a008378

1a005ab4 <__sbprintf>:
1a005ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005ab8:	460c      	mov	r4, r1
1a005aba:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a005abe:	8989      	ldrh	r1, [r1, #12]
1a005ac0:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a005ac2:	89e5      	ldrh	r5, [r4, #14]
1a005ac4:	9619      	str	r6, [sp, #100]	; 0x64
1a005ac6:	f021 0102 	bic.w	r1, r1, #2
1a005aca:	4606      	mov	r6, r0
1a005acc:	69e0      	ldr	r0, [r4, #28]
1a005ace:	f8ad 100c 	strh.w	r1, [sp, #12]
1a005ad2:	4617      	mov	r7, r2
1a005ad4:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a005ad8:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a005ada:	f8ad 500e 	strh.w	r5, [sp, #14]
1a005ade:	4698      	mov	r8, r3
1a005ae0:	ad1a      	add	r5, sp, #104	; 0x68
1a005ae2:	2300      	movs	r3, #0
1a005ae4:	9007      	str	r0, [sp, #28]
1a005ae6:	a816      	add	r0, sp, #88	; 0x58
1a005ae8:	9209      	str	r2, [sp, #36]	; 0x24
1a005aea:	9306      	str	r3, [sp, #24]
1a005aec:	9500      	str	r5, [sp, #0]
1a005aee:	9504      	str	r5, [sp, #16]
1a005af0:	9102      	str	r1, [sp, #8]
1a005af2:	9105      	str	r1, [sp, #20]
1a005af4:	f7fd fd5c 	bl	1a0035b0 <__retarget_lock_init_recursive>
1a005af8:	4643      	mov	r3, r8
1a005afa:	463a      	mov	r2, r7
1a005afc:	4669      	mov	r1, sp
1a005afe:	4630      	mov	r0, r6
1a005b00:	f7fe fa2e 	bl	1a003f60 <_vfprintf_r>
1a005b04:	1e05      	subs	r5, r0, #0
1a005b06:	db07      	blt.n	1a005b18 <__sbprintf+0x64>
1a005b08:	4630      	mov	r0, r6
1a005b0a:	4669      	mov	r1, sp
1a005b0c:	f7fd fb2a 	bl	1a003164 <_fflush_r>
1a005b10:	2800      	cmp	r0, #0
1a005b12:	bf18      	it	ne
1a005b14:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a005b18:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a005b1c:	065b      	lsls	r3, r3, #25
1a005b1e:	d503      	bpl.n	1a005b28 <__sbprintf+0x74>
1a005b20:	89a3      	ldrh	r3, [r4, #12]
1a005b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005b26:	81a3      	strh	r3, [r4, #12]
1a005b28:	9816      	ldr	r0, [sp, #88]	; 0x58
1a005b2a:	f7fd fd43 	bl	1a0035b4 <__retarget_lock_close_recursive>
1a005b2e:	4628      	mov	r0, r5
1a005b30:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a005b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a005b38 <__swsetup_r>:
1a005b38:	b538      	push	{r3, r4, r5, lr}
1a005b3a:	4b32      	ldr	r3, [pc, #200]	; (1a005c04 <__swsetup_r+0xcc>)
1a005b3c:	681b      	ldr	r3, [r3, #0]
1a005b3e:	4605      	mov	r5, r0
1a005b40:	460c      	mov	r4, r1
1a005b42:	b10b      	cbz	r3, 1a005b48 <__swsetup_r+0x10>
1a005b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a005b46:	b312      	cbz	r2, 1a005b8e <__swsetup_r+0x56>
1a005b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005b4c:	b293      	uxth	r3, r2
1a005b4e:	0718      	lsls	r0, r3, #28
1a005b50:	d525      	bpl.n	1a005b9e <__swsetup_r+0x66>
1a005b52:	6920      	ldr	r0, [r4, #16]
1a005b54:	2800      	cmp	r0, #0
1a005b56:	d02d      	beq.n	1a005bb4 <__swsetup_r+0x7c>
1a005b58:	f013 0201 	ands.w	r2, r3, #1
1a005b5c:	d007      	beq.n	1a005b6e <__swsetup_r+0x36>
1a005b5e:	6963      	ldr	r3, [r4, #20]
1a005b60:	2200      	movs	r2, #0
1a005b62:	425b      	negs	r3, r3
1a005b64:	61a3      	str	r3, [r4, #24]
1a005b66:	60a2      	str	r2, [r4, #8]
1a005b68:	b138      	cbz	r0, 1a005b7a <__swsetup_r+0x42>
1a005b6a:	2000      	movs	r0, #0
1a005b6c:	bd38      	pop	{r3, r4, r5, pc}
1a005b6e:	0799      	lsls	r1, r3, #30
1a005b70:	bf58      	it	pl
1a005b72:	6962      	ldrpl	r2, [r4, #20]
1a005b74:	60a2      	str	r2, [r4, #8]
1a005b76:	2800      	cmp	r0, #0
1a005b78:	d1f7      	bne.n	1a005b6a <__swsetup_r+0x32>
1a005b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005b7e:	061a      	lsls	r2, r3, #24
1a005b80:	d5f4      	bpl.n	1a005b6c <__swsetup_r+0x34>
1a005b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005b86:	81a3      	strh	r3, [r4, #12]
1a005b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005b8c:	bd38      	pop	{r3, r4, r5, pc}
1a005b8e:	4618      	mov	r0, r3
1a005b90:	f7fd fb44 	bl	1a00321c <__sinit>
1a005b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005b98:	b293      	uxth	r3, r2
1a005b9a:	0718      	lsls	r0, r3, #28
1a005b9c:	d4d9      	bmi.n	1a005b52 <__swsetup_r+0x1a>
1a005b9e:	06d9      	lsls	r1, r3, #27
1a005ba0:	d528      	bpl.n	1a005bf4 <__swsetup_r+0xbc>
1a005ba2:	0758      	lsls	r0, r3, #29
1a005ba4:	d412      	bmi.n	1a005bcc <__swsetup_r+0x94>
1a005ba6:	6920      	ldr	r0, [r4, #16]
1a005ba8:	f042 0308 	orr.w	r3, r2, #8
1a005bac:	81a3      	strh	r3, [r4, #12]
1a005bae:	b29b      	uxth	r3, r3
1a005bb0:	2800      	cmp	r0, #0
1a005bb2:	d1d1      	bne.n	1a005b58 <__swsetup_r+0x20>
1a005bb4:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a005bb8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a005bbc:	d0cc      	beq.n	1a005b58 <__swsetup_r+0x20>
1a005bbe:	4628      	mov	r0, r5
1a005bc0:	4621      	mov	r1, r4
1a005bc2:	f001 f995 	bl	1a006ef0 <__smakebuf_r>
1a005bc6:	89a3      	ldrh	r3, [r4, #12]
1a005bc8:	6920      	ldr	r0, [r4, #16]
1a005bca:	e7c5      	b.n	1a005b58 <__swsetup_r+0x20>
1a005bcc:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005bce:	b151      	cbz	r1, 1a005be6 <__swsetup_r+0xae>
1a005bd0:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a005bd4:	4299      	cmp	r1, r3
1a005bd6:	d004      	beq.n	1a005be2 <__swsetup_r+0xaa>
1a005bd8:	4628      	mov	r0, r5
1a005bda:	f7fd fba5 	bl	1a003328 <_free_r>
1a005bde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005be2:	2300      	movs	r3, #0
1a005be4:	6323      	str	r3, [r4, #48]	; 0x30
1a005be6:	2300      	movs	r3, #0
1a005be8:	6920      	ldr	r0, [r4, #16]
1a005bea:	6063      	str	r3, [r4, #4]
1a005bec:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a005bf0:	6020      	str	r0, [r4, #0]
1a005bf2:	e7d9      	b.n	1a005ba8 <__swsetup_r+0x70>
1a005bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a005bf8:	2309      	movs	r3, #9
1a005bfa:	602b      	str	r3, [r5, #0]
1a005bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005c00:	81a2      	strh	r2, [r4, #12]
1a005c02:	bd38      	pop	{r3, r4, r5, pc}
1a005c04:	10000040 	.word	0x10000040

1a005c08 <quorem>:
1a005c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005c0c:	6903      	ldr	r3, [r0, #16]
1a005c0e:	690f      	ldr	r7, [r1, #16]
1a005c10:	42bb      	cmp	r3, r7
1a005c12:	b083      	sub	sp, #12
1a005c14:	f2c0 8086 	blt.w	1a005d24 <quorem+0x11c>
1a005c18:	3f01      	subs	r7, #1
1a005c1a:	f101 0614 	add.w	r6, r1, #20
1a005c1e:	f100 0a14 	add.w	sl, r0, #20
1a005c22:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a005c26:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a005c2a:	00bc      	lsls	r4, r7, #2
1a005c2c:	3301      	adds	r3, #1
1a005c2e:	9400      	str	r4, [sp, #0]
1a005c30:	eb06 0904 	add.w	r9, r6, r4
1a005c34:	429a      	cmp	r2, r3
1a005c36:	4454      	add	r4, sl
1a005c38:	fbb2 f8f3 	udiv	r8, r2, r3
1a005c3c:	9401      	str	r4, [sp, #4]
1a005c3e:	d33a      	bcc.n	1a005cb6 <quorem+0xae>
1a005c40:	2500      	movs	r5, #0
1a005c42:	462a      	mov	r2, r5
1a005c44:	46b6      	mov	lr, r6
1a005c46:	46d4      	mov	ip, sl
1a005c48:	f85e 4b04 	ldr.w	r4, [lr], #4
1a005c4c:	f8dc 3000 	ldr.w	r3, [ip]
1a005c50:	fa1f fb84 	uxth.w	fp, r4
1a005c54:	fb08 550b 	mla	r5, r8, fp, r5
1a005c58:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a005c5c:	0c24      	lsrs	r4, r4, #16
1a005c5e:	fb08 b404 	mla	r4, r8, r4, fp
1a005c62:	b2ad      	uxth	r5, r5
1a005c64:	1b55      	subs	r5, r2, r5
1a005c66:	b2a2      	uxth	r2, r4
1a005c68:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a005c6c:	fa15 f383 	uxtah	r3, r5, r3
1a005c70:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a005c74:	b29b      	uxth	r3, r3
1a005c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a005c7a:	45f1      	cmp	r9, lr
1a005c7c:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a005c80:	f84c 3b04 	str.w	r3, [ip], #4
1a005c84:	ea4f 4222 	mov.w	r2, r2, asr #16
1a005c88:	d2de      	bcs.n	1a005c48 <quorem+0x40>
1a005c8a:	9b00      	ldr	r3, [sp, #0]
1a005c8c:	f85a 3003 	ldr.w	r3, [sl, r3]
1a005c90:	b98b      	cbnz	r3, 1a005cb6 <quorem+0xae>
1a005c92:	9a01      	ldr	r2, [sp, #4]
1a005c94:	1f13      	subs	r3, r2, #4
1a005c96:	459a      	cmp	sl, r3
1a005c98:	d20c      	bcs.n	1a005cb4 <quorem+0xac>
1a005c9a:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a005c9e:	b94b      	cbnz	r3, 1a005cb4 <quorem+0xac>
1a005ca0:	f1a2 0308 	sub.w	r3, r2, #8
1a005ca4:	e002      	b.n	1a005cac <quorem+0xa4>
1a005ca6:	681a      	ldr	r2, [r3, #0]
1a005ca8:	3b04      	subs	r3, #4
1a005caa:	b91a      	cbnz	r2, 1a005cb4 <quorem+0xac>
1a005cac:	459a      	cmp	sl, r3
1a005cae:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a005cb2:	d3f8      	bcc.n	1a005ca6 <quorem+0x9e>
1a005cb4:	6107      	str	r7, [r0, #16]
1a005cb6:	4604      	mov	r4, r0
1a005cb8:	f001 fc34 	bl	1a007524 <__mcmp>
1a005cbc:	2800      	cmp	r0, #0
1a005cbe:	db2d      	blt.n	1a005d1c <quorem+0x114>
1a005cc0:	f108 0801 	add.w	r8, r8, #1
1a005cc4:	4650      	mov	r0, sl
1a005cc6:	2300      	movs	r3, #0
1a005cc8:	f856 1b04 	ldr.w	r1, [r6], #4
1a005ccc:	6805      	ldr	r5, [r0, #0]
1a005cce:	b28a      	uxth	r2, r1
1a005cd0:	1a9a      	subs	r2, r3, r2
1a005cd2:	0c0b      	lsrs	r3, r1, #16
1a005cd4:	fa12 f285 	uxtah	r2, r2, r5
1a005cd8:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a005cdc:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a005ce0:	b292      	uxth	r2, r2
1a005ce2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a005ce6:	45b1      	cmp	r9, r6
1a005ce8:	f840 2b04 	str.w	r2, [r0], #4
1a005cec:	ea4f 4323 	mov.w	r3, r3, asr #16
1a005cf0:	d2ea      	bcs.n	1a005cc8 <quorem+0xc0>
1a005cf2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a005cf6:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a005cfa:	b97a      	cbnz	r2, 1a005d1c <quorem+0x114>
1a005cfc:	1f1a      	subs	r2, r3, #4
1a005cfe:	4592      	cmp	sl, r2
1a005d00:	d20b      	bcs.n	1a005d1a <quorem+0x112>
1a005d02:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a005d06:	b942      	cbnz	r2, 1a005d1a <quorem+0x112>
1a005d08:	3b08      	subs	r3, #8
1a005d0a:	e002      	b.n	1a005d12 <quorem+0x10a>
1a005d0c:	681a      	ldr	r2, [r3, #0]
1a005d0e:	3b04      	subs	r3, #4
1a005d10:	b91a      	cbnz	r2, 1a005d1a <quorem+0x112>
1a005d12:	459a      	cmp	sl, r3
1a005d14:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a005d18:	d3f8      	bcc.n	1a005d0c <quorem+0x104>
1a005d1a:	6127      	str	r7, [r4, #16]
1a005d1c:	4640      	mov	r0, r8
1a005d1e:	b003      	add	sp, #12
1a005d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005d24:	2000      	movs	r0, #0
1a005d26:	b003      	add	sp, #12
1a005d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005d2c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a005d30 <_dtoa_r>:
1a005d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005d34:	ec57 6b10 	vmov	r6, r7, d0
1a005d38:	b097      	sub	sp, #92	; 0x5c
1a005d3a:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a005d3c:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a005d3e:	9102      	str	r1, [sp, #8]
1a005d40:	4682      	mov	sl, r0
1a005d42:	920a      	str	r2, [sp, #40]	; 0x28
1a005d44:	9307      	str	r3, [sp, #28]
1a005d46:	e9cd 6700 	strd	r6, r7, [sp]
1a005d4a:	b155      	cbz	r5, 1a005d62 <_dtoa_r+0x32>
1a005d4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a005d4e:	606a      	str	r2, [r5, #4]
1a005d50:	2301      	movs	r3, #1
1a005d52:	4093      	lsls	r3, r2
1a005d54:	60ab      	str	r3, [r5, #8]
1a005d56:	4629      	mov	r1, r5
1a005d58:	f001 f9f8 	bl	1a00714c <_Bfree>
1a005d5c:	2300      	movs	r3, #0
1a005d5e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a005d62:	1e3e      	subs	r6, r7, #0
1a005d64:	bfb4      	ite	lt
1a005d66:	2301      	movlt	r3, #1
1a005d68:	2300      	movge	r3, #0
1a005d6a:	6023      	str	r3, [r4, #0]
1a005d6c:	4b76      	ldr	r3, [pc, #472]	; (1a005f48 <_dtoa_r+0x218>)
1a005d6e:	bfbc      	itt	lt
1a005d70:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a005d74:	9601      	strlt	r6, [sp, #4]
1a005d76:	43b3      	bics	r3, r6
1a005d78:	f000 80ae 	beq.w	1a005ed8 <_dtoa_r+0x1a8>
1a005d7c:	ed9d 7b00 	vldr	d7, [sp]
1a005d80:	2200      	movs	r2, #0
1a005d82:	2300      	movs	r3, #0
1a005d84:	ec51 0b17 	vmov	r0, r1, d7
1a005d88:	ed8d 7b04 	vstr	d7, [sp, #16]
1a005d8c:	f7fc ff28 	bl	1a002be0 <__aeabi_dcmpeq>
1a005d90:	4605      	mov	r5, r0
1a005d92:	b178      	cbz	r0, 1a005db4 <_dtoa_r+0x84>
1a005d94:	9a07      	ldr	r2, [sp, #28]
1a005d96:	2301      	movs	r3, #1
1a005d98:	6013      	str	r3, [r2, #0]
1a005d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005d9c:	2b00      	cmp	r3, #0
1a005d9e:	f000 8313 	beq.w	1a0063c8 <_dtoa_r+0x698>
1a005da2:	4b6a      	ldr	r3, [pc, #424]	; (1a005f4c <_dtoa_r+0x21c>)
1a005da4:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a005da6:	6013      	str	r3, [r2, #0]
1a005da8:	3b01      	subs	r3, #1
1a005daa:	9303      	str	r3, [sp, #12]
1a005dac:	9803      	ldr	r0, [sp, #12]
1a005dae:	b017      	add	sp, #92	; 0x5c
1a005db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005db4:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a005db8:	aa14      	add	r2, sp, #80	; 0x50
1a005dba:	a915      	add	r1, sp, #84	; 0x54
1a005dbc:	ec48 7b10 	vmov	d0, r7, r8
1a005dc0:	4650      	mov	r0, sl
1a005dc2:	f001 fc47 	bl	1a007654 <__d2b>
1a005dc6:	0d34      	lsrs	r4, r6, #20
1a005dc8:	4683      	mov	fp, r0
1a005dca:	f040 809b 	bne.w	1a005f04 <_dtoa_r+0x1d4>
1a005dce:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a005dd2:	442c      	add	r4, r5
1a005dd4:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a005dd8:	2b20      	cmp	r3, #32
1a005dda:	f340 83bb 	ble.w	1a006554 <_dtoa_r+0x824>
1a005dde:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a005de2:	409e      	lsls	r6, r3
1a005de4:	9b00      	ldr	r3, [sp, #0]
1a005de6:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a005dea:	fa23 f000 	lsr.w	r0, r3, r0
1a005dee:	4330      	orrs	r0, r6
1a005df0:	f7fc fc14 	bl	1a00261c <__aeabi_ui2d>
1a005df4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a005df8:	2101      	movs	r1, #1
1a005dfa:	4602      	mov	r2, r0
1a005dfc:	3c01      	subs	r4, #1
1a005dfe:	910e      	str	r1, [sp, #56]	; 0x38
1a005e00:	4610      	mov	r0, r2
1a005e02:	4619      	mov	r1, r3
1a005e04:	2200      	movs	r2, #0
1a005e06:	4b52      	ldr	r3, [pc, #328]	; (1a005f50 <_dtoa_r+0x220>)
1a005e08:	f7fc faca 	bl	1a0023a0 <__aeabi_dsub>
1a005e0c:	a348      	add	r3, pc, #288	; (adr r3, 1a005f30 <_dtoa_r+0x200>)
1a005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005e12:	f7fc fc7d 	bl	1a002710 <__aeabi_dmul>
1a005e16:	a348      	add	r3, pc, #288	; (adr r3, 1a005f38 <_dtoa_r+0x208>)
1a005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005e1c:	f7fc fac2 	bl	1a0023a4 <__adddf3>
1a005e20:	4606      	mov	r6, r0
1a005e22:	4620      	mov	r0, r4
1a005e24:	460f      	mov	r7, r1
1a005e26:	f7fc fc09 	bl	1a00263c <__aeabi_i2d>
1a005e2a:	a345      	add	r3, pc, #276	; (adr r3, 1a005f40 <_dtoa_r+0x210>)
1a005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005e30:	f7fc fc6e 	bl	1a002710 <__aeabi_dmul>
1a005e34:	4602      	mov	r2, r0
1a005e36:	460b      	mov	r3, r1
1a005e38:	4630      	mov	r0, r6
1a005e3a:	4639      	mov	r1, r7
1a005e3c:	f7fc fab2 	bl	1a0023a4 <__adddf3>
1a005e40:	4606      	mov	r6, r0
1a005e42:	460f      	mov	r7, r1
1a005e44:	f002 f836 	bl	1a007eb4 <__aeabi_d2iz>
1a005e48:	2200      	movs	r2, #0
1a005e4a:	4681      	mov	r9, r0
1a005e4c:	2300      	movs	r3, #0
1a005e4e:	4630      	mov	r0, r6
1a005e50:	4639      	mov	r1, r7
1a005e52:	f7fc fecf 	bl	1a002bf4 <__aeabi_dcmplt>
1a005e56:	2800      	cmp	r0, #0
1a005e58:	f040 82a9 	bne.w	1a0063ae <_dtoa_r+0x67e>
1a005e5c:	1b2c      	subs	r4, r5, r4
1a005e5e:	f1b9 0f16 	cmp.w	r9, #22
1a005e62:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
1a005e66:	f200 8296 	bhi.w	1a006396 <_dtoa_r+0x666>
1a005e6a:	4b3a      	ldr	r3, [pc, #232]	; (1a005f54 <_dtoa_r+0x224>)
1a005e6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005e74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005e78:	f7fc febc 	bl	1a002bf4 <__aeabi_dcmplt>
1a005e7c:	2800      	cmp	r0, #0
1a005e7e:	d06f      	beq.n	1a005f60 <_dtoa_r+0x230>
1a005e80:	2300      	movs	r3, #0
1a005e82:	f1b8 0f00 	cmp.w	r8, #0
1a005e86:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a005e8a:	930d      	str	r3, [sp, #52]	; 0x34
1a005e8c:	f2c0 8289 	blt.w	1a0063a2 <_dtoa_r+0x672>
1a005e90:	2300      	movs	r3, #0
1a005e92:	9308      	str	r3, [sp, #32]
1a005e94:	f1b9 0f00 	cmp.w	r9, #0
1a005e98:	da68      	bge.n	1a005f6c <_dtoa_r+0x23c>
1a005e9a:	9b08      	ldr	r3, [sp, #32]
1a005e9c:	f8cd 9018 	str.w	r9, [sp, #24]
1a005ea0:	eba3 0309 	sub.w	r3, r3, r9
1a005ea4:	9308      	str	r3, [sp, #32]
1a005ea6:	f1c9 0300 	rsb	r3, r9, #0
1a005eaa:	930c      	str	r3, [sp, #48]	; 0x30
1a005eac:	9b02      	ldr	r3, [sp, #8]
1a005eae:	2b09      	cmp	r3, #9
1a005eb0:	f04f 0900 	mov.w	r9, #0
1a005eb4:	d862      	bhi.n	1a005f7c <_dtoa_r+0x24c>
1a005eb6:	2b05      	cmp	r3, #5
1a005eb8:	f340 834a 	ble.w	1a006550 <_dtoa_r+0x820>
1a005ebc:	3b04      	subs	r3, #4
1a005ebe:	9302      	str	r3, [sp, #8]
1a005ec0:	2400      	movs	r4, #0
1a005ec2:	9b02      	ldr	r3, [sp, #8]
1a005ec4:	3b02      	subs	r3, #2
1a005ec6:	2b03      	cmp	r3, #3
1a005ec8:	f200 8641 	bhi.w	1a006b4e <_dtoa_r+0xe1e>
1a005ecc:	e8df f013 	tbh	[pc, r3, lsl #1]
1a005ed0:	04630466 	.word	0x04630466
1a005ed4:	0456043b 	.word	0x0456043b
1a005ed8:	9a07      	ldr	r2, [sp, #28]
1a005eda:	f242 730f 	movw	r3, #9999	; 0x270f
1a005ede:	6013      	str	r3, [r2, #0]
1a005ee0:	9b00      	ldr	r3, [sp, #0]
1a005ee2:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a005ee6:	4333      	orrs	r3, r6
1a005ee8:	d118      	bne.n	1a005f1c <_dtoa_r+0x1ec>
1a005eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005eec:	2b00      	cmp	r3, #0
1a005eee:	f000 8625 	beq.w	1a006b3c <_dtoa_r+0xe0c>
1a005ef2:	4b19      	ldr	r3, [pc, #100]	; (1a005f58 <_dtoa_r+0x228>)
1a005ef4:	9303      	str	r3, [sp, #12]
1a005ef6:	3308      	adds	r3, #8
1a005ef8:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a005efa:	9803      	ldr	r0, [sp, #12]
1a005efc:	6013      	str	r3, [r2, #0]
1a005efe:	b017      	add	sp, #92	; 0x5c
1a005f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005f04:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a005f08:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a005f0c:	950e      	str	r5, [sp, #56]	; 0x38
1a005f0e:	463a      	mov	r2, r7
1a005f10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a005f14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a005f18:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a005f1a:	e771      	b.n	1a005e00 <_dtoa_r+0xd0>
1a005f1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005f1e:	2b00      	cmp	r3, #0
1a005f20:	f040 8400 	bne.w	1a006724 <_dtoa_r+0x9f4>
1a005f24:	4b0d      	ldr	r3, [pc, #52]	; (1a005f5c <_dtoa_r+0x22c>)
1a005f26:	9303      	str	r3, [sp, #12]
1a005f28:	e740      	b.n	1a005dac <_dtoa_r+0x7c>
1a005f2a:	bf00      	nop
1a005f2c:	f3af 8000 	nop.w
1a005f30:	636f4361 	.word	0x636f4361
1a005f34:	3fd287a7 	.word	0x3fd287a7
1a005f38:	8b60c8b3 	.word	0x8b60c8b3
1a005f3c:	3fc68a28 	.word	0x3fc68a28
1a005f40:	509f79fb 	.word	0x509f79fb
1a005f44:	3fd34413 	.word	0x3fd34413
1a005f48:	7ff00000 	.word	0x7ff00000
1a005f4c:	1a0083ad 	.word	0x1a0083ad
1a005f50:	3ff80000 	.word	0x3ff80000
1a005f54:	1a008408 	.word	0x1a008408
1a005f58:	1a0083d4 	.word	0x1a0083d4
1a005f5c:	1a0083d0 	.word	0x1a0083d0
1a005f60:	f1b8 0f00 	cmp.w	r8, #0
1a005f64:	f2c0 84b6 	blt.w	1a0068d4 <_dtoa_r+0xba4>
1a005f68:	900d      	str	r0, [sp, #52]	; 0x34
1a005f6a:	9008      	str	r0, [sp, #32]
1a005f6c:	2300      	movs	r3, #0
1a005f6e:	930c      	str	r3, [sp, #48]	; 0x30
1a005f70:	9b02      	ldr	r3, [sp, #8]
1a005f72:	f8cd 9018 	str.w	r9, [sp, #24]
1a005f76:	2b09      	cmp	r3, #9
1a005f78:	44c8      	add	r8, r9
1a005f7a:	d99c      	bls.n	1a005eb6 <_dtoa_r+0x186>
1a005f7c:	2300      	movs	r3, #0
1a005f7e:	2401      	movs	r4, #1
1a005f80:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a005f84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a005f88:	9302      	str	r3, [sp, #8]
1a005f8a:	9509      	str	r5, [sp, #36]	; 0x24
1a005f8c:	2100      	movs	r1, #0
1a005f8e:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a005f92:	950f      	str	r5, [sp, #60]	; 0x3c
1a005f94:	4650      	mov	r0, sl
1a005f96:	f001 f8b3 	bl	1a007100 <_Balloc>
1a005f9a:	2d0e      	cmp	r5, #14
1a005f9c:	9003      	str	r0, [sp, #12]
1a005f9e:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a005fa2:	f200 810a 	bhi.w	1a0061ba <_dtoa_r+0x48a>
1a005fa6:	2c00      	cmp	r4, #0
1a005fa8:	f000 8107 	beq.w	1a0061ba <_dtoa_r+0x48a>
1a005fac:	9906      	ldr	r1, [sp, #24]
1a005fae:	2900      	cmp	r1, #0
1a005fb0:	f340 8466 	ble.w	1a006880 <_dtoa_r+0xb50>
1a005fb4:	4bb1      	ldr	r3, [pc, #708]	; (1a00627c <_dtoa_r+0x54c>)
1a005fb6:	f001 020f 	and.w	r2, r1, #15
1a005fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005fbe:	ed93 7b00 	vldr	d7, [r3]
1a005fc2:	110c      	asrs	r4, r1, #4
1a005fc4:	06e3      	lsls	r3, r4, #27
1a005fc6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a005fca:	f140 8406 	bpl.w	1a0067da <_dtoa_r+0xaaa>
1a005fce:	4bac      	ldr	r3, [pc, #688]	; (1a006280 <_dtoa_r+0x550>)
1a005fd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a005fd8:	f7fc fcc4 	bl	1a002964 <__aeabi_ddiv>
1a005fdc:	e9cd 0100 	strd	r0, r1, [sp]
1a005fe0:	f004 040f 	and.w	r4, r4, #15
1a005fe4:	2603      	movs	r6, #3
1a005fe6:	b17c      	cbz	r4, 1a006008 <_dtoa_r+0x2d8>
1a005fe8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005fec:	4da4      	ldr	r5, [pc, #656]	; (1a006280 <_dtoa_r+0x550>)
1a005fee:	07e7      	lsls	r7, r4, #31
1a005ff0:	d504      	bpl.n	1a005ffc <_dtoa_r+0x2cc>
1a005ff2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a005ff6:	f7fc fb8b 	bl	1a002710 <__aeabi_dmul>
1a005ffa:	3601      	adds	r6, #1
1a005ffc:	1064      	asrs	r4, r4, #1
1a005ffe:	f105 0508 	add.w	r5, r5, #8
1a006002:	d1f4      	bne.n	1a005fee <_dtoa_r+0x2be>
1a006004:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a006008:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00600c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a006010:	f7fc fca8 	bl	1a002964 <__aeabi_ddiv>
1a006014:	e9cd 0100 	strd	r0, r1, [sp]
1a006018:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00601a:	b153      	cbz	r3, 1a006032 <_dtoa_r+0x302>
1a00601c:	e9dd 4500 	ldrd	r4, r5, [sp]
1a006020:	2200      	movs	r2, #0
1a006022:	4b98      	ldr	r3, [pc, #608]	; (1a006284 <_dtoa_r+0x554>)
1a006024:	4620      	mov	r0, r4
1a006026:	4629      	mov	r1, r5
1a006028:	f7fc fde4 	bl	1a002bf4 <__aeabi_dcmplt>
1a00602c:	2800      	cmp	r0, #0
1a00602e:	f040 8521 	bne.w	1a006a74 <_dtoa_r+0xd44>
1a006032:	4630      	mov	r0, r6
1a006034:	f7fc fb02 	bl	1a00263c <__aeabi_i2d>
1a006038:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00603c:	f7fc fb68 	bl	1a002710 <__aeabi_dmul>
1a006040:	4b91      	ldr	r3, [pc, #580]	; (1a006288 <_dtoa_r+0x558>)
1a006042:	2200      	movs	r2, #0
1a006044:	f7fc f9ae 	bl	1a0023a4 <__adddf3>
1a006048:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00604a:	4604      	mov	r4, r0
1a00604c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a006050:	2b00      	cmp	r3, #0
1a006052:	f000 83f9 	beq.w	1a006848 <_dtoa_r+0xb18>
1a006056:	9b06      	ldr	r3, [sp, #24]
1a006058:	9312      	str	r3, [sp, #72]	; 0x48
1a00605a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00605c:	9310      	str	r3, [sp, #64]	; 0x40
1a00605e:	e9dd 6700 	ldrd	r6, r7, [sp]
1a006062:	4639      	mov	r1, r7
1a006064:	4630      	mov	r0, r6
1a006066:	f001 ff25 	bl	1a007eb4 <__aeabi_d2iz>
1a00606a:	9000      	str	r0, [sp, #0]
1a00606c:	f7fc fae6 	bl	1a00263c <__aeabi_i2d>
1a006070:	4602      	mov	r2, r0
1a006072:	460b      	mov	r3, r1
1a006074:	4630      	mov	r0, r6
1a006076:	4639      	mov	r1, r7
1a006078:	f7fc f992 	bl	1a0023a0 <__aeabi_dsub>
1a00607c:	4b7f      	ldr	r3, [pc, #508]	; (1a00627c <_dtoa_r+0x54c>)
1a00607e:	9a00      	ldr	r2, [sp, #0]
1a006080:	460f      	mov	r7, r1
1a006082:	9910      	ldr	r1, [sp, #64]	; 0x40
1a006084:	4606      	mov	r6, r0
1a006086:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a00608a:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a00608c:	9903      	ldr	r1, [sp, #12]
1a00608e:	3230      	adds	r2, #48	; 0x30
1a006090:	e9cd 4500 	strd	r4, r5, [sp]
1a006094:	b2d5      	uxtb	r5, r2
1a006096:	1c4c      	adds	r4, r1, #1
1a006098:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a00609c:	2800      	cmp	r0, #0
1a00609e:	f000 848d 	beq.w	1a0069bc <_dtoa_r+0xc8c>
1a0060a2:	2000      	movs	r0, #0
1a0060a4:	4979      	ldr	r1, [pc, #484]	; (1a00628c <_dtoa_r+0x55c>)
1a0060a6:	f7fc fc5d 	bl	1a002964 <__aeabi_ddiv>
1a0060aa:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0060ae:	f7fc f977 	bl	1a0023a0 <__aeabi_dsub>
1a0060b2:	9b03      	ldr	r3, [sp, #12]
1a0060b4:	4632      	mov	r2, r6
1a0060b6:	701d      	strb	r5, [r3, #0]
1a0060b8:	463b      	mov	r3, r7
1a0060ba:	e9cd 0100 	strd	r0, r1, [sp]
1a0060be:	f7fc fdb7 	bl	1a002c30 <__aeabi_dcmpgt>
1a0060c2:	2800      	cmp	r0, #0
1a0060c4:	f040 84ca 	bne.w	1a006a5c <_dtoa_r+0xd2c>
1a0060c8:	4632      	mov	r2, r6
1a0060ca:	463b      	mov	r3, r7
1a0060cc:	2000      	movs	r0, #0
1a0060ce:	496d      	ldr	r1, [pc, #436]	; (1a006284 <_dtoa_r+0x554>)
1a0060d0:	f7fc f966 	bl	1a0023a0 <__aeabi_dsub>
1a0060d4:	4602      	mov	r2, r0
1a0060d6:	460b      	mov	r3, r1
1a0060d8:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0060dc:	f7fc fda8 	bl	1a002c30 <__aeabi_dcmpgt>
1a0060e0:	2800      	cmp	r0, #0
1a0060e2:	f040 8526 	bne.w	1a006b32 <_dtoa_r+0xe02>
1a0060e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0060e8:	2b01      	cmp	r3, #1
1a0060ea:	d062      	beq.n	1a0061b2 <_dtoa_r+0x482>
1a0060ec:	9a03      	ldr	r2, [sp, #12]
1a0060ee:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a0060f2:	4413      	add	r3, r2
1a0060f4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a0060f8:	e9dd 8900 	ldrd	r8, r9, [sp]
1a0060fc:	f8cd b000 	str.w	fp, [sp]
1a006100:	46d3      	mov	fp, sl
1a006102:	469a      	mov	sl, r3
1a006104:	e00c      	b.n	1a006120 <_dtoa_r+0x3f0>
1a006106:	2000      	movs	r0, #0
1a006108:	495e      	ldr	r1, [pc, #376]	; (1a006284 <_dtoa_r+0x554>)
1a00610a:	f7fc f949 	bl	1a0023a0 <__aeabi_dsub>
1a00610e:	4642      	mov	r2, r8
1a006110:	464b      	mov	r3, r9
1a006112:	f7fc fd6f 	bl	1a002bf4 <__aeabi_dcmplt>
1a006116:	2800      	cmp	r0, #0
1a006118:	f040 84eb 	bne.w	1a006af2 <_dtoa_r+0xdc2>
1a00611c:	45a2      	cmp	sl, r4
1a00611e:	d041      	beq.n	1a0061a4 <_dtoa_r+0x474>
1a006120:	4640      	mov	r0, r8
1a006122:	4649      	mov	r1, r9
1a006124:	2200      	movs	r2, #0
1a006126:	4b5a      	ldr	r3, [pc, #360]	; (1a006290 <_dtoa_r+0x560>)
1a006128:	f7fc faf2 	bl	1a002710 <__aeabi_dmul>
1a00612c:	2200      	movs	r2, #0
1a00612e:	4b58      	ldr	r3, [pc, #352]	; (1a006290 <_dtoa_r+0x560>)
1a006130:	4680      	mov	r8, r0
1a006132:	4689      	mov	r9, r1
1a006134:	4630      	mov	r0, r6
1a006136:	4639      	mov	r1, r7
1a006138:	f7fc faea 	bl	1a002710 <__aeabi_dmul>
1a00613c:	460f      	mov	r7, r1
1a00613e:	4606      	mov	r6, r0
1a006140:	f001 feb8 	bl	1a007eb4 <__aeabi_d2iz>
1a006144:	4605      	mov	r5, r0
1a006146:	f7fc fa79 	bl	1a00263c <__aeabi_i2d>
1a00614a:	4602      	mov	r2, r0
1a00614c:	460b      	mov	r3, r1
1a00614e:	4630      	mov	r0, r6
1a006150:	4639      	mov	r1, r7
1a006152:	f7fc f925 	bl	1a0023a0 <__aeabi_dsub>
1a006156:	3530      	adds	r5, #48	; 0x30
1a006158:	b2ed      	uxtb	r5, r5
1a00615a:	4642      	mov	r2, r8
1a00615c:	464b      	mov	r3, r9
1a00615e:	f804 5b01 	strb.w	r5, [r4], #1
1a006162:	4606      	mov	r6, r0
1a006164:	460f      	mov	r7, r1
1a006166:	f7fc fd45 	bl	1a002bf4 <__aeabi_dcmplt>
1a00616a:	4632      	mov	r2, r6
1a00616c:	463b      	mov	r3, r7
1a00616e:	2800      	cmp	r0, #0
1a006170:	d0c9      	beq.n	1a006106 <_dtoa_r+0x3d6>
1a006172:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006174:	46da      	mov	sl, fp
1a006176:	3301      	adds	r3, #1
1a006178:	f8dd b000 	ldr.w	fp, [sp]
1a00617c:	9306      	str	r3, [sp, #24]
1a00617e:	4659      	mov	r1, fp
1a006180:	4650      	mov	r0, sl
1a006182:	f000 ffe3 	bl	1a00714c <_Bfree>
1a006186:	2300      	movs	r3, #0
1a006188:	7023      	strb	r3, [r4, #0]
1a00618a:	9b07      	ldr	r3, [sp, #28]
1a00618c:	461a      	mov	r2, r3
1a00618e:	9b06      	ldr	r3, [sp, #24]
1a006190:	6013      	str	r3, [r2, #0]
1a006192:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a006194:	2b00      	cmp	r3, #0
1a006196:	f43f ae09 	beq.w	1a005dac <_dtoa_r+0x7c>
1a00619a:	9803      	ldr	r0, [sp, #12]
1a00619c:	601c      	str	r4, [r3, #0]
1a00619e:	b017      	add	sp, #92	; 0x5c
1a0061a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0061a4:	46da      	mov	sl, fp
1a0061a6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a0061aa:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a0061ae:	f8dd b000 	ldr.w	fp, [sp]
1a0061b2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a0061b6:	e9cd 3400 	strd	r3, r4, [sp]
1a0061ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a0061bc:	2b00      	cmp	r3, #0
1a0061be:	f2c0 80c9 	blt.w	1a006354 <_dtoa_r+0x624>
1a0061c2:	9a06      	ldr	r2, [sp, #24]
1a0061c4:	2a0e      	cmp	r2, #14
1a0061c6:	f300 80c5 	bgt.w	1a006354 <_dtoa_r+0x624>
1a0061ca:	4b2c      	ldr	r3, [pc, #176]	; (1a00627c <_dtoa_r+0x54c>)
1a0061cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0061d0:	e9d3 8900 	ldrd	r8, r9, [r3]
1a0061d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0061d6:	2b00      	cmp	r3, #0
1a0061d8:	da17      	bge.n	1a00620a <_dtoa_r+0x4da>
1a0061da:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a0061dc:	2f00      	cmp	r7, #0
1a0061de:	dc14      	bgt.n	1a00620a <_dtoa_r+0x4da>
1a0061e0:	f040 834b 	bne.w	1a00687a <_dtoa_r+0xb4a>
1a0061e4:	2200      	movs	r2, #0
1a0061e6:	4b2b      	ldr	r3, [pc, #172]	; (1a006294 <_dtoa_r+0x564>)
1a0061e8:	4640      	mov	r0, r8
1a0061ea:	4649      	mov	r1, r9
1a0061ec:	f7fc fa90 	bl	1a002710 <__aeabi_dmul>
1a0061f0:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0061f4:	f7fc fd12 	bl	1a002c1c <__aeabi_dcmpge>
1a0061f8:	2800      	cmp	r0, #0
1a0061fa:	f000 83be 	beq.w	1a00697a <_dtoa_r+0xc4a>
1a0061fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a006200:	463d      	mov	r5, r7
1a006202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006204:	9c03      	ldr	r4, [sp, #12]
1a006206:	43db      	mvns	r3, r3
1a006208:	e260      	b.n	1a0066cc <_dtoa_r+0x99c>
1a00620a:	e9dd 4500 	ldrd	r4, r5, [sp]
1a00620e:	4642      	mov	r2, r8
1a006210:	464b      	mov	r3, r9
1a006212:	4620      	mov	r0, r4
1a006214:	4629      	mov	r1, r5
1a006216:	f7fc fba5 	bl	1a002964 <__aeabi_ddiv>
1a00621a:	f001 fe4b 	bl	1a007eb4 <__aeabi_d2iz>
1a00621e:	9000      	str	r0, [sp, #0]
1a006220:	f7fc fa0c 	bl	1a00263c <__aeabi_i2d>
1a006224:	4642      	mov	r2, r8
1a006226:	464b      	mov	r3, r9
1a006228:	f7fc fa72 	bl	1a002710 <__aeabi_dmul>
1a00622c:	4602      	mov	r2, r0
1a00622e:	460b      	mov	r3, r1
1a006230:	4620      	mov	r0, r4
1a006232:	4629      	mov	r1, r5
1a006234:	f7fc f8b4 	bl	1a0023a0 <__aeabi_dsub>
1a006238:	9b00      	ldr	r3, [sp, #0]
1a00623a:	9c03      	ldr	r4, [sp, #12]
1a00623c:	9a06      	ldr	r2, [sp, #24]
1a00623e:	3330      	adds	r3, #48	; 0x30
1a006240:	f804 3b01 	strb.w	r3, [r4], #1
1a006244:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006246:	3201      	adds	r2, #1
1a006248:	2b01      	cmp	r3, #1
1a00624a:	4606      	mov	r6, r0
1a00624c:	460f      	mov	r7, r1
1a00624e:	9206      	str	r2, [sp, #24]
1a006250:	d054      	beq.n	1a0062fc <_dtoa_r+0x5cc>
1a006252:	2200      	movs	r2, #0
1a006254:	4b0e      	ldr	r3, [pc, #56]	; (1a006290 <_dtoa_r+0x560>)
1a006256:	f7fc fa5b 	bl	1a002710 <__aeabi_dmul>
1a00625a:	2200      	movs	r2, #0
1a00625c:	2300      	movs	r3, #0
1a00625e:	4606      	mov	r6, r0
1a006260:	460f      	mov	r7, r1
1a006262:	f7fc fcbd 	bl	1a002be0 <__aeabi_dcmpeq>
1a006266:	2800      	cmp	r0, #0
1a006268:	d189      	bne.n	1a00617e <_dtoa_r+0x44e>
1a00626a:	f8cd b000 	str.w	fp, [sp]
1a00626e:	2501      	movs	r5, #1
1a006270:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a006274:	f8cd a008 	str.w	sl, [sp, #8]
1a006278:	e019      	b.n	1a0062ae <_dtoa_r+0x57e>
1a00627a:	bf00      	nop
1a00627c:	1a008408 	.word	0x1a008408
1a006280:	1a0083e0 	.word	0x1a0083e0
1a006284:	3ff00000 	.word	0x3ff00000
1a006288:	401c0000 	.word	0x401c0000
1a00628c:	3fe00000 	.word	0x3fe00000
1a006290:	40240000 	.word	0x40240000
1a006294:	40140000 	.word	0x40140000
1a006298:	f7fc fa3a 	bl	1a002710 <__aeabi_dmul>
1a00629c:	2200      	movs	r2, #0
1a00629e:	2300      	movs	r3, #0
1a0062a0:	4606      	mov	r6, r0
1a0062a2:	460f      	mov	r7, r1
1a0062a4:	f7fc fc9c 	bl	1a002be0 <__aeabi_dcmpeq>
1a0062a8:	2800      	cmp	r0, #0
1a0062aa:	f040 835c 	bne.w	1a006966 <_dtoa_r+0xc36>
1a0062ae:	4642      	mov	r2, r8
1a0062b0:	464b      	mov	r3, r9
1a0062b2:	4630      	mov	r0, r6
1a0062b4:	4639      	mov	r1, r7
1a0062b6:	f7fc fb55 	bl	1a002964 <__aeabi_ddiv>
1a0062ba:	f001 fdfb 	bl	1a007eb4 <__aeabi_d2iz>
1a0062be:	4682      	mov	sl, r0
1a0062c0:	f7fc f9bc 	bl	1a00263c <__aeabi_i2d>
1a0062c4:	4642      	mov	r2, r8
1a0062c6:	464b      	mov	r3, r9
1a0062c8:	f7fc fa22 	bl	1a002710 <__aeabi_dmul>
1a0062cc:	4602      	mov	r2, r0
1a0062ce:	460b      	mov	r3, r1
1a0062d0:	4630      	mov	r0, r6
1a0062d2:	4639      	mov	r1, r7
1a0062d4:	f7fc f864 	bl	1a0023a0 <__aeabi_dsub>
1a0062d8:	3501      	adds	r5, #1
1a0062da:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a0062de:	45ab      	cmp	fp, r5
1a0062e0:	4606      	mov	r6, r0
1a0062e2:	460f      	mov	r7, r1
1a0062e4:	f04f 0200 	mov.w	r2, #0
1a0062e8:	4ba7      	ldr	r3, [pc, #668]	; (1a006588 <_dtoa_r+0x858>)
1a0062ea:	f804 cb01 	strb.w	ip, [r4], #1
1a0062ee:	d1d3      	bne.n	1a006298 <_dtoa_r+0x568>
1a0062f0:	f8dd b000 	ldr.w	fp, [sp]
1a0062f4:	f8cd a000 	str.w	sl, [sp]
1a0062f8:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0062fc:	4632      	mov	r2, r6
1a0062fe:	463b      	mov	r3, r7
1a006300:	4630      	mov	r0, r6
1a006302:	4639      	mov	r1, r7
1a006304:	f7fc f84e 	bl	1a0023a4 <__adddf3>
1a006308:	4642      	mov	r2, r8
1a00630a:	464b      	mov	r3, r9
1a00630c:	4606      	mov	r6, r0
1a00630e:	460f      	mov	r7, r1
1a006310:	f7fc fc8e 	bl	1a002c30 <__aeabi_dcmpgt>
1a006314:	b960      	cbnz	r0, 1a006330 <_dtoa_r+0x600>
1a006316:	4642      	mov	r2, r8
1a006318:	464b      	mov	r3, r9
1a00631a:	4630      	mov	r0, r6
1a00631c:	4639      	mov	r1, r7
1a00631e:	f7fc fc5f 	bl	1a002be0 <__aeabi_dcmpeq>
1a006322:	2800      	cmp	r0, #0
1a006324:	f43f af2b 	beq.w	1a00617e <_dtoa_r+0x44e>
1a006328:	9b00      	ldr	r3, [sp, #0]
1a00632a:	07db      	lsls	r3, r3, #31
1a00632c:	f57f af27 	bpl.w	1a00617e <_dtoa_r+0x44e>
1a006330:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a006334:	9a03      	ldr	r2, [sp, #12]
1a006336:	1e63      	subs	r3, r4, #1
1a006338:	e004      	b.n	1a006344 <_dtoa_r+0x614>
1a00633a:	429a      	cmp	r2, r3
1a00633c:	f000 83c0 	beq.w	1a006ac0 <_dtoa_r+0xd90>
1a006340:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a006344:	2d39      	cmp	r5, #57	; 0x39
1a006346:	f103 0401 	add.w	r4, r3, #1
1a00634a:	d0f6      	beq.n	1a00633a <_dtoa_r+0x60a>
1a00634c:	1c6a      	adds	r2, r5, #1
1a00634e:	b2d2      	uxtb	r2, r2
1a006350:	701a      	strb	r2, [r3, #0]
1a006352:	e714      	b.n	1a00617e <_dtoa_r+0x44e>
1a006354:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a006356:	2a00      	cmp	r2, #0
1a006358:	d03c      	beq.n	1a0063d4 <_dtoa_r+0x6a4>
1a00635a:	9a02      	ldr	r2, [sp, #8]
1a00635c:	2a01      	cmp	r2, #1
1a00635e:	f340 8258 	ble.w	1a006812 <_dtoa_r+0xae2>
1a006362:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006364:	1e5e      	subs	r6, r3, #1
1a006366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006368:	42b3      	cmp	r3, r6
1a00636a:	f280 8234 	bge.w	1a0067d6 <_dtoa_r+0xaa6>
1a00636e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006370:	960c      	str	r6, [sp, #48]	; 0x30
1a006372:	1af3      	subs	r3, r6, r3
1a006374:	4499      	add	r9, r3
1a006376:	2600      	movs	r6, #0
1a006378:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00637a:	2b00      	cmp	r3, #0
1a00637c:	f2c0 82f8 	blt.w	1a006970 <_dtoa_r+0xc40>
1a006380:	9a08      	ldr	r2, [sp, #32]
1a006382:	4614      	mov	r4, r2
1a006384:	441a      	add	r2, r3
1a006386:	4498      	add	r8, r3
1a006388:	9208      	str	r2, [sp, #32]
1a00638a:	2101      	movs	r1, #1
1a00638c:	4650      	mov	r0, sl
1a00638e:	f000 ff7d 	bl	1a00728c <__i2b>
1a006392:	4605      	mov	r5, r0
1a006394:	e021      	b.n	1a0063da <_dtoa_r+0x6aa>
1a006396:	2301      	movs	r3, #1
1a006398:	f1b8 0f00 	cmp.w	r8, #0
1a00639c:	930d      	str	r3, [sp, #52]	; 0x34
1a00639e:	f6bf ad77 	bge.w	1a005e90 <_dtoa_r+0x160>
1a0063a2:	f1c4 0301 	rsb	r3, r4, #1
1a0063a6:	9308      	str	r3, [sp, #32]
1a0063a8:	f04f 0800 	mov.w	r8, #0
1a0063ac:	e572      	b.n	1a005e94 <_dtoa_r+0x164>
1a0063ae:	4648      	mov	r0, r9
1a0063b0:	f7fc f944 	bl	1a00263c <__aeabi_i2d>
1a0063b4:	4632      	mov	r2, r6
1a0063b6:	463b      	mov	r3, r7
1a0063b8:	f7fc fc12 	bl	1a002be0 <__aeabi_dcmpeq>
1a0063bc:	2800      	cmp	r0, #0
1a0063be:	f47f ad4d 	bne.w	1a005e5c <_dtoa_r+0x12c>
1a0063c2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a0063c6:	e549      	b.n	1a005e5c <_dtoa_r+0x12c>
1a0063c8:	4b70      	ldr	r3, [pc, #448]	; (1a00658c <_dtoa_r+0x85c>)
1a0063ca:	9303      	str	r3, [sp, #12]
1a0063cc:	9803      	ldr	r0, [sp, #12]
1a0063ce:	b017      	add	sp, #92	; 0x5c
1a0063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0063d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a0063d6:	9c08      	ldr	r4, [sp, #32]
1a0063d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0063da:	2c00      	cmp	r4, #0
1a0063dc:	dd0c      	ble.n	1a0063f8 <_dtoa_r+0x6c8>
1a0063de:	f1b8 0f00 	cmp.w	r8, #0
1a0063e2:	dd09      	ble.n	1a0063f8 <_dtoa_r+0x6c8>
1a0063e4:	4544      	cmp	r4, r8
1a0063e6:	9a08      	ldr	r2, [sp, #32]
1a0063e8:	4623      	mov	r3, r4
1a0063ea:	bfa8      	it	ge
1a0063ec:	4643      	movge	r3, r8
1a0063ee:	1ad2      	subs	r2, r2, r3
1a0063f0:	9208      	str	r2, [sp, #32]
1a0063f2:	1ae4      	subs	r4, r4, r3
1a0063f4:	eba8 0803 	sub.w	r8, r8, r3
1a0063f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0063fa:	b1d3      	cbz	r3, 1a006432 <_dtoa_r+0x702>
1a0063fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0063fe:	2b00      	cmp	r3, #0
1a006400:	f000 8189 	beq.w	1a006716 <_dtoa_r+0x9e6>
1a006404:	2e00      	cmp	r6, #0
1a006406:	dd10      	ble.n	1a00642a <_dtoa_r+0x6fa>
1a006408:	4629      	mov	r1, r5
1a00640a:	4632      	mov	r2, r6
1a00640c:	4650      	mov	r0, sl
1a00640e:	f000 ffdf 	bl	1a0073d0 <__pow5mult>
1a006412:	465a      	mov	r2, fp
1a006414:	4601      	mov	r1, r0
1a006416:	4605      	mov	r5, r0
1a006418:	4650      	mov	r0, sl
1a00641a:	f000 ff41 	bl	1a0072a0 <__multiply>
1a00641e:	4659      	mov	r1, fp
1a006420:	4607      	mov	r7, r0
1a006422:	4650      	mov	r0, sl
1a006424:	f000 fe92 	bl	1a00714c <_Bfree>
1a006428:	46bb      	mov	fp, r7
1a00642a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00642c:	1b9a      	subs	r2, r3, r6
1a00642e:	f040 8173 	bne.w	1a006718 <_dtoa_r+0x9e8>
1a006432:	2101      	movs	r1, #1
1a006434:	4650      	mov	r0, sl
1a006436:	f000 ff29 	bl	1a00728c <__i2b>
1a00643a:	f1b9 0f00 	cmp.w	r9, #0
1a00643e:	4607      	mov	r7, r0
1a006440:	f300 808e 	bgt.w	1a006560 <_dtoa_r+0x830>
1a006444:	9b02      	ldr	r3, [sp, #8]
1a006446:	2b01      	cmp	r3, #1
1a006448:	f340 8171 	ble.w	1a00672e <_dtoa_r+0x9fe>
1a00644c:	2600      	movs	r6, #0
1a00644e:	2001      	movs	r0, #1
1a006450:	f1b9 0f00 	cmp.w	r9, #0
1a006454:	f040 808f 	bne.w	1a006576 <_dtoa_r+0x846>
1a006458:	4440      	add	r0, r8
1a00645a:	f010 001f 	ands.w	r0, r0, #31
1a00645e:	d075      	beq.n	1a00654c <_dtoa_r+0x81c>
1a006460:	f1c0 0320 	rsb	r3, r0, #32
1a006464:	2b04      	cmp	r3, #4
1a006466:	f340 836d 	ble.w	1a006b44 <_dtoa_r+0xe14>
1a00646a:	f1c0 001c 	rsb	r0, r0, #28
1a00646e:	9b08      	ldr	r3, [sp, #32]
1a006470:	4403      	add	r3, r0
1a006472:	9308      	str	r3, [sp, #32]
1a006474:	4404      	add	r4, r0
1a006476:	4480      	add	r8, r0
1a006478:	9b08      	ldr	r3, [sp, #32]
1a00647a:	2b00      	cmp	r3, #0
1a00647c:	dd05      	ble.n	1a00648a <_dtoa_r+0x75a>
1a00647e:	4659      	mov	r1, fp
1a006480:	461a      	mov	r2, r3
1a006482:	4650      	mov	r0, sl
1a006484:	f000 fff4 	bl	1a007470 <__lshift>
1a006488:	4683      	mov	fp, r0
1a00648a:	f1b8 0f00 	cmp.w	r8, #0
1a00648e:	dd05      	ble.n	1a00649c <_dtoa_r+0x76c>
1a006490:	4639      	mov	r1, r7
1a006492:	4642      	mov	r2, r8
1a006494:	4650      	mov	r0, sl
1a006496:	f000 ffeb 	bl	1a007470 <__lshift>
1a00649a:	4607      	mov	r7, r0
1a00649c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00649e:	2b00      	cmp	r3, #0
1a0064a0:	f040 811e 	bne.w	1a0066e0 <_dtoa_r+0x9b0>
1a0064a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0064a6:	2b00      	cmp	r3, #0
1a0064a8:	f340 80f5 	ble.w	1a006696 <_dtoa_r+0x966>
1a0064ac:	9b06      	ldr	r3, [sp, #24]
1a0064ae:	3301      	adds	r3, #1
1a0064b0:	9306      	str	r3, [sp, #24]
1a0064b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0064b4:	2b00      	cmp	r3, #0
1a0064b6:	d177      	bne.n	1a0065a8 <_dtoa_r+0x878>
1a0064b8:	9c03      	ldr	r4, [sp, #12]
1a0064ba:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0064be:	2601      	movs	r6, #1
1a0064c0:	e003      	b.n	1a0064ca <_dtoa_r+0x79a>
1a0064c2:	f000 fe4d 	bl	1a007160 <__multadd>
1a0064c6:	3601      	adds	r6, #1
1a0064c8:	4683      	mov	fp, r0
1a0064ca:	4639      	mov	r1, r7
1a0064cc:	4658      	mov	r0, fp
1a0064ce:	f7ff fb9b 	bl	1a005c08 <quorem>
1a0064d2:	4546      	cmp	r6, r8
1a0064d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a0064d8:	f804 9b01 	strb.w	r9, [r4], #1
1a0064dc:	f04f 0300 	mov.w	r3, #0
1a0064e0:	f04f 020a 	mov.w	r2, #10
1a0064e4:	4659      	mov	r1, fp
1a0064e6:	4650      	mov	r0, sl
1a0064e8:	dbeb      	blt.n	1a0064c2 <_dtoa_r+0x792>
1a0064ea:	2300      	movs	r3, #0
1a0064ec:	9300      	str	r3, [sp, #0]
1a0064ee:	4659      	mov	r1, fp
1a0064f0:	2201      	movs	r2, #1
1a0064f2:	4650      	mov	r0, sl
1a0064f4:	f000 ffbc 	bl	1a007470 <__lshift>
1a0064f8:	4639      	mov	r1, r7
1a0064fa:	4683      	mov	fp, r0
1a0064fc:	f001 f812 	bl	1a007524 <__mcmp>
1a006500:	2800      	cmp	r0, #0
1a006502:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a006506:	f340 816f 	ble.w	1a0067e8 <_dtoa_r+0xab8>
1a00650a:	1e63      	subs	r3, r4, #1
1a00650c:	9903      	ldr	r1, [sp, #12]
1a00650e:	e004      	b.n	1a00651a <_dtoa_r+0x7ea>
1a006510:	4299      	cmp	r1, r3
1a006512:	f000 8177 	beq.w	1a006804 <_dtoa_r+0xad4>
1a006516:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00651a:	2a39      	cmp	r2, #57	; 0x39
1a00651c:	f103 0401 	add.w	r4, r3, #1
1a006520:	d0f6      	beq.n	1a006510 <_dtoa_r+0x7e0>
1a006522:	3201      	adds	r2, #1
1a006524:	701a      	strb	r2, [r3, #0]
1a006526:	4639      	mov	r1, r7
1a006528:	4650      	mov	r0, sl
1a00652a:	f000 fe0f 	bl	1a00714c <_Bfree>
1a00652e:	2d00      	cmp	r5, #0
1a006530:	f43f ae25 	beq.w	1a00617e <_dtoa_r+0x44e>
1a006534:	9900      	ldr	r1, [sp, #0]
1a006536:	b121      	cbz	r1, 1a006542 <_dtoa_r+0x812>
1a006538:	42a9      	cmp	r1, r5
1a00653a:	d002      	beq.n	1a006542 <_dtoa_r+0x812>
1a00653c:	4650      	mov	r0, sl
1a00653e:	f000 fe05 	bl	1a00714c <_Bfree>
1a006542:	4629      	mov	r1, r5
1a006544:	4650      	mov	r0, sl
1a006546:	f000 fe01 	bl	1a00714c <_Bfree>
1a00654a:	e618      	b.n	1a00617e <_dtoa_r+0x44e>
1a00654c:	201c      	movs	r0, #28
1a00654e:	e78e      	b.n	1a00646e <_dtoa_r+0x73e>
1a006550:	2401      	movs	r4, #1
1a006552:	e4b6      	b.n	1a005ec2 <_dtoa_r+0x192>
1a006554:	f1c3 0620 	rsb	r6, r3, #32
1a006558:	9b00      	ldr	r3, [sp, #0]
1a00655a:	fa03 f006 	lsl.w	r0, r3, r6
1a00655e:	e447      	b.n	1a005df0 <_dtoa_r+0xc0>
1a006560:	4601      	mov	r1, r0
1a006562:	464a      	mov	r2, r9
1a006564:	4650      	mov	r0, sl
1a006566:	f000 ff33 	bl	1a0073d0 <__pow5mult>
1a00656a:	9b02      	ldr	r3, [sp, #8]
1a00656c:	2b01      	cmp	r3, #1
1a00656e:	4607      	mov	r7, r0
1a006570:	f340 81b2 	ble.w	1a0068d8 <_dtoa_r+0xba8>
1a006574:	2600      	movs	r6, #0
1a006576:	693b      	ldr	r3, [r7, #16]
1a006578:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a00657c:	6918      	ldr	r0, [r3, #16]
1a00657e:	f000 fe35 	bl	1a0071ec <__hi0bits>
1a006582:	f1c0 0020 	rsb	r0, r0, #32
1a006586:	e767      	b.n	1a006458 <_dtoa_r+0x728>
1a006588:	40240000 	.word	0x40240000
1a00658c:	1a0083ac 	.word	0x1a0083ac
1a006590:	4629      	mov	r1, r5
1a006592:	2300      	movs	r3, #0
1a006594:	220a      	movs	r2, #10
1a006596:	4650      	mov	r0, sl
1a006598:	f000 fde2 	bl	1a007160 <__multadd>
1a00659c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00659e:	2b00      	cmp	r3, #0
1a0065a0:	4605      	mov	r5, r0
1a0065a2:	f340 82c1 	ble.w	1a006b28 <_dtoa_r+0xdf8>
1a0065a6:	9309      	str	r3, [sp, #36]	; 0x24
1a0065a8:	2c00      	cmp	r4, #0
1a0065aa:	f300 810d 	bgt.w	1a0067c8 <_dtoa_r+0xa98>
1a0065ae:	2e00      	cmp	r6, #0
1a0065b0:	f040 81c5 	bne.w	1a00693e <_dtoa_r+0xc0e>
1a0065b4:	46a8      	mov	r8, r5
1a0065b6:	9b00      	ldr	r3, [sp, #0]
1a0065b8:	9902      	ldr	r1, [sp, #8]
1a0065ba:	9e03      	ldr	r6, [sp, #12]
1a0065bc:	f003 0201 	and.w	r2, r3, #1
1a0065c0:	920b      	str	r2, [sp, #44]	; 0x2c
1a0065c2:	430a      	orrs	r2, r1
1a0065c4:	920a      	str	r2, [sp, #40]	; 0x28
1a0065c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0065c8:	1e73      	subs	r3, r6, #1
1a0065ca:	441a      	add	r2, r3
1a0065cc:	9209      	str	r2, [sp, #36]	; 0x24
1a0065ce:	463c      	mov	r4, r7
1a0065d0:	4621      	mov	r1, r4
1a0065d2:	4658      	mov	r0, fp
1a0065d4:	f7ff fb18 	bl	1a005c08 <quorem>
1a0065d8:	4629      	mov	r1, r5
1a0065da:	9000      	str	r0, [sp, #0]
1a0065dc:	4658      	mov	r0, fp
1a0065de:	f000 ffa1 	bl	1a007524 <__mcmp>
1a0065e2:	4642      	mov	r2, r8
1a0065e4:	4607      	mov	r7, r0
1a0065e6:	4621      	mov	r1, r4
1a0065e8:	4650      	mov	r0, sl
1a0065ea:	f000 ffb7 	bl	1a00755c <__mdiff>
1a0065ee:	9b00      	ldr	r3, [sp, #0]
1a0065f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a0065f4:	68c3      	ldr	r3, [r0, #12]
1a0065f6:	4681      	mov	r9, r0
1a0065f8:	2b00      	cmp	r3, #0
1a0065fa:	d13e      	bne.n	1a00667a <_dtoa_r+0x94a>
1a0065fc:	4601      	mov	r1, r0
1a0065fe:	4658      	mov	r0, fp
1a006600:	9208      	str	r2, [sp, #32]
1a006602:	f000 ff8f 	bl	1a007524 <__mcmp>
1a006606:	4649      	mov	r1, r9
1a006608:	9004      	str	r0, [sp, #16]
1a00660a:	4650      	mov	r0, sl
1a00660c:	f000 fd9e 	bl	1a00714c <_Bfree>
1a006610:	9b04      	ldr	r3, [sp, #16]
1a006612:	9a08      	ldr	r2, [sp, #32]
1a006614:	b91b      	cbnz	r3, 1a00661e <_dtoa_r+0x8ee>
1a006616:	990a      	ldr	r1, [sp, #40]	; 0x28
1a006618:	2900      	cmp	r1, #0
1a00661a:	f000 8271 	beq.w	1a006b00 <_dtoa_r+0xdd0>
1a00661e:	2f00      	cmp	r7, #0
1a006620:	f106 0901 	add.w	r9, r6, #1
1a006624:	f2c0 816e 	blt.w	1a006904 <_dtoa_r+0xbd4>
1a006628:	9902      	ldr	r1, [sp, #8]
1a00662a:	430f      	orrs	r7, r1
1a00662c:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a00662e:	4339      	orrs	r1, r7
1a006630:	f000 8168 	beq.w	1a006904 <_dtoa_r+0xbd4>
1a006634:	2b00      	cmp	r3, #0
1a006636:	f300 81a2 	bgt.w	1a00697e <_dtoa_r+0xc4e>
1a00663a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00663c:	7032      	strb	r2, [r6, #0]
1a00663e:	42b3      	cmp	r3, r6
1a006640:	f000 81a9 	beq.w	1a006996 <_dtoa_r+0xc66>
1a006644:	4659      	mov	r1, fp
1a006646:	2300      	movs	r3, #0
1a006648:	220a      	movs	r2, #10
1a00664a:	4650      	mov	r0, sl
1a00664c:	f000 fd88 	bl	1a007160 <__multadd>
1a006650:	4545      	cmp	r5, r8
1a006652:	4683      	mov	fp, r0
1a006654:	4629      	mov	r1, r5
1a006656:	f04f 0300 	mov.w	r3, #0
1a00665a:	f04f 020a 	mov.w	r2, #10
1a00665e:	4650      	mov	r0, sl
1a006660:	d013      	beq.n	1a00668a <_dtoa_r+0x95a>
1a006662:	f000 fd7d 	bl	1a007160 <__multadd>
1a006666:	4641      	mov	r1, r8
1a006668:	4605      	mov	r5, r0
1a00666a:	2300      	movs	r3, #0
1a00666c:	220a      	movs	r2, #10
1a00666e:	4650      	mov	r0, sl
1a006670:	f000 fd76 	bl	1a007160 <__multadd>
1a006674:	464e      	mov	r6, r9
1a006676:	4680      	mov	r8, r0
1a006678:	e7aa      	b.n	1a0065d0 <_dtoa_r+0x8a0>
1a00667a:	4601      	mov	r1, r0
1a00667c:	4650      	mov	r0, sl
1a00667e:	9204      	str	r2, [sp, #16]
1a006680:	f000 fd64 	bl	1a00714c <_Bfree>
1a006684:	2301      	movs	r3, #1
1a006686:	9a04      	ldr	r2, [sp, #16]
1a006688:	e7c9      	b.n	1a00661e <_dtoa_r+0x8ee>
1a00668a:	f000 fd69 	bl	1a007160 <__multadd>
1a00668e:	464e      	mov	r6, r9
1a006690:	4605      	mov	r5, r0
1a006692:	4680      	mov	r8, r0
1a006694:	e79c      	b.n	1a0065d0 <_dtoa_r+0x8a0>
1a006696:	9b02      	ldr	r3, [sp, #8]
1a006698:	2b02      	cmp	r3, #2
1a00669a:	f340 8082 	ble.w	1a0067a2 <_dtoa_r+0xa72>
1a00669e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0066a0:	2b00      	cmp	r3, #0
1a0066a2:	f47f adae 	bne.w	1a006202 <_dtoa_r+0x4d2>
1a0066a6:	4639      	mov	r1, r7
1a0066a8:	2205      	movs	r2, #5
1a0066aa:	4650      	mov	r0, sl
1a0066ac:	f000 fd58 	bl	1a007160 <__multadd>
1a0066b0:	4601      	mov	r1, r0
1a0066b2:	4607      	mov	r7, r0
1a0066b4:	4658      	mov	r0, fp
1a0066b6:	f000 ff35 	bl	1a007524 <__mcmp>
1a0066ba:	2800      	cmp	r0, #0
1a0066bc:	f77f ada1 	ble.w	1a006202 <_dtoa_r+0x4d2>
1a0066c0:	9c03      	ldr	r4, [sp, #12]
1a0066c2:	9b06      	ldr	r3, [sp, #24]
1a0066c4:	2231      	movs	r2, #49	; 0x31
1a0066c6:	f804 2b01 	strb.w	r2, [r4], #1
1a0066ca:	3301      	adds	r3, #1
1a0066cc:	3301      	adds	r3, #1
1a0066ce:	4639      	mov	r1, r7
1a0066d0:	4650      	mov	r0, sl
1a0066d2:	9306      	str	r3, [sp, #24]
1a0066d4:	f000 fd3a 	bl	1a00714c <_Bfree>
1a0066d8:	2d00      	cmp	r5, #0
1a0066da:	f47f af32 	bne.w	1a006542 <_dtoa_r+0x812>
1a0066de:	e54e      	b.n	1a00617e <_dtoa_r+0x44e>
1a0066e0:	4639      	mov	r1, r7
1a0066e2:	4658      	mov	r0, fp
1a0066e4:	f000 ff1e 	bl	1a007524 <__mcmp>
1a0066e8:	2800      	cmp	r0, #0
1a0066ea:	f6bf aedb 	bge.w	1a0064a4 <_dtoa_r+0x774>
1a0066ee:	4659      	mov	r1, fp
1a0066f0:	2300      	movs	r3, #0
1a0066f2:	220a      	movs	r2, #10
1a0066f4:	4650      	mov	r0, sl
1a0066f6:	f000 fd33 	bl	1a007160 <__multadd>
1a0066fa:	9b06      	ldr	r3, [sp, #24]
1a0066fc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a006700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a006702:	4683      	mov	fp, r0
1a006704:	2b00      	cmp	r3, #0
1a006706:	f47f af43 	bne.w	1a006590 <_dtoa_r+0x860>
1a00670a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00670c:	2b00      	cmp	r3, #0
1a00670e:	f340 8202 	ble.w	1a006b16 <_dtoa_r+0xde6>
1a006712:	9309      	str	r3, [sp, #36]	; 0x24
1a006714:	e6d0      	b.n	1a0064b8 <_dtoa_r+0x788>
1a006716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a006718:	4659      	mov	r1, fp
1a00671a:	4650      	mov	r0, sl
1a00671c:	f000 fe58 	bl	1a0073d0 <__pow5mult>
1a006720:	4683      	mov	fp, r0
1a006722:	e686      	b.n	1a006432 <_dtoa_r+0x702>
1a006724:	4b9f      	ldr	r3, [pc, #636]	; (1a0069a4 <_dtoa_r+0xc74>)
1a006726:	9303      	str	r3, [sp, #12]
1a006728:	3303      	adds	r3, #3
1a00672a:	f7ff bbe5 	b.w	1a005ef8 <_dtoa_r+0x1c8>
1a00672e:	e9dd 1200 	ldrd	r1, r2, [sp]
1a006732:	2900      	cmp	r1, #0
1a006734:	f47f ae8a 	bne.w	1a00644c <_dtoa_r+0x71c>
1a006738:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00673c:	2b00      	cmp	r3, #0
1a00673e:	f000 80d5 	beq.w	1a0068ec <_dtoa_r+0xbbc>
1a006742:	9e00      	ldr	r6, [sp, #0]
1a006744:	e683      	b.n	1a00644e <_dtoa_r+0x71e>
1a006746:	2301      	movs	r3, #1
1a006748:	930b      	str	r3, [sp, #44]	; 0x2c
1a00674a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00674c:	2800      	cmp	r0, #0
1a00674e:	dd46      	ble.n	1a0067de <_dtoa_r+0xaae>
1a006750:	900f      	str	r0, [sp, #60]	; 0x3c
1a006752:	9009      	str	r0, [sp, #36]	; 0x24
1a006754:	2100      	movs	r1, #0
1a006756:	2817      	cmp	r0, #23
1a006758:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00675c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00675e:	f77f ac19 	ble.w	1a005f94 <_dtoa_r+0x264>
1a006762:	2201      	movs	r2, #1
1a006764:	2304      	movs	r3, #4
1a006766:	005b      	lsls	r3, r3, #1
1a006768:	f103 0614 	add.w	r6, r3, #20
1a00676c:	42b0      	cmp	r0, r6
1a00676e:	4611      	mov	r1, r2
1a006770:	f102 0201 	add.w	r2, r2, #1
1a006774:	d2f7      	bcs.n	1a006766 <_dtoa_r+0xa36>
1a006776:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00677a:	e40b      	b.n	1a005f94 <_dtoa_r+0x264>
1a00677c:	2301      	movs	r3, #1
1a00677e:	930b      	str	r3, [sp, #44]	; 0x2c
1a006780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006782:	9a06      	ldr	r2, [sp, #24]
1a006784:	4413      	add	r3, r2
1a006786:	930f      	str	r3, [sp, #60]	; 0x3c
1a006788:	3301      	adds	r3, #1
1a00678a:	2b01      	cmp	r3, #1
1a00678c:	4618      	mov	r0, r3
1a00678e:	9309      	str	r3, [sp, #36]	; 0x24
1a006790:	bfb8      	it	lt
1a006792:	2001      	movlt	r0, #1
1a006794:	e7de      	b.n	1a006754 <_dtoa_r+0xa24>
1a006796:	2300      	movs	r3, #0
1a006798:	930b      	str	r3, [sp, #44]	; 0x2c
1a00679a:	e7f1      	b.n	1a006780 <_dtoa_r+0xa50>
1a00679c:	2300      	movs	r3, #0
1a00679e:	930b      	str	r3, [sp, #44]	; 0x2c
1a0067a0:	e7d3      	b.n	1a00674a <_dtoa_r+0xa1a>
1a0067a2:	9b06      	ldr	r3, [sp, #24]
1a0067a4:	3301      	adds	r3, #1
1a0067a6:	9306      	str	r3, [sp, #24]
1a0067a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0067aa:	2b00      	cmp	r3, #0
1a0067ac:	f47f aefc 	bne.w	1a0065a8 <_dtoa_r+0x878>
1a0067b0:	4639      	mov	r1, r7
1a0067b2:	4658      	mov	r0, fp
1a0067b4:	f7ff fa28 	bl	1a005c08 <quorem>
1a0067b8:	9c03      	ldr	r4, [sp, #12]
1a0067ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a0067be:	2300      	movs	r3, #0
1a0067c0:	f804 9b01 	strb.w	r9, [r4], #1
1a0067c4:	9300      	str	r3, [sp, #0]
1a0067c6:	e692      	b.n	1a0064ee <_dtoa_r+0x7be>
1a0067c8:	4629      	mov	r1, r5
1a0067ca:	4622      	mov	r2, r4
1a0067cc:	4650      	mov	r0, sl
1a0067ce:	f000 fe4f 	bl	1a007470 <__lshift>
1a0067d2:	4605      	mov	r5, r0
1a0067d4:	e6eb      	b.n	1a0065ae <_dtoa_r+0x87e>
1a0067d6:	1b9e      	subs	r6, r3, r6
1a0067d8:	e5ce      	b.n	1a006378 <_dtoa_r+0x648>
1a0067da:	2602      	movs	r6, #2
1a0067dc:	e403      	b.n	1a005fe6 <_dtoa_r+0x2b6>
1a0067de:	2501      	movs	r5, #1
1a0067e0:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a0067e4:	f7ff bbd2 	b.w	1a005f8c <_dtoa_r+0x25c>
1a0067e8:	d103      	bne.n	1a0067f2 <_dtoa_r+0xac2>
1a0067ea:	f019 0f01 	tst.w	r9, #1
1a0067ee:	f47f ae8c 	bne.w	1a00650a <_dtoa_r+0x7da>
1a0067f2:	1e63      	subs	r3, r4, #1
1a0067f4:	e001      	b.n	1a0067fa <_dtoa_r+0xaca>
1a0067f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a0067fa:	2a30      	cmp	r2, #48	; 0x30
1a0067fc:	f103 0401 	add.w	r4, r3, #1
1a006800:	d0f9      	beq.n	1a0067f6 <_dtoa_r+0xac6>
1a006802:	e690      	b.n	1a006526 <_dtoa_r+0x7f6>
1a006804:	9a06      	ldr	r2, [sp, #24]
1a006806:	3201      	adds	r2, #1
1a006808:	9206      	str	r2, [sp, #24]
1a00680a:	9a03      	ldr	r2, [sp, #12]
1a00680c:	2331      	movs	r3, #49	; 0x31
1a00680e:	7013      	strb	r3, [r2, #0]
1a006810:	e689      	b.n	1a006526 <_dtoa_r+0x7f6>
1a006812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a006814:	2a00      	cmp	r2, #0
1a006816:	f000 8126 	beq.w	1a006a66 <_dtoa_r+0xd36>
1a00681a:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a00681e:	9a08      	ldr	r2, [sp, #32]
1a006820:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a006822:	4614      	mov	r4, r2
1a006824:	441a      	add	r2, r3
1a006826:	4498      	add	r8, r3
1a006828:	9208      	str	r2, [sp, #32]
1a00682a:	e5ae      	b.n	1a00638a <_dtoa_r+0x65a>
1a00682c:	4630      	mov	r0, r6
1a00682e:	f7fb ff05 	bl	1a00263c <__aeabi_i2d>
1a006832:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006836:	f7fb ff6b 	bl	1a002710 <__aeabi_dmul>
1a00683a:	2200      	movs	r2, #0
1a00683c:	4b5a      	ldr	r3, [pc, #360]	; (1a0069a8 <_dtoa_r+0xc78>)
1a00683e:	f7fb fdb1 	bl	1a0023a4 <__adddf3>
1a006842:	4604      	mov	r4, r0
1a006844:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a006848:	2200      	movs	r2, #0
1a00684a:	4b58      	ldr	r3, [pc, #352]	; (1a0069ac <_dtoa_r+0xc7c>)
1a00684c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006850:	f7fb fda6 	bl	1a0023a0 <__aeabi_dsub>
1a006854:	4622      	mov	r2, r4
1a006856:	462b      	mov	r3, r5
1a006858:	4606      	mov	r6, r0
1a00685a:	460f      	mov	r7, r1
1a00685c:	f7fc f9e8 	bl	1a002c30 <__aeabi_dcmpgt>
1a006860:	2800      	cmp	r0, #0
1a006862:	f040 8089 	bne.w	1a006978 <_dtoa_r+0xc48>
1a006866:	4622      	mov	r2, r4
1a006868:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a00686c:	4630      	mov	r0, r6
1a00686e:	4639      	mov	r1, r7
1a006870:	f7fc f9c0 	bl	1a002bf4 <__aeabi_dcmplt>
1a006874:	2800      	cmp	r0, #0
1a006876:	f43f ac9c 	beq.w	1a0061b2 <_dtoa_r+0x482>
1a00687a:	2700      	movs	r7, #0
1a00687c:	463d      	mov	r5, r7
1a00687e:	e4c0      	b.n	1a006202 <_dtoa_r+0x4d2>
1a006880:	f000 80f5 	beq.w	1a006a6e <_dtoa_r+0xd3e>
1a006884:	9b06      	ldr	r3, [sp, #24]
1a006886:	425c      	negs	r4, r3
1a006888:	4b49      	ldr	r3, [pc, #292]	; (1a0069b0 <_dtoa_r+0xc80>)
1a00688a:	f004 020f 	and.w	r2, r4, #15
1a00688e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a006892:	e9d3 2300 	ldrd	r2, r3, [r3]
1a006896:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00689a:	f7fb ff39 	bl	1a002710 <__aeabi_dmul>
1a00689e:	1124      	asrs	r4, r4, #4
1a0068a0:	e9cd 0100 	strd	r0, r1, [sp]
1a0068a4:	f000 80e3 	beq.w	1a006a6e <_dtoa_r+0xd3e>
1a0068a8:	4d42      	ldr	r5, [pc, #264]	; (1a0069b4 <_dtoa_r+0xc84>)
1a0068aa:	2300      	movs	r3, #0
1a0068ac:	2602      	movs	r6, #2
1a0068ae:	07e2      	lsls	r2, r4, #31
1a0068b0:	d505      	bpl.n	1a0068be <_dtoa_r+0xb8e>
1a0068b2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a0068b6:	f7fb ff2b 	bl	1a002710 <__aeabi_dmul>
1a0068ba:	3601      	adds	r6, #1
1a0068bc:	2301      	movs	r3, #1
1a0068be:	1064      	asrs	r4, r4, #1
1a0068c0:	f105 0508 	add.w	r5, r5, #8
1a0068c4:	d1f3      	bne.n	1a0068ae <_dtoa_r+0xb7e>
1a0068c6:	2b00      	cmp	r3, #0
1a0068c8:	f43f aba6 	beq.w	1a006018 <_dtoa_r+0x2e8>
1a0068cc:	e9cd 0100 	strd	r0, r1, [sp]
1a0068d0:	f7ff bba2 	b.w	1a006018 <_dtoa_r+0x2e8>
1a0068d4:	900d      	str	r0, [sp, #52]	; 0x34
1a0068d6:	e564      	b.n	1a0063a2 <_dtoa_r+0x672>
1a0068d8:	e9dd 1200 	ldrd	r1, r2, [sp]
1a0068dc:	2900      	cmp	r1, #0
1a0068de:	f47f ae49 	bne.w	1a006574 <_dtoa_r+0x844>
1a0068e2:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a0068e6:	2b00      	cmp	r3, #0
1a0068e8:	f47f ae44 	bne.w	1a006574 <_dtoa_r+0x844>
1a0068ec:	4e32      	ldr	r6, [pc, #200]	; (1a0069b8 <_dtoa_r+0xc88>)
1a0068ee:	4016      	ands	r6, r2
1a0068f0:	2e00      	cmp	r6, #0
1a0068f2:	f43f adac 	beq.w	1a00644e <_dtoa_r+0x71e>
1a0068f6:	9b08      	ldr	r3, [sp, #32]
1a0068f8:	3301      	adds	r3, #1
1a0068fa:	9308      	str	r3, [sp, #32]
1a0068fc:	f108 0801 	add.w	r8, r8, #1
1a006900:	2601      	movs	r6, #1
1a006902:	e5a4      	b.n	1a00644e <_dtoa_r+0x71e>
1a006904:	2b00      	cmp	r3, #0
1a006906:	4627      	mov	r7, r4
1a006908:	464c      	mov	r4, r9
1a00690a:	4691      	mov	r9, r2
1a00690c:	dd12      	ble.n	1a006934 <_dtoa_r+0xc04>
1a00690e:	4659      	mov	r1, fp
1a006910:	2201      	movs	r2, #1
1a006912:	4650      	mov	r0, sl
1a006914:	f000 fdac 	bl	1a007470 <__lshift>
1a006918:	4639      	mov	r1, r7
1a00691a:	4683      	mov	fp, r0
1a00691c:	f000 fe02 	bl	1a007524 <__mcmp>
1a006920:	2800      	cmp	r0, #0
1a006922:	f340 80df 	ble.w	1a006ae4 <_dtoa_r+0xdb4>
1a006926:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a00692a:	f000 80d0 	beq.w	1a006ace <_dtoa_r+0xd9e>
1a00692e:	9b00      	ldr	r3, [sp, #0]
1a006930:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a006934:	9500      	str	r5, [sp, #0]
1a006936:	f886 9000 	strb.w	r9, [r6]
1a00693a:	4645      	mov	r5, r8
1a00693c:	e5f3      	b.n	1a006526 <_dtoa_r+0x7f6>
1a00693e:	6869      	ldr	r1, [r5, #4]
1a006940:	4650      	mov	r0, sl
1a006942:	f000 fbdd 	bl	1a007100 <_Balloc>
1a006946:	692b      	ldr	r3, [r5, #16]
1a006948:	3302      	adds	r3, #2
1a00694a:	009a      	lsls	r2, r3, #2
1a00694c:	4604      	mov	r4, r0
1a00694e:	f105 010c 	add.w	r1, r5, #12
1a006952:	300c      	adds	r0, #12
1a006954:	f7fd f8ec 	bl	1a003b30 <memcpy>
1a006958:	4621      	mov	r1, r4
1a00695a:	2201      	movs	r2, #1
1a00695c:	4650      	mov	r0, sl
1a00695e:	f000 fd87 	bl	1a007470 <__lshift>
1a006962:	4680      	mov	r8, r0
1a006964:	e627      	b.n	1a0065b6 <_dtoa_r+0x886>
1a006966:	f8dd b000 	ldr.w	fp, [sp]
1a00696a:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00696e:	e406      	b.n	1a00617e <_dtoa_r+0x44e>
1a006970:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a006974:	1a9c      	subs	r4, r3, r2
1a006976:	e508      	b.n	1a00638a <_dtoa_r+0x65a>
1a006978:	2700      	movs	r7, #0
1a00697a:	463d      	mov	r5, r7
1a00697c:	e6a0      	b.n	1a0066c0 <_dtoa_r+0x990>
1a00697e:	2a39      	cmp	r2, #57	; 0x39
1a006980:	4627      	mov	r7, r4
1a006982:	464c      	mov	r4, r9
1a006984:	f000 80a3 	beq.w	1a006ace <_dtoa_r+0xd9e>
1a006988:	f102 0901 	add.w	r9, r2, #1
1a00698c:	9500      	str	r5, [sp, #0]
1a00698e:	f886 9000 	strb.w	r9, [r6]
1a006992:	4645      	mov	r5, r8
1a006994:	e5c7      	b.n	1a006526 <_dtoa_r+0x7f6>
1a006996:	4627      	mov	r7, r4
1a006998:	9500      	str	r5, [sp, #0]
1a00699a:	464c      	mov	r4, r9
1a00699c:	4645      	mov	r5, r8
1a00699e:	4691      	mov	r9, r2
1a0069a0:	e5a5      	b.n	1a0064ee <_dtoa_r+0x7be>
1a0069a2:	bf00      	nop
1a0069a4:	1a0083d0 	.word	0x1a0083d0
1a0069a8:	401c0000 	.word	0x401c0000
1a0069ac:	40140000 	.word	0x40140000
1a0069b0:	1a008408 	.word	0x1a008408
1a0069b4:	1a0083e0 	.word	0x1a0083e0
1a0069b8:	7ff00000 	.word	0x7ff00000
1a0069bc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0069c0:	f7fb fea6 	bl	1a002710 <__aeabi_dmul>
1a0069c4:	9b03      	ldr	r3, [sp, #12]
1a0069c6:	701d      	strb	r5, [r3, #0]
1a0069c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0069ca:	2b01      	cmp	r3, #1
1a0069cc:	e9cd 0100 	strd	r0, r1, [sp]
1a0069d0:	d023      	beq.n	1a006a1a <_dtoa_r+0xcea>
1a0069d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0069d4:	9a03      	ldr	r2, [sp, #12]
1a0069d6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a0069da:	4413      	add	r3, r2
1a0069dc:	46c1      	mov	r9, r8
1a0069de:	4698      	mov	r8, r3
1a0069e0:	2200      	movs	r2, #0
1a0069e2:	4b64      	ldr	r3, [pc, #400]	; (1a006b74 <_dtoa_r+0xe44>)
1a0069e4:	4630      	mov	r0, r6
1a0069e6:	4639      	mov	r1, r7
1a0069e8:	f7fb fe92 	bl	1a002710 <__aeabi_dmul>
1a0069ec:	460f      	mov	r7, r1
1a0069ee:	4606      	mov	r6, r0
1a0069f0:	f001 fa60 	bl	1a007eb4 <__aeabi_d2iz>
1a0069f4:	4605      	mov	r5, r0
1a0069f6:	f7fb fe21 	bl	1a00263c <__aeabi_i2d>
1a0069fa:	3530      	adds	r5, #48	; 0x30
1a0069fc:	4602      	mov	r2, r0
1a0069fe:	460b      	mov	r3, r1
1a006a00:	4630      	mov	r0, r6
1a006a02:	4639      	mov	r1, r7
1a006a04:	f7fb fccc 	bl	1a0023a0 <__aeabi_dsub>
1a006a08:	f804 5b01 	strb.w	r5, [r4], #1
1a006a0c:	45a0      	cmp	r8, r4
1a006a0e:	4606      	mov	r6, r0
1a006a10:	460f      	mov	r7, r1
1a006a12:	d1e5      	bne.n	1a0069e0 <_dtoa_r+0xcb0>
1a006a14:	46c8      	mov	r8, r9
1a006a16:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a006a1a:	4b57      	ldr	r3, [pc, #348]	; (1a006b78 <_dtoa_r+0xe48>)
1a006a1c:	2200      	movs	r2, #0
1a006a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006a22:	f7fb fcbf 	bl	1a0023a4 <__adddf3>
1a006a26:	4632      	mov	r2, r6
1a006a28:	463b      	mov	r3, r7
1a006a2a:	f7fc f8e3 	bl	1a002bf4 <__aeabi_dcmplt>
1a006a2e:	2800      	cmp	r0, #0
1a006a30:	d152      	bne.n	1a006ad8 <_dtoa_r+0xda8>
1a006a32:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006a36:	2000      	movs	r0, #0
1a006a38:	494f      	ldr	r1, [pc, #316]	; (1a006b78 <_dtoa_r+0xe48>)
1a006a3a:	f7fb fcb1 	bl	1a0023a0 <__aeabi_dsub>
1a006a3e:	4632      	mov	r2, r6
1a006a40:	463b      	mov	r3, r7
1a006a42:	f7fc f8f5 	bl	1a002c30 <__aeabi_dcmpgt>
1a006a46:	2800      	cmp	r0, #0
1a006a48:	f43f abb3 	beq.w	1a0061b2 <_dtoa_r+0x482>
1a006a4c:	e000      	b.n	1a006a50 <_dtoa_r+0xd20>
1a006a4e:	4614      	mov	r4, r2
1a006a50:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a006a54:	2b30      	cmp	r3, #48	; 0x30
1a006a56:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a006a5a:	d0f8      	beq.n	1a006a4e <_dtoa_r+0xd1e>
1a006a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006a5e:	3301      	adds	r3, #1
1a006a60:	9306      	str	r3, [sp, #24]
1a006a62:	f7ff bb8c 	b.w	1a00617e <_dtoa_r+0x44e>
1a006a66:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a006a68:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a006a6c:	e6d7      	b.n	1a00681e <_dtoa_r+0xaee>
1a006a6e:	2602      	movs	r6, #2
1a006a70:	f7ff bad2 	b.w	1a006018 <_dtoa_r+0x2e8>
1a006a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006a76:	2b00      	cmp	r3, #0
1a006a78:	f43f aed8 	beq.w	1a00682c <_dtoa_r+0xafc>
1a006a7c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a006a7e:	2f00      	cmp	r7, #0
1a006a80:	f77f ab97 	ble.w	1a0061b2 <_dtoa_r+0x482>
1a006a84:	2200      	movs	r2, #0
1a006a86:	4b3b      	ldr	r3, [pc, #236]	; (1a006b74 <_dtoa_r+0xe44>)
1a006a88:	4620      	mov	r0, r4
1a006a8a:	4629      	mov	r1, r5
1a006a8c:	f7fb fe40 	bl	1a002710 <__aeabi_dmul>
1a006a90:	4604      	mov	r4, r0
1a006a92:	460d      	mov	r5, r1
1a006a94:	1c70      	adds	r0, r6, #1
1a006a96:	e9cd 4500 	strd	r4, r5, [sp]
1a006a9a:	f7fb fdcf 	bl	1a00263c <__aeabi_i2d>
1a006a9e:	4622      	mov	r2, r4
1a006aa0:	462b      	mov	r3, r5
1a006aa2:	f7fb fe35 	bl	1a002710 <__aeabi_dmul>
1a006aa6:	4b35      	ldr	r3, [pc, #212]	; (1a006b7c <_dtoa_r+0xe4c>)
1a006aa8:	2200      	movs	r2, #0
1a006aaa:	f7fb fc7b 	bl	1a0023a4 <__adddf3>
1a006aae:	9b06      	ldr	r3, [sp, #24]
1a006ab0:	9710      	str	r7, [sp, #64]	; 0x40
1a006ab2:	3b01      	subs	r3, #1
1a006ab4:	4604      	mov	r4, r0
1a006ab6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a006aba:	9312      	str	r3, [sp, #72]	; 0x48
1a006abc:	f7ff bacf 	b.w	1a00605e <_dtoa_r+0x32e>
1a006ac0:	9a06      	ldr	r2, [sp, #24]
1a006ac2:	3201      	adds	r2, #1
1a006ac4:	9206      	str	r2, [sp, #24]
1a006ac6:	2231      	movs	r2, #49	; 0x31
1a006ac8:	701a      	strb	r2, [r3, #0]
1a006aca:	f7ff bb58 	b.w	1a00617e <_dtoa_r+0x44e>
1a006ace:	2239      	movs	r2, #57	; 0x39
1a006ad0:	9500      	str	r5, [sp, #0]
1a006ad2:	7032      	strb	r2, [r6, #0]
1a006ad4:	4645      	mov	r5, r8
1a006ad6:	e518      	b.n	1a00650a <_dtoa_r+0x7da>
1a006ad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006ada:	3301      	adds	r3, #1
1a006adc:	9306      	str	r3, [sp, #24]
1a006ade:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a006ae2:	e427      	b.n	1a006334 <_dtoa_r+0x604>
1a006ae4:	f47f af26 	bne.w	1a006934 <_dtoa_r+0xc04>
1a006ae8:	f019 0f01 	tst.w	r9, #1
1a006aec:	f47f af1b 	bne.w	1a006926 <_dtoa_r+0xbf6>
1a006af0:	e720      	b.n	1a006934 <_dtoa_r+0xc04>
1a006af2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006af4:	3301      	adds	r3, #1
1a006af6:	46da      	mov	sl, fp
1a006af8:	9306      	str	r3, [sp, #24]
1a006afa:	f8dd b000 	ldr.w	fp, [sp]
1a006afe:	e419      	b.n	1a006334 <_dtoa_r+0x604>
1a006b00:	2a39      	cmp	r2, #57	; 0x39
1a006b02:	463b      	mov	r3, r7
1a006b04:	4691      	mov	r9, r2
1a006b06:	4627      	mov	r7, r4
1a006b08:	f106 0401 	add.w	r4, r6, #1
1a006b0c:	d0df      	beq.n	1a006ace <_dtoa_r+0xd9e>
1a006b0e:	2b00      	cmp	r3, #0
1a006b10:	f73f af0d 	bgt.w	1a00692e <_dtoa_r+0xbfe>
1a006b14:	e70e      	b.n	1a006934 <_dtoa_r+0xc04>
1a006b16:	9b02      	ldr	r3, [sp, #8]
1a006b18:	2b02      	cmp	r3, #2
1a006b1a:	f77f ae49 	ble.w	1a0067b0 <_dtoa_r+0xa80>
1a006b1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006b20:	9309      	str	r3, [sp, #36]	; 0x24
1a006b22:	f8cd 8018 	str.w	r8, [sp, #24]
1a006b26:	e5ba      	b.n	1a00669e <_dtoa_r+0x96e>
1a006b28:	9b02      	ldr	r3, [sp, #8]
1a006b2a:	2b02      	cmp	r3, #2
1a006b2c:	dcf7      	bgt.n	1a006b1e <_dtoa_r+0xdee>
1a006b2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006b30:	e539      	b.n	1a0065a6 <_dtoa_r+0x876>
1a006b32:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006b34:	3301      	adds	r3, #1
1a006b36:	9306      	str	r3, [sp, #24]
1a006b38:	f7ff bbfc 	b.w	1a006334 <_dtoa_r+0x604>
1a006b3c:	4b10      	ldr	r3, [pc, #64]	; (1a006b80 <_dtoa_r+0xe50>)
1a006b3e:	9303      	str	r3, [sp, #12]
1a006b40:	f7ff b934 	b.w	1a005dac <_dtoa_r+0x7c>
1a006b44:	f43f ac98 	beq.w	1a006478 <_dtoa_r+0x748>
1a006b48:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a006b4c:	e48f      	b.n	1a00646e <_dtoa_r+0x73e>
1a006b4e:	2400      	movs	r4, #0
1a006b50:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a006b54:	4621      	mov	r1, r4
1a006b56:	4650      	mov	r0, sl
1a006b58:	f000 fad2 	bl	1a007100 <_Balloc>
1a006b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a006b60:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a006b64:	930f      	str	r3, [sp, #60]	; 0x3c
1a006b66:	2301      	movs	r3, #1
1a006b68:	9003      	str	r0, [sp, #12]
1a006b6a:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a006b6e:	930b      	str	r3, [sp, #44]	; 0x2c
1a006b70:	f7ff bb23 	b.w	1a0061ba <_dtoa_r+0x48a>
1a006b74:	40240000 	.word	0x40240000
1a006b78:	3fe00000 	.word	0x3fe00000
1a006b7c:	401c0000 	.word	0x401c0000
1a006b80:	1a0083d4 	.word	0x1a0083d4

1a006b84 <__sfvwrite_r>:
1a006b84:	6893      	ldr	r3, [r2, #8]
1a006b86:	2b00      	cmp	r3, #0
1a006b88:	f000 8102 	beq.w	1a006d90 <__sfvwrite_r+0x20c>
1a006b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006b90:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a006b94:	b29b      	uxth	r3, r3
1a006b96:	460c      	mov	r4, r1
1a006b98:	0719      	lsls	r1, r3, #28
1a006b9a:	b083      	sub	sp, #12
1a006b9c:	4682      	mov	sl, r0
1a006b9e:	4690      	mov	r8, r2
1a006ba0:	d535      	bpl.n	1a006c0e <__sfvwrite_r+0x8a>
1a006ba2:	6922      	ldr	r2, [r4, #16]
1a006ba4:	b39a      	cbz	r2, 1a006c0e <__sfvwrite_r+0x8a>
1a006ba6:	f013 0202 	ands.w	r2, r3, #2
1a006baa:	f8d8 6000 	ldr.w	r6, [r8]
1a006bae:	d03d      	beq.n	1a006c2c <__sfvwrite_r+0xa8>
1a006bb0:	2700      	movs	r7, #0
1a006bb2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a006bb6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a006bba:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1a006e88 <__sfvwrite_r+0x304>
1a006bbe:	463d      	mov	r5, r7
1a006bc0:	454d      	cmp	r5, r9
1a006bc2:	462b      	mov	r3, r5
1a006bc4:	463a      	mov	r2, r7
1a006bc6:	bf28      	it	cs
1a006bc8:	464b      	movcs	r3, r9
1a006bca:	4661      	mov	r1, ip
1a006bcc:	4650      	mov	r0, sl
1a006bce:	b1d5      	cbz	r5, 1a006c06 <__sfvwrite_r+0x82>
1a006bd0:	47d8      	blx	fp
1a006bd2:	2800      	cmp	r0, #0
1a006bd4:	f340 80d2 	ble.w	1a006d7c <__sfvwrite_r+0x1f8>
1a006bd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a006bdc:	1a1b      	subs	r3, r3, r0
1a006bde:	4407      	add	r7, r0
1a006be0:	1a2d      	subs	r5, r5, r0
1a006be2:	f8c8 3008 	str.w	r3, [r8, #8]
1a006be6:	2b00      	cmp	r3, #0
1a006be8:	f000 80b7 	beq.w	1a006d5a <__sfvwrite_r+0x1d6>
1a006bec:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a006bf0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a006bf4:	454d      	cmp	r5, r9
1a006bf6:	462b      	mov	r3, r5
1a006bf8:	463a      	mov	r2, r7
1a006bfa:	bf28      	it	cs
1a006bfc:	464b      	movcs	r3, r9
1a006bfe:	4661      	mov	r1, ip
1a006c00:	4650      	mov	r0, sl
1a006c02:	2d00      	cmp	r5, #0
1a006c04:	d1e4      	bne.n	1a006bd0 <__sfvwrite_r+0x4c>
1a006c06:	e9d6 7500 	ldrd	r7, r5, [r6]
1a006c0a:	3608      	adds	r6, #8
1a006c0c:	e7d8      	b.n	1a006bc0 <__sfvwrite_r+0x3c>
1a006c0e:	4621      	mov	r1, r4
1a006c10:	4650      	mov	r0, sl
1a006c12:	f7fe ff91 	bl	1a005b38 <__swsetup_r>
1a006c16:	2800      	cmp	r0, #0
1a006c18:	f040 8130 	bne.w	1a006e7c <__sfvwrite_r+0x2f8>
1a006c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006c20:	f8d8 6000 	ldr.w	r6, [r8]
1a006c24:	b29b      	uxth	r3, r3
1a006c26:	f013 0202 	ands.w	r2, r3, #2
1a006c2a:	d1c1      	bne.n	1a006bb0 <__sfvwrite_r+0x2c>
1a006c2c:	f013 0901 	ands.w	r9, r3, #1
1a006c30:	f040 80b0 	bne.w	1a006d94 <__sfvwrite_r+0x210>
1a006c34:	68a7      	ldr	r7, [r4, #8]
1a006c36:	6820      	ldr	r0, [r4, #0]
1a006c38:	464d      	mov	r5, r9
1a006c3a:	2d00      	cmp	r5, #0
1a006c3c:	d054      	beq.n	1a006ce8 <__sfvwrite_r+0x164>
1a006c3e:	059a      	lsls	r2, r3, #22
1a006c40:	f140 80bc 	bpl.w	1a006dbc <__sfvwrite_r+0x238>
1a006c44:	42af      	cmp	r7, r5
1a006c46:	46bb      	mov	fp, r7
1a006c48:	f200 80e7 	bhi.w	1a006e1a <__sfvwrite_r+0x296>
1a006c4c:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a006c50:	d02f      	beq.n	1a006cb2 <__sfvwrite_r+0x12e>
1a006c52:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a006c56:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a006c5a:	eba0 0b01 	sub.w	fp, r0, r1
1a006c5e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a006c62:	1c68      	adds	r0, r5, #1
1a006c64:	107f      	asrs	r7, r7, #1
1a006c66:	4458      	add	r0, fp
1a006c68:	42b8      	cmp	r0, r7
1a006c6a:	463a      	mov	r2, r7
1a006c6c:	bf84      	itt	hi
1a006c6e:	4607      	movhi	r7, r0
1a006c70:	463a      	movhi	r2, r7
1a006c72:	055b      	lsls	r3, r3, #21
1a006c74:	f140 80e9 	bpl.w	1a006e4a <__sfvwrite_r+0x2c6>
1a006c78:	4611      	mov	r1, r2
1a006c7a:	4650      	mov	r0, sl
1a006c7c:	f7fc fca0 	bl	1a0035c0 <_malloc_r>
1a006c80:	2800      	cmp	r0, #0
1a006c82:	f000 80f5 	beq.w	1a006e70 <__sfvwrite_r+0x2ec>
1a006c86:	465a      	mov	r2, fp
1a006c88:	6921      	ldr	r1, [r4, #16]
1a006c8a:	9001      	str	r0, [sp, #4]
1a006c8c:	f7fc ff50 	bl	1a003b30 <memcpy>
1a006c90:	89a2      	ldrh	r2, [r4, #12]
1a006c92:	9b01      	ldr	r3, [sp, #4]
1a006c94:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a006c98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a006c9c:	81a2      	strh	r2, [r4, #12]
1a006c9e:	eba7 020b 	sub.w	r2, r7, fp
1a006ca2:	eb03 000b 	add.w	r0, r3, fp
1a006ca6:	6167      	str	r7, [r4, #20]
1a006ca8:	6123      	str	r3, [r4, #16]
1a006caa:	6020      	str	r0, [r4, #0]
1a006cac:	60a2      	str	r2, [r4, #8]
1a006cae:	462f      	mov	r7, r5
1a006cb0:	46ab      	mov	fp, r5
1a006cb2:	465a      	mov	r2, fp
1a006cb4:	4649      	mov	r1, r9
1a006cb6:	f000 f9bb 	bl	1a007030 <memmove>
1a006cba:	68a2      	ldr	r2, [r4, #8]
1a006cbc:	6823      	ldr	r3, [r4, #0]
1a006cbe:	1bd2      	subs	r2, r2, r7
1a006cc0:	445b      	add	r3, fp
1a006cc2:	462f      	mov	r7, r5
1a006cc4:	60a2      	str	r2, [r4, #8]
1a006cc6:	6023      	str	r3, [r4, #0]
1a006cc8:	2500      	movs	r5, #0
1a006cca:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a006cce:	1bdb      	subs	r3, r3, r7
1a006cd0:	44b9      	add	r9, r7
1a006cd2:	f8c8 3008 	str.w	r3, [r8, #8]
1a006cd6:	2b00      	cmp	r3, #0
1a006cd8:	d03f      	beq.n	1a006d5a <__sfvwrite_r+0x1d6>
1a006cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006cde:	68a7      	ldr	r7, [r4, #8]
1a006ce0:	6820      	ldr	r0, [r4, #0]
1a006ce2:	b29b      	uxth	r3, r3
1a006ce4:	2d00      	cmp	r5, #0
1a006ce6:	d1aa      	bne.n	1a006c3e <__sfvwrite_r+0xba>
1a006ce8:	e9d6 9500 	ldrd	r9, r5, [r6]
1a006cec:	3608      	adds	r6, #8
1a006cee:	e7a4      	b.n	1a006c3a <__sfvwrite_r+0xb6>
1a006cf0:	f10b 0308 	add.w	r3, fp, #8
1a006cf4:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a006cf8:	469b      	mov	fp, r3
1a006cfa:	3308      	adds	r3, #8
1a006cfc:	2f00      	cmp	r7, #0
1a006cfe:	d0f9      	beq.n	1a006cf4 <__sfvwrite_r+0x170>
1a006d00:	463a      	mov	r2, r7
1a006d02:	210a      	movs	r1, #10
1a006d04:	4630      	mov	r0, r6
1a006d06:	f000 f943 	bl	1a006f90 <memchr>
1a006d0a:	2800      	cmp	r0, #0
1a006d0c:	d053      	beq.n	1a006db6 <__sfvwrite_r+0x232>
1a006d0e:	3001      	adds	r0, #1
1a006d10:	eba0 0906 	sub.w	r9, r0, r6
1a006d14:	464b      	mov	r3, r9
1a006d16:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a006d1a:	6820      	ldr	r0, [r4, #0]
1a006d1c:	42bb      	cmp	r3, r7
1a006d1e:	bf28      	it	cs
1a006d20:	463b      	movcs	r3, r7
1a006d22:	4288      	cmp	r0, r1
1a006d24:	d903      	bls.n	1a006d2e <__sfvwrite_r+0x1aa>
1a006d26:	68a5      	ldr	r5, [r4, #8]
1a006d28:	4415      	add	r5, r2
1a006d2a:	42ab      	cmp	r3, r5
1a006d2c:	dc19      	bgt.n	1a006d62 <__sfvwrite_r+0x1de>
1a006d2e:	429a      	cmp	r2, r3
1a006d30:	dc7d      	bgt.n	1a006e2e <__sfvwrite_r+0x2aa>
1a006d32:	4613      	mov	r3, r2
1a006d34:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a006d36:	69e1      	ldr	r1, [r4, #28]
1a006d38:	4632      	mov	r2, r6
1a006d3a:	4650      	mov	r0, sl
1a006d3c:	47a8      	blx	r5
1a006d3e:	1e05      	subs	r5, r0, #0
1a006d40:	dd1c      	ble.n	1a006d7c <__sfvwrite_r+0x1f8>
1a006d42:	ebb9 0905 	subs.w	r9, r9, r5
1a006d46:	d06b      	beq.n	1a006e20 <__sfvwrite_r+0x29c>
1a006d48:	2001      	movs	r0, #1
1a006d4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a006d4e:	1b5b      	subs	r3, r3, r5
1a006d50:	442e      	add	r6, r5
1a006d52:	1b7f      	subs	r7, r7, r5
1a006d54:	f8c8 3008 	str.w	r3, [r8, #8]
1a006d58:	bb13      	cbnz	r3, 1a006da0 <__sfvwrite_r+0x21c>
1a006d5a:	2000      	movs	r0, #0
1a006d5c:	b003      	add	sp, #12
1a006d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006d62:	4631      	mov	r1, r6
1a006d64:	462a      	mov	r2, r5
1a006d66:	f000 f963 	bl	1a007030 <memmove>
1a006d6a:	6823      	ldr	r3, [r4, #0]
1a006d6c:	442b      	add	r3, r5
1a006d6e:	6023      	str	r3, [r4, #0]
1a006d70:	4621      	mov	r1, r4
1a006d72:	4650      	mov	r0, sl
1a006d74:	f7fc f9f6 	bl	1a003164 <_fflush_r>
1a006d78:	2800      	cmp	r0, #0
1a006d7a:	d0e2      	beq.n	1a006d42 <__sfvwrite_r+0x1be>
1a006d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006d88:	81a3      	strh	r3, [r4, #12]
1a006d8a:	b003      	add	sp, #12
1a006d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006d90:	2000      	movs	r0, #0
1a006d92:	4770      	bx	lr
1a006d94:	4633      	mov	r3, r6
1a006d96:	4691      	mov	r9, r2
1a006d98:	4610      	mov	r0, r2
1a006d9a:	4617      	mov	r7, r2
1a006d9c:	464e      	mov	r6, r9
1a006d9e:	469b      	mov	fp, r3
1a006da0:	2f00      	cmp	r7, #0
1a006da2:	d0a5      	beq.n	1a006cf0 <__sfvwrite_r+0x16c>
1a006da4:	2800      	cmp	r0, #0
1a006da6:	d1b5      	bne.n	1a006d14 <__sfvwrite_r+0x190>
1a006da8:	463a      	mov	r2, r7
1a006daa:	210a      	movs	r1, #10
1a006dac:	4630      	mov	r0, r6
1a006dae:	f000 f8ef 	bl	1a006f90 <memchr>
1a006db2:	2800      	cmp	r0, #0
1a006db4:	d1ab      	bne.n	1a006d0e <__sfvwrite_r+0x18a>
1a006db6:	1c7b      	adds	r3, r7, #1
1a006db8:	4699      	mov	r9, r3
1a006dba:	e7ac      	b.n	1a006d16 <__sfvwrite_r+0x192>
1a006dbc:	6923      	ldr	r3, [r4, #16]
1a006dbe:	4283      	cmp	r3, r0
1a006dc0:	d315      	bcc.n	1a006dee <__sfvwrite_r+0x26a>
1a006dc2:	6961      	ldr	r1, [r4, #20]
1a006dc4:	42a9      	cmp	r1, r5
1a006dc6:	d812      	bhi.n	1a006dee <__sfvwrite_r+0x26a>
1a006dc8:	4b2e      	ldr	r3, [pc, #184]	; (1a006e84 <__sfvwrite_r+0x300>)
1a006dca:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a006dcc:	429d      	cmp	r5, r3
1a006dce:	bf94      	ite	ls
1a006dd0:	462b      	movls	r3, r5
1a006dd2:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a006dd6:	464a      	mov	r2, r9
1a006dd8:	fb93 f3f1 	sdiv	r3, r3, r1
1a006ddc:	4650      	mov	r0, sl
1a006dde:	fb01 f303 	mul.w	r3, r1, r3
1a006de2:	69e1      	ldr	r1, [r4, #28]
1a006de4:	47b8      	blx	r7
1a006de6:	1e07      	subs	r7, r0, #0
1a006de8:	ddc8      	ble.n	1a006d7c <__sfvwrite_r+0x1f8>
1a006dea:	1bed      	subs	r5, r5, r7
1a006dec:	e76d      	b.n	1a006cca <__sfvwrite_r+0x146>
1a006dee:	42af      	cmp	r7, r5
1a006df0:	bf28      	it	cs
1a006df2:	462f      	movcs	r7, r5
1a006df4:	463a      	mov	r2, r7
1a006df6:	4649      	mov	r1, r9
1a006df8:	f000 f91a 	bl	1a007030 <memmove>
1a006dfc:	68a3      	ldr	r3, [r4, #8]
1a006dfe:	6822      	ldr	r2, [r4, #0]
1a006e00:	1bdb      	subs	r3, r3, r7
1a006e02:	443a      	add	r2, r7
1a006e04:	60a3      	str	r3, [r4, #8]
1a006e06:	6022      	str	r2, [r4, #0]
1a006e08:	2b00      	cmp	r3, #0
1a006e0a:	d1ee      	bne.n	1a006dea <__sfvwrite_r+0x266>
1a006e0c:	4621      	mov	r1, r4
1a006e0e:	4650      	mov	r0, sl
1a006e10:	f7fc f9a8 	bl	1a003164 <_fflush_r>
1a006e14:	2800      	cmp	r0, #0
1a006e16:	d0e8      	beq.n	1a006dea <__sfvwrite_r+0x266>
1a006e18:	e7b0      	b.n	1a006d7c <__sfvwrite_r+0x1f8>
1a006e1a:	462f      	mov	r7, r5
1a006e1c:	46ab      	mov	fp, r5
1a006e1e:	e748      	b.n	1a006cb2 <__sfvwrite_r+0x12e>
1a006e20:	4621      	mov	r1, r4
1a006e22:	4650      	mov	r0, sl
1a006e24:	f7fc f99e 	bl	1a003164 <_fflush_r>
1a006e28:	2800      	cmp	r0, #0
1a006e2a:	d08e      	beq.n	1a006d4a <__sfvwrite_r+0x1c6>
1a006e2c:	e7a6      	b.n	1a006d7c <__sfvwrite_r+0x1f8>
1a006e2e:	461a      	mov	r2, r3
1a006e30:	4631      	mov	r1, r6
1a006e32:	9301      	str	r3, [sp, #4]
1a006e34:	f000 f8fc 	bl	1a007030 <memmove>
1a006e38:	9b01      	ldr	r3, [sp, #4]
1a006e3a:	68a1      	ldr	r1, [r4, #8]
1a006e3c:	6822      	ldr	r2, [r4, #0]
1a006e3e:	1ac9      	subs	r1, r1, r3
1a006e40:	441a      	add	r2, r3
1a006e42:	60a1      	str	r1, [r4, #8]
1a006e44:	6022      	str	r2, [r4, #0]
1a006e46:	461d      	mov	r5, r3
1a006e48:	e77b      	b.n	1a006d42 <__sfvwrite_r+0x1be>
1a006e4a:	4650      	mov	r0, sl
1a006e4c:	f000 fc62 	bl	1a007714 <_realloc_r>
1a006e50:	4603      	mov	r3, r0
1a006e52:	2800      	cmp	r0, #0
1a006e54:	f47f af23 	bne.w	1a006c9e <__sfvwrite_r+0x11a>
1a006e58:	6921      	ldr	r1, [r4, #16]
1a006e5a:	4650      	mov	r0, sl
1a006e5c:	f7fc fa64 	bl	1a003328 <_free_r>
1a006e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006e64:	220c      	movs	r2, #12
1a006e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a006e6a:	f8ca 2000 	str.w	r2, [sl]
1a006e6e:	e787      	b.n	1a006d80 <__sfvwrite_r+0x1fc>
1a006e70:	230c      	movs	r3, #12
1a006e72:	f8ca 3000 	str.w	r3, [sl]
1a006e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006e7a:	e781      	b.n	1a006d80 <__sfvwrite_r+0x1fc>
1a006e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006e80:	e76c      	b.n	1a006d5c <__sfvwrite_r+0x1d8>
1a006e82:	bf00      	nop
1a006e84:	7ffffffe 	.word	0x7ffffffe
1a006e88:	7ffffc00 	.word	0x7ffffc00

1a006e8c <_localeconv_r>:
1a006e8c:	4800      	ldr	r0, [pc, #0]	; (1a006e90 <_localeconv_r+0x4>)
1a006e8e:	4770      	bx	lr
1a006e90:	10000970 	.word	0x10000970

1a006e94 <__swhatbuf_r>:
1a006e94:	b570      	push	{r4, r5, r6, lr}
1a006e96:	460c      	mov	r4, r1
1a006e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006e9c:	2900      	cmp	r1, #0
1a006e9e:	b096      	sub	sp, #88	; 0x58
1a006ea0:	4615      	mov	r5, r2
1a006ea2:	461e      	mov	r6, r3
1a006ea4:	db14      	blt.n	1a006ed0 <__swhatbuf_r+0x3c>
1a006ea6:	466a      	mov	r2, sp
1a006ea8:	f7f9 fbbb 	bl	1a000622 <_fstat_r>
1a006eac:	2800      	cmp	r0, #0
1a006eae:	db0f      	blt.n	1a006ed0 <__swhatbuf_r+0x3c>
1a006eb0:	9a01      	ldr	r2, [sp, #4]
1a006eb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a006eb6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a006eba:	fab2 f282 	clz	r2, r2
1a006ebe:	0952      	lsrs	r2, r2, #5
1a006ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a006ec4:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a006ec8:	6032      	str	r2, [r6, #0]
1a006eca:	602b      	str	r3, [r5, #0]
1a006ecc:	b016      	add	sp, #88	; 0x58
1a006ece:	bd70      	pop	{r4, r5, r6, pc}
1a006ed0:	89a2      	ldrh	r2, [r4, #12]
1a006ed2:	2300      	movs	r3, #0
1a006ed4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a006ed8:	6033      	str	r3, [r6, #0]
1a006eda:	d004      	beq.n	1a006ee6 <__swhatbuf_r+0x52>
1a006edc:	2240      	movs	r2, #64	; 0x40
1a006ede:	4618      	mov	r0, r3
1a006ee0:	602a      	str	r2, [r5, #0]
1a006ee2:	b016      	add	sp, #88	; 0x58
1a006ee4:	bd70      	pop	{r4, r5, r6, pc}
1a006ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a006eea:	602b      	str	r3, [r5, #0]
1a006eec:	b016      	add	sp, #88	; 0x58
1a006eee:	bd70      	pop	{r4, r5, r6, pc}

1a006ef0 <__smakebuf_r>:
1a006ef0:	898a      	ldrh	r2, [r1, #12]
1a006ef2:	0792      	lsls	r2, r2, #30
1a006ef4:	460b      	mov	r3, r1
1a006ef6:	d506      	bpl.n	1a006f06 <__smakebuf_r+0x16>
1a006ef8:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a006efc:	2101      	movs	r1, #1
1a006efe:	601a      	str	r2, [r3, #0]
1a006f00:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a006f04:	4770      	bx	lr
1a006f06:	b570      	push	{r4, r5, r6, lr}
1a006f08:	b082      	sub	sp, #8
1a006f0a:	ab01      	add	r3, sp, #4
1a006f0c:	466a      	mov	r2, sp
1a006f0e:	460c      	mov	r4, r1
1a006f10:	4606      	mov	r6, r0
1a006f12:	f7ff ffbf 	bl	1a006e94 <__swhatbuf_r>
1a006f16:	9900      	ldr	r1, [sp, #0]
1a006f18:	4605      	mov	r5, r0
1a006f1a:	4630      	mov	r0, r6
1a006f1c:	f7fc fb50 	bl	1a0035c0 <_malloc_r>
1a006f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006f24:	b170      	cbz	r0, 1a006f44 <__smakebuf_r+0x54>
1a006f26:	4916      	ldr	r1, [pc, #88]	; (1a006f80 <__smakebuf_r+0x90>)
1a006f28:	63f1      	str	r1, [r6, #60]	; 0x3c
1a006f2a:	9a01      	ldr	r2, [sp, #4]
1a006f2c:	9900      	ldr	r1, [sp, #0]
1a006f2e:	6020      	str	r0, [r4, #0]
1a006f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a006f34:	81a3      	strh	r3, [r4, #12]
1a006f36:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a006f3a:	b98a      	cbnz	r2, 1a006f60 <__smakebuf_r+0x70>
1a006f3c:	432b      	orrs	r3, r5
1a006f3e:	81a3      	strh	r3, [r4, #12]
1a006f40:	b002      	add	sp, #8
1a006f42:	bd70      	pop	{r4, r5, r6, pc}
1a006f44:	059a      	lsls	r2, r3, #22
1a006f46:	d4fb      	bmi.n	1a006f40 <__smakebuf_r+0x50>
1a006f48:	f023 0303 	bic.w	r3, r3, #3
1a006f4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a006f50:	f043 0302 	orr.w	r3, r3, #2
1a006f54:	2101      	movs	r1, #1
1a006f56:	81a3      	strh	r3, [r4, #12]
1a006f58:	6022      	str	r2, [r4, #0]
1a006f5a:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a006f5e:	e7ef      	b.n	1a006f40 <__smakebuf_r+0x50>
1a006f60:	4630      	mov	r0, r6
1a006f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006f66:	f7f9 fb61 	bl	1a00062c <_isatty_r>
1a006f6a:	b910      	cbnz	r0, 1a006f72 <__smakebuf_r+0x82>
1a006f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006f70:	e7e4      	b.n	1a006f3c <__smakebuf_r+0x4c>
1a006f72:	89a3      	ldrh	r3, [r4, #12]
1a006f74:	f023 0303 	bic.w	r3, r3, #3
1a006f78:	f043 0301 	orr.w	r3, r3, #1
1a006f7c:	b21b      	sxth	r3, r3
1a006f7e:	e7dd      	b.n	1a006f3c <__smakebuf_r+0x4c>
1a006f80:	1a003211 	.word	0x1a003211
1a006f84:	ffffffff 	.word	0xffffffff
1a006f88:	ffffffff 	.word	0xffffffff
1a006f8c:	ffffffff 	.word	0xffffffff

1a006f90 <memchr>:
1a006f90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a006f94:	2a10      	cmp	r2, #16
1a006f96:	db2b      	blt.n	1a006ff0 <memchr+0x60>
1a006f98:	f010 0f07 	tst.w	r0, #7
1a006f9c:	d008      	beq.n	1a006fb0 <memchr+0x20>
1a006f9e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006fa2:	3a01      	subs	r2, #1
1a006fa4:	428b      	cmp	r3, r1
1a006fa6:	d02d      	beq.n	1a007004 <memchr+0x74>
1a006fa8:	f010 0f07 	tst.w	r0, #7
1a006fac:	b342      	cbz	r2, 1a007000 <memchr+0x70>
1a006fae:	d1f6      	bne.n	1a006f9e <memchr+0xe>
1a006fb0:	b4f0      	push	{r4, r5, r6, r7}
1a006fb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a006fb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a006fba:	f022 0407 	bic.w	r4, r2, #7
1a006fbe:	f07f 0700 	mvns.w	r7, #0
1a006fc2:	2300      	movs	r3, #0
1a006fc4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a006fc8:	3c08      	subs	r4, #8
1a006fca:	ea85 0501 	eor.w	r5, r5, r1
1a006fce:	ea86 0601 	eor.w	r6, r6, r1
1a006fd2:	fa85 f547 	uadd8	r5, r5, r7
1a006fd6:	faa3 f587 	sel	r5, r3, r7
1a006fda:	fa86 f647 	uadd8	r6, r6, r7
1a006fde:	faa5 f687 	sel	r6, r5, r7
1a006fe2:	b98e      	cbnz	r6, 1a007008 <memchr+0x78>
1a006fe4:	d1ee      	bne.n	1a006fc4 <memchr+0x34>
1a006fe6:	bcf0      	pop	{r4, r5, r6, r7}
1a006fe8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a006fec:	f002 0207 	and.w	r2, r2, #7
1a006ff0:	b132      	cbz	r2, 1a007000 <memchr+0x70>
1a006ff2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006ff6:	3a01      	subs	r2, #1
1a006ff8:	ea83 0301 	eor.w	r3, r3, r1
1a006ffc:	b113      	cbz	r3, 1a007004 <memchr+0x74>
1a006ffe:	d1f8      	bne.n	1a006ff2 <memchr+0x62>
1a007000:	2000      	movs	r0, #0
1a007002:	4770      	bx	lr
1a007004:	3801      	subs	r0, #1
1a007006:	4770      	bx	lr
1a007008:	2d00      	cmp	r5, #0
1a00700a:	bf06      	itte	eq
1a00700c:	4635      	moveq	r5, r6
1a00700e:	3803      	subeq	r0, #3
1a007010:	3807      	subne	r0, #7
1a007012:	f015 0f01 	tst.w	r5, #1
1a007016:	d107      	bne.n	1a007028 <memchr+0x98>
1a007018:	3001      	adds	r0, #1
1a00701a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00701e:	bf02      	ittt	eq
1a007020:	3001      	addeq	r0, #1
1a007022:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a007026:	3001      	addeq	r0, #1
1a007028:	bcf0      	pop	{r4, r5, r6, r7}
1a00702a:	3801      	subs	r0, #1
1a00702c:	4770      	bx	lr
1a00702e:	bf00      	nop

1a007030 <memmove>:
1a007030:	4288      	cmp	r0, r1
1a007032:	b4f0      	push	{r4, r5, r6, r7}
1a007034:	d90d      	bls.n	1a007052 <memmove+0x22>
1a007036:	188b      	adds	r3, r1, r2
1a007038:	4283      	cmp	r3, r0
1a00703a:	d90a      	bls.n	1a007052 <memmove+0x22>
1a00703c:	1884      	adds	r4, r0, r2
1a00703e:	b132      	cbz	r2, 1a00704e <memmove+0x1e>
1a007040:	4622      	mov	r2, r4
1a007042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a007046:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a00704a:	4299      	cmp	r1, r3
1a00704c:	d1f9      	bne.n	1a007042 <memmove+0x12>
1a00704e:	bcf0      	pop	{r4, r5, r6, r7}
1a007050:	4770      	bx	lr
1a007052:	2a0f      	cmp	r2, #15
1a007054:	d80e      	bhi.n	1a007074 <memmove+0x44>
1a007056:	4603      	mov	r3, r0
1a007058:	1e54      	subs	r4, r2, #1
1a00705a:	2a00      	cmp	r2, #0
1a00705c:	d0f7      	beq.n	1a00704e <memmove+0x1e>
1a00705e:	3401      	adds	r4, #1
1a007060:	440c      	add	r4, r1
1a007062:	3b01      	subs	r3, #1
1a007064:	f811 2b01 	ldrb.w	r2, [r1], #1
1a007068:	f803 2f01 	strb.w	r2, [r3, #1]!
1a00706c:	42a1      	cmp	r1, r4
1a00706e:	d1f9      	bne.n	1a007064 <memmove+0x34>
1a007070:	bcf0      	pop	{r4, r5, r6, r7}
1a007072:	4770      	bx	lr
1a007074:	ea40 0301 	orr.w	r3, r0, r1
1a007078:	079b      	lsls	r3, r3, #30
1a00707a:	d13b      	bne.n	1a0070f4 <memmove+0xc4>
1a00707c:	f1a2 0710 	sub.w	r7, r2, #16
1a007080:	093f      	lsrs	r7, r7, #4
1a007082:	f101 0620 	add.w	r6, r1, #32
1a007086:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a00708a:	f101 0310 	add.w	r3, r1, #16
1a00708e:	f100 0410 	add.w	r4, r0, #16
1a007092:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a007096:	f844 5c10 	str.w	r5, [r4, #-16]
1a00709a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a00709e:	f844 5c0c 	str.w	r5, [r4, #-12]
1a0070a2:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a0070a6:	f844 5c08 	str.w	r5, [r4, #-8]
1a0070aa:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a0070ae:	f844 5c04 	str.w	r5, [r4, #-4]
1a0070b2:	3310      	adds	r3, #16
1a0070b4:	42b3      	cmp	r3, r6
1a0070b6:	f104 0410 	add.w	r4, r4, #16
1a0070ba:	d1ea      	bne.n	1a007092 <memmove+0x62>
1a0070bc:	1c7b      	adds	r3, r7, #1
1a0070be:	011b      	lsls	r3, r3, #4
1a0070c0:	f012 0f0c 	tst.w	r2, #12
1a0070c4:	4419      	add	r1, r3
1a0070c6:	f002 050f 	and.w	r5, r2, #15
1a0070ca:	4403      	add	r3, r0
1a0070cc:	d015      	beq.n	1a0070fa <memmove+0xca>
1a0070ce:	3d04      	subs	r5, #4
1a0070d0:	08ad      	lsrs	r5, r5, #2
1a0070d2:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a0070d6:	1f1c      	subs	r4, r3, #4
1a0070d8:	460e      	mov	r6, r1
1a0070da:	f856 7b04 	ldr.w	r7, [r6], #4
1a0070de:	f844 7f04 	str.w	r7, [r4, #4]!
1a0070e2:	4564      	cmp	r4, ip
1a0070e4:	d1f9      	bne.n	1a0070da <memmove+0xaa>
1a0070e6:	3501      	adds	r5, #1
1a0070e8:	00ad      	lsls	r5, r5, #2
1a0070ea:	442b      	add	r3, r5
1a0070ec:	4429      	add	r1, r5
1a0070ee:	f002 0203 	and.w	r2, r2, #3
1a0070f2:	e7b1      	b.n	1a007058 <memmove+0x28>
1a0070f4:	1e54      	subs	r4, r2, #1
1a0070f6:	4603      	mov	r3, r0
1a0070f8:	e7b1      	b.n	1a00705e <memmove+0x2e>
1a0070fa:	462a      	mov	r2, r5
1a0070fc:	e7ac      	b.n	1a007058 <memmove+0x28>
1a0070fe:	bf00      	nop

1a007100 <_Balloc>:
1a007100:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a007102:	b570      	push	{r4, r5, r6, lr}
1a007104:	4605      	mov	r5, r0
1a007106:	460c      	mov	r4, r1
1a007108:	b14b      	cbz	r3, 1a00711e <_Balloc+0x1e>
1a00710a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a00710e:	b180      	cbz	r0, 1a007132 <_Balloc+0x32>
1a007110:	6802      	ldr	r2, [r0, #0]
1a007112:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a007116:	2300      	movs	r3, #0
1a007118:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a00711c:	bd70      	pop	{r4, r5, r6, pc}
1a00711e:	2221      	movs	r2, #33	; 0x21
1a007120:	2104      	movs	r1, #4
1a007122:	f000 fd63 	bl	1a007bec <_calloc_r>
1a007126:	4603      	mov	r3, r0
1a007128:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00712a:	2800      	cmp	r0, #0
1a00712c:	d1ed      	bne.n	1a00710a <_Balloc+0xa>
1a00712e:	2000      	movs	r0, #0
1a007130:	bd70      	pop	{r4, r5, r6, pc}
1a007132:	2101      	movs	r1, #1
1a007134:	fa01 f604 	lsl.w	r6, r1, r4
1a007138:	1d72      	adds	r2, r6, #5
1a00713a:	4628      	mov	r0, r5
1a00713c:	0092      	lsls	r2, r2, #2
1a00713e:	f000 fd55 	bl	1a007bec <_calloc_r>
1a007142:	2800      	cmp	r0, #0
1a007144:	d0f3      	beq.n	1a00712e <_Balloc+0x2e>
1a007146:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a00714a:	e7e4      	b.n	1a007116 <_Balloc+0x16>

1a00714c <_Bfree>:
1a00714c:	b131      	cbz	r1, 1a00715c <_Bfree+0x10>
1a00714e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a007150:	684a      	ldr	r2, [r1, #4]
1a007152:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a007156:	6008      	str	r0, [r1, #0]
1a007158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a00715c:	4770      	bx	lr
1a00715e:	bf00      	nop

1a007160 <__multadd>:
1a007160:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007162:	690c      	ldr	r4, [r1, #16]
1a007164:	b083      	sub	sp, #12
1a007166:	460d      	mov	r5, r1
1a007168:	4606      	mov	r6, r0
1a00716a:	f101 0c14 	add.w	ip, r1, #20
1a00716e:	2700      	movs	r7, #0
1a007170:	f8dc 0000 	ldr.w	r0, [ip]
1a007174:	b281      	uxth	r1, r0
1a007176:	fb02 3301 	mla	r3, r2, r1, r3
1a00717a:	0c19      	lsrs	r1, r3, #16
1a00717c:	0c00      	lsrs	r0, r0, #16
1a00717e:	fb02 1000 	mla	r0, r2, r0, r1
1a007182:	b29b      	uxth	r3, r3
1a007184:	3701      	adds	r7, #1
1a007186:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a00718a:	42bc      	cmp	r4, r7
1a00718c:	f84c 3b04 	str.w	r3, [ip], #4
1a007190:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a007194:	dcec      	bgt.n	1a007170 <__multadd+0x10>
1a007196:	b13b      	cbz	r3, 1a0071a8 <__multadd+0x48>
1a007198:	68aa      	ldr	r2, [r5, #8]
1a00719a:	42a2      	cmp	r2, r4
1a00719c:	dd07      	ble.n	1a0071ae <__multadd+0x4e>
1a00719e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a0071a2:	3401      	adds	r4, #1
1a0071a4:	6153      	str	r3, [r2, #20]
1a0071a6:	612c      	str	r4, [r5, #16]
1a0071a8:	4628      	mov	r0, r5
1a0071aa:	b003      	add	sp, #12
1a0071ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0071ae:	6869      	ldr	r1, [r5, #4]
1a0071b0:	9301      	str	r3, [sp, #4]
1a0071b2:	3101      	adds	r1, #1
1a0071b4:	4630      	mov	r0, r6
1a0071b6:	f7ff ffa3 	bl	1a007100 <_Balloc>
1a0071ba:	692a      	ldr	r2, [r5, #16]
1a0071bc:	3202      	adds	r2, #2
1a0071be:	f105 010c 	add.w	r1, r5, #12
1a0071c2:	4607      	mov	r7, r0
1a0071c4:	0092      	lsls	r2, r2, #2
1a0071c6:	300c      	adds	r0, #12
1a0071c8:	f7fc fcb2 	bl	1a003b30 <memcpy>
1a0071cc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a0071ce:	6869      	ldr	r1, [r5, #4]
1a0071d0:	9b01      	ldr	r3, [sp, #4]
1a0071d2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a0071d6:	6028      	str	r0, [r5, #0]
1a0071d8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a0071dc:	463d      	mov	r5, r7
1a0071de:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a0071e2:	3401      	adds	r4, #1
1a0071e4:	6153      	str	r3, [r2, #20]
1a0071e6:	612c      	str	r4, [r5, #16]
1a0071e8:	e7de      	b.n	1a0071a8 <__multadd+0x48>
1a0071ea:	bf00      	nop

1a0071ec <__hi0bits>:
1a0071ec:	0c02      	lsrs	r2, r0, #16
1a0071ee:	0412      	lsls	r2, r2, #16
1a0071f0:	4603      	mov	r3, r0
1a0071f2:	b9ca      	cbnz	r2, 1a007228 <__hi0bits+0x3c>
1a0071f4:	0403      	lsls	r3, r0, #16
1a0071f6:	2010      	movs	r0, #16
1a0071f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a0071fc:	bf04      	itt	eq
1a0071fe:	021b      	lsleq	r3, r3, #8
1a007200:	3008      	addeq	r0, #8
1a007202:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a007206:	bf04      	itt	eq
1a007208:	011b      	lsleq	r3, r3, #4
1a00720a:	3004      	addeq	r0, #4
1a00720c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a007210:	bf04      	itt	eq
1a007212:	009b      	lsleq	r3, r3, #2
1a007214:	3002      	addeq	r0, #2
1a007216:	2b00      	cmp	r3, #0
1a007218:	db05      	blt.n	1a007226 <__hi0bits+0x3a>
1a00721a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a00721e:	f100 0001 	add.w	r0, r0, #1
1a007222:	bf08      	it	eq
1a007224:	2020      	moveq	r0, #32
1a007226:	4770      	bx	lr
1a007228:	2000      	movs	r0, #0
1a00722a:	e7e5      	b.n	1a0071f8 <__hi0bits+0xc>

1a00722c <__lo0bits>:
1a00722c:	6803      	ldr	r3, [r0, #0]
1a00722e:	f013 0207 	ands.w	r2, r3, #7
1a007232:	4601      	mov	r1, r0
1a007234:	d007      	beq.n	1a007246 <__lo0bits+0x1a>
1a007236:	07da      	lsls	r2, r3, #31
1a007238:	d420      	bmi.n	1a00727c <__lo0bits+0x50>
1a00723a:	0798      	lsls	r0, r3, #30
1a00723c:	d522      	bpl.n	1a007284 <__lo0bits+0x58>
1a00723e:	085b      	lsrs	r3, r3, #1
1a007240:	600b      	str	r3, [r1, #0]
1a007242:	2001      	movs	r0, #1
1a007244:	4770      	bx	lr
1a007246:	b298      	uxth	r0, r3
1a007248:	b9b0      	cbnz	r0, 1a007278 <__lo0bits+0x4c>
1a00724a:	0c1b      	lsrs	r3, r3, #16
1a00724c:	2010      	movs	r0, #16
1a00724e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a007252:	bf04      	itt	eq
1a007254:	0a1b      	lsreq	r3, r3, #8
1a007256:	3008      	addeq	r0, #8
1a007258:	071a      	lsls	r2, r3, #28
1a00725a:	bf04      	itt	eq
1a00725c:	091b      	lsreq	r3, r3, #4
1a00725e:	3004      	addeq	r0, #4
1a007260:	079a      	lsls	r2, r3, #30
1a007262:	bf04      	itt	eq
1a007264:	089b      	lsreq	r3, r3, #2
1a007266:	3002      	addeq	r0, #2
1a007268:	07da      	lsls	r2, r3, #31
1a00726a:	d403      	bmi.n	1a007274 <__lo0bits+0x48>
1a00726c:	085b      	lsrs	r3, r3, #1
1a00726e:	f100 0001 	add.w	r0, r0, #1
1a007272:	d005      	beq.n	1a007280 <__lo0bits+0x54>
1a007274:	600b      	str	r3, [r1, #0]
1a007276:	4770      	bx	lr
1a007278:	4610      	mov	r0, r2
1a00727a:	e7e8      	b.n	1a00724e <__lo0bits+0x22>
1a00727c:	2000      	movs	r0, #0
1a00727e:	4770      	bx	lr
1a007280:	2020      	movs	r0, #32
1a007282:	4770      	bx	lr
1a007284:	089b      	lsrs	r3, r3, #2
1a007286:	600b      	str	r3, [r1, #0]
1a007288:	2002      	movs	r0, #2
1a00728a:	4770      	bx	lr

1a00728c <__i2b>:
1a00728c:	b510      	push	{r4, lr}
1a00728e:	460c      	mov	r4, r1
1a007290:	2101      	movs	r1, #1
1a007292:	f7ff ff35 	bl	1a007100 <_Balloc>
1a007296:	2201      	movs	r2, #1
1a007298:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a00729c:	bd10      	pop	{r4, pc}
1a00729e:	bf00      	nop

1a0072a0 <__multiply>:
1a0072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0072a4:	690e      	ldr	r6, [r1, #16]
1a0072a6:	6917      	ldr	r7, [r2, #16]
1a0072a8:	42be      	cmp	r6, r7
1a0072aa:	b083      	sub	sp, #12
1a0072ac:	460c      	mov	r4, r1
1a0072ae:	4615      	mov	r5, r2
1a0072b0:	db05      	blt.n	1a0072be <__multiply+0x1e>
1a0072b2:	463a      	mov	r2, r7
1a0072b4:	462b      	mov	r3, r5
1a0072b6:	4637      	mov	r7, r6
1a0072b8:	460d      	mov	r5, r1
1a0072ba:	4616      	mov	r6, r2
1a0072bc:	461c      	mov	r4, r3
1a0072be:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a0072c2:	eb07 0806 	add.w	r8, r7, r6
1a0072c6:	4543      	cmp	r3, r8
1a0072c8:	bfb8      	it	lt
1a0072ca:	3101      	addlt	r1, #1
1a0072cc:	f7ff ff18 	bl	1a007100 <_Balloc>
1a0072d0:	f100 0a14 	add.w	sl, r0, #20
1a0072d4:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a0072d8:	45ca      	cmp	sl, r9
1a0072da:	9000      	str	r0, [sp, #0]
1a0072dc:	d205      	bcs.n	1a0072ea <__multiply+0x4a>
1a0072de:	4653      	mov	r3, sl
1a0072e0:	2100      	movs	r1, #0
1a0072e2:	f843 1b04 	str.w	r1, [r3], #4
1a0072e6:	4599      	cmp	r9, r3
1a0072e8:	d8fb      	bhi.n	1a0072e2 <__multiply+0x42>
1a0072ea:	f104 0e14 	add.w	lr, r4, #20
1a0072ee:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a0072f2:	f105 0314 	add.w	r3, r5, #20
1a0072f6:	45de      	cmp	lr, fp
1a0072f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a0072fc:	d253      	bcs.n	1a0073a6 <__multiply+0x106>
1a0072fe:	f8cd 8004 	str.w	r8, [sp, #4]
1a007302:	4698      	mov	r8, r3
1a007304:	e005      	b.n	1a007312 <__multiply+0x72>
1a007306:	0c09      	lsrs	r1, r1, #16
1a007308:	d128      	bne.n	1a00735c <__multiply+0xbc>
1a00730a:	45f3      	cmp	fp, lr
1a00730c:	f10a 0a04 	add.w	sl, sl, #4
1a007310:	d947      	bls.n	1a0073a2 <__multiply+0x102>
1a007312:	f85e 1b04 	ldr.w	r1, [lr], #4
1a007316:	b28e      	uxth	r6, r1
1a007318:	2e00      	cmp	r6, #0
1a00731a:	d0f4      	beq.n	1a007306 <__multiply+0x66>
1a00731c:	4645      	mov	r5, r8
1a00731e:	4654      	mov	r4, sl
1a007320:	2300      	movs	r3, #0
1a007322:	f855 1b04 	ldr.w	r1, [r5], #4
1a007326:	6820      	ldr	r0, [r4, #0]
1a007328:	b28a      	uxth	r2, r1
1a00732a:	fa1f fc80 	uxth.w	ip, r0
1a00732e:	fb06 c202 	mla	r2, r6, r2, ip
1a007332:	0c09      	lsrs	r1, r1, #16
1a007334:	0c00      	lsrs	r0, r0, #16
1a007336:	4413      	add	r3, r2
1a007338:	fb06 0201 	mla	r2, r6, r1, r0
1a00733c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a007340:	b29b      	uxth	r3, r3
1a007342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a007346:	42af      	cmp	r7, r5
1a007348:	f844 3b04 	str.w	r3, [r4], #4
1a00734c:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a007350:	d8e7      	bhi.n	1a007322 <__multiply+0x82>
1a007352:	6023      	str	r3, [r4, #0]
1a007354:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a007358:	0c09      	lsrs	r1, r1, #16
1a00735a:	d0d6      	beq.n	1a00730a <__multiply+0x6a>
1a00735c:	f8da 3000 	ldr.w	r3, [sl]
1a007360:	4640      	mov	r0, r8
1a007362:	461a      	mov	r2, r3
1a007364:	4654      	mov	r4, sl
1a007366:	f04f 0c00 	mov.w	ip, #0
1a00736a:	8805      	ldrh	r5, [r0, #0]
1a00736c:	0c12      	lsrs	r2, r2, #16
1a00736e:	fb01 2205 	mla	r2, r1, r5, r2
1a007372:	4494      	add	ip, r2
1a007374:	b29b      	uxth	r3, r3
1a007376:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a00737a:	f844 3b04 	str.w	r3, [r4], #4
1a00737e:	f850 3b04 	ldr.w	r3, [r0], #4
1a007382:	6822      	ldr	r2, [r4, #0]
1a007384:	0c1b      	lsrs	r3, r3, #16
1a007386:	b295      	uxth	r5, r2
1a007388:	fb01 5303 	mla	r3, r1, r3, r5
1a00738c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a007390:	4287      	cmp	r7, r0
1a007392:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a007396:	d8e8      	bhi.n	1a00736a <__multiply+0xca>
1a007398:	45f3      	cmp	fp, lr
1a00739a:	6023      	str	r3, [r4, #0]
1a00739c:	f10a 0a04 	add.w	sl, sl, #4
1a0073a0:	d8b7      	bhi.n	1a007312 <__multiply+0x72>
1a0073a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a0073a6:	f1b8 0f00 	cmp.w	r8, #0
1a0073aa:	dd0b      	ble.n	1a0073c4 <__multiply+0x124>
1a0073ac:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a0073b0:	f1a9 0904 	sub.w	r9, r9, #4
1a0073b4:	b11b      	cbz	r3, 1a0073be <__multiply+0x11e>
1a0073b6:	e005      	b.n	1a0073c4 <__multiply+0x124>
1a0073b8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a0073bc:	b913      	cbnz	r3, 1a0073c4 <__multiply+0x124>
1a0073be:	f1b8 0801 	subs.w	r8, r8, #1
1a0073c2:	d1f9      	bne.n	1a0073b8 <__multiply+0x118>
1a0073c4:	9800      	ldr	r0, [sp, #0]
1a0073c6:	f8c0 8010 	str.w	r8, [r0, #16]
1a0073ca:	b003      	add	sp, #12
1a0073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a0073d0 <__pow5mult>:
1a0073d0:	f012 0303 	ands.w	r3, r2, #3
1a0073d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0073d8:	4614      	mov	r4, r2
1a0073da:	4607      	mov	r7, r0
1a0073dc:	d12e      	bne.n	1a00743c <__pow5mult+0x6c>
1a0073de:	460d      	mov	r5, r1
1a0073e0:	10a4      	asrs	r4, r4, #2
1a0073e2:	d01c      	beq.n	1a00741e <__pow5mult+0x4e>
1a0073e4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a0073e6:	b396      	cbz	r6, 1a00744e <__pow5mult+0x7e>
1a0073e8:	07e3      	lsls	r3, r4, #31
1a0073ea:	f04f 0800 	mov.w	r8, #0
1a0073ee:	d406      	bmi.n	1a0073fe <__pow5mult+0x2e>
1a0073f0:	1064      	asrs	r4, r4, #1
1a0073f2:	d014      	beq.n	1a00741e <__pow5mult+0x4e>
1a0073f4:	6830      	ldr	r0, [r6, #0]
1a0073f6:	b1a8      	cbz	r0, 1a007424 <__pow5mult+0x54>
1a0073f8:	4606      	mov	r6, r0
1a0073fa:	07e3      	lsls	r3, r4, #31
1a0073fc:	d5f8      	bpl.n	1a0073f0 <__pow5mult+0x20>
1a0073fe:	4632      	mov	r2, r6
1a007400:	4629      	mov	r1, r5
1a007402:	4638      	mov	r0, r7
1a007404:	f7ff ff4c 	bl	1a0072a0 <__multiply>
1a007408:	b1b5      	cbz	r5, 1a007438 <__pow5mult+0x68>
1a00740a:	686a      	ldr	r2, [r5, #4]
1a00740c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00740e:	1064      	asrs	r4, r4, #1
1a007410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a007414:	6029      	str	r1, [r5, #0]
1a007416:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00741a:	4605      	mov	r5, r0
1a00741c:	d1ea      	bne.n	1a0073f4 <__pow5mult+0x24>
1a00741e:	4628      	mov	r0, r5
1a007420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a007424:	4632      	mov	r2, r6
1a007426:	4631      	mov	r1, r6
1a007428:	4638      	mov	r0, r7
1a00742a:	f7ff ff39 	bl	1a0072a0 <__multiply>
1a00742e:	6030      	str	r0, [r6, #0]
1a007430:	f8c0 8000 	str.w	r8, [r0]
1a007434:	4606      	mov	r6, r0
1a007436:	e7e0      	b.n	1a0073fa <__pow5mult+0x2a>
1a007438:	4605      	mov	r5, r0
1a00743a:	e7d9      	b.n	1a0073f0 <__pow5mult+0x20>
1a00743c:	3b01      	subs	r3, #1
1a00743e:	4a0b      	ldr	r2, [pc, #44]	; (1a00746c <__pow5mult+0x9c>)
1a007440:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a007444:	2300      	movs	r3, #0
1a007446:	f7ff fe8b 	bl	1a007160 <__multadd>
1a00744a:	4605      	mov	r5, r0
1a00744c:	e7c8      	b.n	1a0073e0 <__pow5mult+0x10>
1a00744e:	2101      	movs	r1, #1
1a007450:	4638      	mov	r0, r7
1a007452:	f7ff fe55 	bl	1a007100 <_Balloc>
1a007456:	f240 2371 	movw	r3, #625	; 0x271
1a00745a:	6143      	str	r3, [r0, #20]
1a00745c:	2201      	movs	r2, #1
1a00745e:	2300      	movs	r3, #0
1a007460:	6102      	str	r2, [r0, #16]
1a007462:	4606      	mov	r6, r0
1a007464:	64b8      	str	r0, [r7, #72]	; 0x48
1a007466:	6003      	str	r3, [r0, #0]
1a007468:	e7be      	b.n	1a0073e8 <__pow5mult+0x18>
1a00746a:	bf00      	nop
1a00746c:	1a0084d0 	.word	0x1a0084d0

1a007470 <__lshift>:
1a007470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a007474:	690e      	ldr	r6, [r1, #16]
1a007476:	460d      	mov	r5, r1
1a007478:	ea4f 1962 	mov.w	r9, r2, asr #5
1a00747c:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a007480:	444e      	add	r6, r9
1a007482:	1c74      	adds	r4, r6, #1
1a007484:	429c      	cmp	r4, r3
1a007486:	4690      	mov	r8, r2
1a007488:	4607      	mov	r7, r0
1a00748a:	dd04      	ble.n	1a007496 <__lshift+0x26>
1a00748c:	005b      	lsls	r3, r3, #1
1a00748e:	429c      	cmp	r4, r3
1a007490:	f101 0101 	add.w	r1, r1, #1
1a007494:	dcfa      	bgt.n	1a00748c <__lshift+0x1c>
1a007496:	4638      	mov	r0, r7
1a007498:	f7ff fe32 	bl	1a007100 <_Balloc>
1a00749c:	f1b9 0f00 	cmp.w	r9, #0
1a0074a0:	f100 0c14 	add.w	ip, r0, #20
1a0074a4:	dd0e      	ble.n	1a0074c4 <__lshift+0x54>
1a0074a6:	f109 0905 	add.w	r9, r9, #5
1a0074aa:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a0074ae:	eb00 0109 	add.w	r1, r0, r9
1a0074b2:	4663      	mov	r3, ip
1a0074b4:	2200      	movs	r2, #0
1a0074b6:	f843 2b04 	str.w	r2, [r3], #4
1a0074ba:	428b      	cmp	r3, r1
1a0074bc:	d1fb      	bne.n	1a0074b6 <__lshift+0x46>
1a0074be:	f1a9 0914 	sub.w	r9, r9, #20
1a0074c2:	44cc      	add	ip, r9
1a0074c4:	6929      	ldr	r1, [r5, #16]
1a0074c6:	f105 0314 	add.w	r3, r5, #20
1a0074ca:	f018 081f 	ands.w	r8, r8, #31
1a0074ce:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a0074d2:	d01d      	beq.n	1a007510 <__lshift+0xa0>
1a0074d4:	f1c8 0920 	rsb	r9, r8, #32
1a0074d8:	2200      	movs	r2, #0
1a0074da:	6819      	ldr	r1, [r3, #0]
1a0074dc:	fa01 f108 	lsl.w	r1, r1, r8
1a0074e0:	4311      	orrs	r1, r2
1a0074e2:	f84c 1b04 	str.w	r1, [ip], #4
1a0074e6:	f853 2b04 	ldr.w	r2, [r3], #4
1a0074ea:	4573      	cmp	r3, lr
1a0074ec:	fa22 f209 	lsr.w	r2, r2, r9
1a0074f0:	d3f3      	bcc.n	1a0074da <__lshift+0x6a>
1a0074f2:	f8cc 2000 	str.w	r2, [ip]
1a0074f6:	2a00      	cmp	r2, #0
1a0074f8:	bf18      	it	ne
1a0074fa:	4626      	movne	r6, r4
1a0074fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a0074fe:	686a      	ldr	r2, [r5, #4]
1a007500:	6106      	str	r6, [r0, #16]
1a007502:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a007506:	6029      	str	r1, [r5, #0]
1a007508:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00750c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a007510:	f1ac 0c04 	sub.w	ip, ip, #4
1a007514:	f853 2b04 	ldr.w	r2, [r3], #4
1a007518:	f84c 2f04 	str.w	r2, [ip, #4]!
1a00751c:	459e      	cmp	lr, r3
1a00751e:	d8f9      	bhi.n	1a007514 <__lshift+0xa4>
1a007520:	e7ec      	b.n	1a0074fc <__lshift+0x8c>
1a007522:	bf00      	nop

1a007524 <__mcmp>:
1a007524:	b430      	push	{r4, r5}
1a007526:	690b      	ldr	r3, [r1, #16]
1a007528:	4605      	mov	r5, r0
1a00752a:	6900      	ldr	r0, [r0, #16]
1a00752c:	1ac0      	subs	r0, r0, r3
1a00752e:	d110      	bne.n	1a007552 <__mcmp+0x2e>
1a007530:	009b      	lsls	r3, r3, #2
1a007532:	3514      	adds	r5, #20
1a007534:	3114      	adds	r1, #20
1a007536:	4419      	add	r1, r3
1a007538:	442b      	add	r3, r5
1a00753a:	e001      	b.n	1a007540 <__mcmp+0x1c>
1a00753c:	429d      	cmp	r5, r3
1a00753e:	d208      	bcs.n	1a007552 <__mcmp+0x2e>
1a007540:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a007544:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a007548:	4294      	cmp	r4, r2
1a00754a:	d0f7      	beq.n	1a00753c <__mcmp+0x18>
1a00754c:	d203      	bcs.n	1a007556 <__mcmp+0x32>
1a00754e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007552:	bc30      	pop	{r4, r5}
1a007554:	4770      	bx	lr
1a007556:	2001      	movs	r0, #1
1a007558:	bc30      	pop	{r4, r5}
1a00755a:	4770      	bx	lr

1a00755c <__mdiff>:
1a00755c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a007560:	460f      	mov	r7, r1
1a007562:	690d      	ldr	r5, [r1, #16]
1a007564:	6911      	ldr	r1, [r2, #16]
1a007566:	1a6d      	subs	r5, r5, r1
1a007568:	2d00      	cmp	r5, #0
1a00756a:	4690      	mov	r8, r2
1a00756c:	4684      	mov	ip, r0
1a00756e:	f107 0414 	add.w	r4, r7, #20
1a007572:	f102 0614 	add.w	r6, r2, #20
1a007576:	d114      	bne.n	1a0075a2 <__mdiff+0x46>
1a007578:	0089      	lsls	r1, r1, #2
1a00757a:	1863      	adds	r3, r4, r1
1a00757c:	4431      	add	r1, r6
1a00757e:	e001      	b.n	1a007584 <__mdiff+0x28>
1a007580:	42a3      	cmp	r3, r4
1a007582:	d95d      	bls.n	1a007640 <__mdiff+0xe4>
1a007584:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a007588:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00758c:	4290      	cmp	r0, r2
1a00758e:	d0f7      	beq.n	1a007580 <__mdiff+0x24>
1a007590:	d209      	bcs.n	1a0075a6 <__mdiff+0x4a>
1a007592:	4622      	mov	r2, r4
1a007594:	463b      	mov	r3, r7
1a007596:	4634      	mov	r4, r6
1a007598:	4647      	mov	r7, r8
1a00759a:	4616      	mov	r6, r2
1a00759c:	4698      	mov	r8, r3
1a00759e:	2501      	movs	r5, #1
1a0075a0:	e001      	b.n	1a0075a6 <__mdiff+0x4a>
1a0075a2:	dbf6      	blt.n	1a007592 <__mdiff+0x36>
1a0075a4:	2500      	movs	r5, #0
1a0075a6:	4660      	mov	r0, ip
1a0075a8:	6879      	ldr	r1, [r7, #4]
1a0075aa:	f7ff fda9 	bl	1a007100 <_Balloc>
1a0075ae:	693f      	ldr	r7, [r7, #16]
1a0075b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a0075b4:	60c5      	str	r5, [r0, #12]
1a0075b6:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a0075ba:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a0075be:	f100 0514 	add.w	r5, r0, #20
1a0075c2:	2200      	movs	r2, #0
1a0075c4:	e000      	b.n	1a0075c8 <__mdiff+0x6c>
1a0075c6:	460d      	mov	r5, r1
1a0075c8:	f856 1b04 	ldr.w	r1, [r6], #4
1a0075cc:	f854 8b04 	ldr.w	r8, [r4], #4
1a0075d0:	fa1f f981 	uxth.w	r9, r1
1a0075d4:	fa12 f388 	uxtah	r3, r2, r8
1a0075d8:	0c0a      	lsrs	r2, r1, #16
1a0075da:	eba3 0309 	sub.w	r3, r3, r9
1a0075de:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a0075e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a0075e6:	4629      	mov	r1, r5
1a0075e8:	b29b      	uxth	r3, r3
1a0075ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0075ee:	45b6      	cmp	lr, r6
1a0075f0:	ea4f 4222 	mov.w	r2, r2, asr #16
1a0075f4:	f841 3b04 	str.w	r3, [r1], #4
1a0075f8:	46a0      	mov	r8, r4
1a0075fa:	d8e4      	bhi.n	1a0075c6 <__mdiff+0x6a>
1a0075fc:	45a4      	cmp	ip, r4
1a0075fe:	d916      	bls.n	1a00762e <__mdiff+0xd2>
1a007600:	460e      	mov	r6, r1
1a007602:	f858 5b04 	ldr.w	r5, [r8], #4
1a007606:	fa12 f385 	uxtah	r3, r2, r5
1a00760a:	141a      	asrs	r2, r3, #16
1a00760c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a007610:	b29b      	uxth	r3, r3
1a007612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a007616:	45c4      	cmp	ip, r8
1a007618:	f846 3b04 	str.w	r3, [r6], #4
1a00761c:	ea4f 4222 	mov.w	r2, r2, asr #16
1a007620:	d8ef      	bhi.n	1a007602 <__mdiff+0xa6>
1a007622:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
1a007626:	1b2d      	subs	r5, r5, r4
1a007628:	f025 0503 	bic.w	r5, r5, #3
1a00762c:	440d      	add	r5, r1
1a00762e:	b923      	cbnz	r3, 1a00763a <__mdiff+0xde>
1a007630:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a007634:	3f01      	subs	r7, #1
1a007636:	2b00      	cmp	r3, #0
1a007638:	d0fa      	beq.n	1a007630 <__mdiff+0xd4>
1a00763a:	6107      	str	r7, [r0, #16]
1a00763c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a007640:	4660      	mov	r0, ip
1a007642:	2100      	movs	r1, #0
1a007644:	f7ff fd5c 	bl	1a007100 <_Balloc>
1a007648:	2201      	movs	r2, #1
1a00764a:	2300      	movs	r3, #0
1a00764c:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a007650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a007654 <__d2b>:
1a007654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a007658:	460f      	mov	r7, r1
1a00765a:	b083      	sub	sp, #12
1a00765c:	2101      	movs	r1, #1
1a00765e:	ec55 4b10 	vmov	r4, r5, d0
1a007662:	4616      	mov	r6, r2
1a007664:	f7ff fd4c 	bl	1a007100 <_Balloc>
1a007668:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a00766c:	4681      	mov	r9, r0
1a00766e:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a007672:	f1b8 0f00 	cmp.w	r8, #0
1a007676:	d001      	beq.n	1a00767c <__d2b+0x28>
1a007678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a00767c:	2c00      	cmp	r4, #0
1a00767e:	9301      	str	r3, [sp, #4]
1a007680:	d02b      	beq.n	1a0076da <__d2b+0x86>
1a007682:	4668      	mov	r0, sp
1a007684:	9400      	str	r4, [sp, #0]
1a007686:	f7ff fdd1 	bl	1a00722c <__lo0bits>
1a00768a:	b9d0      	cbnz	r0, 1a0076c2 <__d2b+0x6e>
1a00768c:	e9dd 2300 	ldrd	r2, r3, [sp]
1a007690:	f8c9 2014 	str.w	r2, [r9, #20]
1a007694:	2b00      	cmp	r3, #0
1a007696:	bf14      	ite	ne
1a007698:	2102      	movne	r1, #2
1a00769a:	2101      	moveq	r1, #1
1a00769c:	f8c9 3018 	str.w	r3, [r9, #24]
1a0076a0:	f8c9 1010 	str.w	r1, [r9, #16]
1a0076a4:	f1b8 0f00 	cmp.w	r8, #0
1a0076a8:	d024      	beq.n	1a0076f4 <__d2b+0xa0>
1a0076aa:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a0076ae:	eb08 0300 	add.w	r3, r8, r0
1a0076b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a0076b6:	603b      	str	r3, [r7, #0]
1a0076b8:	6030      	str	r0, [r6, #0]
1a0076ba:	4648      	mov	r0, r9
1a0076bc:	b003      	add	sp, #12
1a0076be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0076c2:	e9dd 1300 	ldrd	r1, r3, [sp]
1a0076c6:	f1c0 0220 	rsb	r2, r0, #32
1a0076ca:	fa03 f202 	lsl.w	r2, r3, r2
1a0076ce:	430a      	orrs	r2, r1
1a0076d0:	40c3      	lsrs	r3, r0
1a0076d2:	9301      	str	r3, [sp, #4]
1a0076d4:	f8c9 2014 	str.w	r2, [r9, #20]
1a0076d8:	e7dc      	b.n	1a007694 <__d2b+0x40>
1a0076da:	a801      	add	r0, sp, #4
1a0076dc:	f7ff fda6 	bl	1a00722c <__lo0bits>
1a0076e0:	9b01      	ldr	r3, [sp, #4]
1a0076e2:	f8c9 3014 	str.w	r3, [r9, #20]
1a0076e6:	2101      	movs	r1, #1
1a0076e8:	3020      	adds	r0, #32
1a0076ea:	f8c9 1010 	str.w	r1, [r9, #16]
1a0076ee:	f1b8 0f00 	cmp.w	r8, #0
1a0076f2:	d1da      	bne.n	1a0076aa <__d2b+0x56>
1a0076f4:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a0076f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a0076fc:	6038      	str	r0, [r7, #0]
1a0076fe:	6918      	ldr	r0, [r3, #16]
1a007700:	f7ff fd74 	bl	1a0071ec <__hi0bits>
1a007704:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a007708:	6030      	str	r0, [r6, #0]
1a00770a:	4648      	mov	r0, r9
1a00770c:	b003      	add	sp, #12
1a00770e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a007712:	bf00      	nop

1a007714 <_realloc_r>:
1a007714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007718:	4617      	mov	r7, r2
1a00771a:	2900      	cmp	r1, #0
1a00771c:	f000 80bb 	beq.w	1a007896 <_realloc_r+0x182>
1a007720:	f107 040b 	add.w	r4, r7, #11
1a007724:	4681      	mov	r9, r0
1a007726:	460d      	mov	r5, r1
1a007728:	f7fc faec 	bl	1a003d04 <__malloc_lock>
1a00772c:	2c16      	cmp	r4, #22
1a00772e:	d85e      	bhi.n	1a0077ee <_realloc_r+0xda>
1a007730:	2410      	movs	r4, #16
1a007732:	4622      	mov	r2, r4
1a007734:	42a7      	cmp	r7, r4
1a007736:	d85f      	bhi.n	1a0077f8 <_realloc_r+0xe4>
1a007738:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a00773c:	f02e 0603 	bic.w	r6, lr, #3
1a007740:	f1a5 0808 	sub.w	r8, r5, #8
1a007744:	4296      	cmp	r6, r2
1a007746:	eb08 0a06 	add.w	sl, r8, r6
1a00774a:	f280 8081 	bge.w	1a007850 <_realloc_r+0x13c>
1a00774e:	4bcb      	ldr	r3, [pc, #812]	; (1a007a7c <_realloc_r+0x368>)
1a007750:	f8da 0004 	ldr.w	r0, [sl, #4]
1a007754:	6899      	ldr	r1, [r3, #8]
1a007756:	4551      	cmp	r1, sl
1a007758:	f000 80b5 	beq.w	1a0078c6 <_realloc_r+0x1b2>
1a00775c:	f020 0301 	bic.w	r3, r0, #1
1a007760:	4453      	add	r3, sl
1a007762:	685b      	ldr	r3, [r3, #4]
1a007764:	07db      	lsls	r3, r3, #31
1a007766:	f100 808a 	bmi.w	1a00787e <_realloc_r+0x16a>
1a00776a:	f020 0003 	bic.w	r0, r0, #3
1a00776e:	1833      	adds	r3, r6, r0
1a007770:	4293      	cmp	r3, r2
1a007772:	f280 8112 	bge.w	1a00799a <_realloc_r+0x286>
1a007776:	f01e 0f01 	tst.w	lr, #1
1a00777a:	d10f      	bne.n	1a00779c <_realloc_r+0x88>
1a00777c:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a007780:	eba8 0b03 	sub.w	fp, r8, r3
1a007784:	f8db 1004 	ldr.w	r1, [fp, #4]
1a007788:	f021 0103 	bic.w	r1, r1, #3
1a00778c:	4408      	add	r0, r1
1a00778e:	1983      	adds	r3, r0, r6
1a007790:	4293      	cmp	r3, r2
1a007792:	f280 8116 	bge.w	1a0079c2 <_realloc_r+0x2ae>
1a007796:	1873      	adds	r3, r6, r1
1a007798:	4293      	cmp	r3, r2
1a00779a:	da34      	bge.n	1a007806 <_realloc_r+0xf2>
1a00779c:	4639      	mov	r1, r7
1a00779e:	4648      	mov	r0, r9
1a0077a0:	f7fb ff0e 	bl	1a0035c0 <_malloc_r>
1a0077a4:	4607      	mov	r7, r0
1a0077a6:	b1e0      	cbz	r0, 1a0077e2 <_realloc_r+0xce>
1a0077a8:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0077ac:	f023 0301 	bic.w	r3, r3, #1
1a0077b0:	4443      	add	r3, r8
1a0077b2:	f1a0 0208 	sub.w	r2, r0, #8
1a0077b6:	4293      	cmp	r3, r2
1a0077b8:	f000 80f7 	beq.w	1a0079aa <_realloc_r+0x296>
1a0077bc:	1f32      	subs	r2, r6, #4
1a0077be:	2a24      	cmp	r2, #36	; 0x24
1a0077c0:	f200 80fb 	bhi.w	1a0079ba <_realloc_r+0x2a6>
1a0077c4:	2a13      	cmp	r2, #19
1a0077c6:	6829      	ldr	r1, [r5, #0]
1a0077c8:	f200 80c9 	bhi.w	1a00795e <_realloc_r+0x24a>
1a0077cc:	4603      	mov	r3, r0
1a0077ce:	462a      	mov	r2, r5
1a0077d0:	6019      	str	r1, [r3, #0]
1a0077d2:	6851      	ldr	r1, [r2, #4]
1a0077d4:	6059      	str	r1, [r3, #4]
1a0077d6:	6892      	ldr	r2, [r2, #8]
1a0077d8:	609a      	str	r2, [r3, #8]
1a0077da:	4629      	mov	r1, r5
1a0077dc:	4648      	mov	r0, r9
1a0077de:	f7fb fda3 	bl	1a003328 <_free_r>
1a0077e2:	4648      	mov	r0, r9
1a0077e4:	f7fc fa94 	bl	1a003d10 <__malloc_unlock>
1a0077e8:	4638      	mov	r0, r7
1a0077ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0077ee:	f024 0407 	bic.w	r4, r4, #7
1a0077f2:	2c00      	cmp	r4, #0
1a0077f4:	4622      	mov	r2, r4
1a0077f6:	da9d      	bge.n	1a007734 <_realloc_r+0x20>
1a0077f8:	230c      	movs	r3, #12
1a0077fa:	f8c9 3000 	str.w	r3, [r9]
1a0077fe:	2700      	movs	r7, #0
1a007800:	4638      	mov	r0, r7
1a007802:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007806:	465f      	mov	r7, fp
1a007808:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00780c:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a007810:	1f32      	subs	r2, r6, #4
1a007812:	2a24      	cmp	r2, #36	; 0x24
1a007814:	60c1      	str	r1, [r0, #12]
1a007816:	eb0b 0a03 	add.w	sl, fp, r3
1a00781a:	6088      	str	r0, [r1, #8]
1a00781c:	f200 80d9 	bhi.w	1a0079d2 <_realloc_r+0x2be>
1a007820:	2a13      	cmp	r2, #19
1a007822:	6829      	ldr	r1, [r5, #0]
1a007824:	f240 80d3 	bls.w	1a0079ce <_realloc_r+0x2ba>
1a007828:	f8cb 1008 	str.w	r1, [fp, #8]
1a00782c:	6869      	ldr	r1, [r5, #4]
1a00782e:	f8cb 100c 	str.w	r1, [fp, #12]
1a007832:	2a1b      	cmp	r2, #27
1a007834:	68a9      	ldr	r1, [r5, #8]
1a007836:	f200 80e0 	bhi.w	1a0079fa <_realloc_r+0x2e6>
1a00783a:	f10b 0210 	add.w	r2, fp, #16
1a00783e:	3508      	adds	r5, #8
1a007840:	6011      	str	r1, [r2, #0]
1a007842:	6869      	ldr	r1, [r5, #4]
1a007844:	6051      	str	r1, [r2, #4]
1a007846:	68a9      	ldr	r1, [r5, #8]
1a007848:	6091      	str	r1, [r2, #8]
1a00784a:	461e      	mov	r6, r3
1a00784c:	46d8      	mov	r8, fp
1a00784e:	463d      	mov	r5, r7
1a007850:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a007854:	1b32      	subs	r2, r6, r4
1a007856:	2a0f      	cmp	r2, #15
1a007858:	f003 0301 	and.w	r3, r3, #1
1a00785c:	d820      	bhi.n	1a0078a0 <_realloc_r+0x18c>
1a00785e:	4333      	orrs	r3, r6
1a007860:	f8c8 3004 	str.w	r3, [r8, #4]
1a007864:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007868:	f043 0301 	orr.w	r3, r3, #1
1a00786c:	f8ca 3004 	str.w	r3, [sl, #4]
1a007870:	4648      	mov	r0, r9
1a007872:	462f      	mov	r7, r5
1a007874:	f7fc fa4c 	bl	1a003d10 <__malloc_unlock>
1a007878:	4638      	mov	r0, r7
1a00787a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00787e:	f01e 0f01 	tst.w	lr, #1
1a007882:	d18b      	bne.n	1a00779c <_realloc_r+0x88>
1a007884:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a007888:	eba8 0b03 	sub.w	fp, r8, r3
1a00788c:	f8db 1004 	ldr.w	r1, [fp, #4]
1a007890:	f021 0103 	bic.w	r1, r1, #3
1a007894:	e77f      	b.n	1a007796 <_realloc_r+0x82>
1a007896:	4611      	mov	r1, r2
1a007898:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00789c:	f7fb be90 	b.w	1a0035c0 <_malloc_r>
1a0078a0:	eb08 0104 	add.w	r1, r8, r4
1a0078a4:	4323      	orrs	r3, r4
1a0078a6:	f042 0201 	orr.w	r2, r2, #1
1a0078aa:	f8c8 3004 	str.w	r3, [r8, #4]
1a0078ae:	604a      	str	r2, [r1, #4]
1a0078b0:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0078b4:	f043 0301 	orr.w	r3, r3, #1
1a0078b8:	3108      	adds	r1, #8
1a0078ba:	f8ca 3004 	str.w	r3, [sl, #4]
1a0078be:	4648      	mov	r0, r9
1a0078c0:	f7fb fd32 	bl	1a003328 <_free_r>
1a0078c4:	e7d4      	b.n	1a007870 <_realloc_r+0x15c>
1a0078c6:	f020 0003 	bic.w	r0, r0, #3
1a0078ca:	1831      	adds	r1, r6, r0
1a0078cc:	f104 0c10 	add.w	ip, r4, #16
1a0078d0:	4561      	cmp	r1, ip
1a0078d2:	da4f      	bge.n	1a007974 <_realloc_r+0x260>
1a0078d4:	f01e 0f01 	tst.w	lr, #1
1a0078d8:	f47f af60 	bne.w	1a00779c <_realloc_r+0x88>
1a0078dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a0078e0:	eba8 0b01 	sub.w	fp, r8, r1
1a0078e4:	f8db 1004 	ldr.w	r1, [fp, #4]
1a0078e8:	f021 0103 	bic.w	r1, r1, #3
1a0078ec:	4408      	add	r0, r1
1a0078ee:	eb00 0a06 	add.w	sl, r0, r6
1a0078f2:	45d4      	cmp	ip, sl
1a0078f4:	f73f af4f 	bgt.w	1a007796 <_realloc_r+0x82>
1a0078f8:	465f      	mov	r7, fp
1a0078fa:	f8db 100c 	ldr.w	r1, [fp, #12]
1a0078fe:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a007902:	1f32      	subs	r2, r6, #4
1a007904:	2a24      	cmp	r2, #36	; 0x24
1a007906:	60c1      	str	r1, [r0, #12]
1a007908:	6088      	str	r0, [r1, #8]
1a00790a:	f200 8099 	bhi.w	1a007a40 <_realloc_r+0x32c>
1a00790e:	2a13      	cmp	r2, #19
1a007910:	6829      	ldr	r1, [r5, #0]
1a007912:	f240 8093 	bls.w	1a007a3c <_realloc_r+0x328>
1a007916:	f8cb 1008 	str.w	r1, [fp, #8]
1a00791a:	6869      	ldr	r1, [r5, #4]
1a00791c:	f8cb 100c 	str.w	r1, [fp, #12]
1a007920:	2a1b      	cmp	r2, #27
1a007922:	68a9      	ldr	r1, [r5, #8]
1a007924:	f200 8092 	bhi.w	1a007a4c <_realloc_r+0x338>
1a007928:	f10b 0210 	add.w	r2, fp, #16
1a00792c:	3508      	adds	r5, #8
1a00792e:	6011      	str	r1, [r2, #0]
1a007930:	6869      	ldr	r1, [r5, #4]
1a007932:	6051      	str	r1, [r2, #4]
1a007934:	68a9      	ldr	r1, [r5, #8]
1a007936:	6091      	str	r1, [r2, #8]
1a007938:	eb0b 0104 	add.w	r1, fp, r4
1a00793c:	ebaa 0204 	sub.w	r2, sl, r4
1a007940:	f042 0201 	orr.w	r2, r2, #1
1a007944:	6099      	str	r1, [r3, #8]
1a007946:	604a      	str	r2, [r1, #4]
1a007948:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00794c:	f003 0301 	and.w	r3, r3, #1
1a007950:	431c      	orrs	r4, r3
1a007952:	4648      	mov	r0, r9
1a007954:	f8cb 4004 	str.w	r4, [fp, #4]
1a007958:	f7fc f9da 	bl	1a003d10 <__malloc_unlock>
1a00795c:	e750      	b.n	1a007800 <_realloc_r+0xec>
1a00795e:	6001      	str	r1, [r0, #0]
1a007960:	686b      	ldr	r3, [r5, #4]
1a007962:	6043      	str	r3, [r0, #4]
1a007964:	2a1b      	cmp	r2, #27
1a007966:	d83c      	bhi.n	1a0079e2 <_realloc_r+0x2ce>
1a007968:	f105 0208 	add.w	r2, r5, #8
1a00796c:	f100 0308 	add.w	r3, r0, #8
1a007970:	68a9      	ldr	r1, [r5, #8]
1a007972:	e72d      	b.n	1a0077d0 <_realloc_r+0xbc>
1a007974:	eb08 0004 	add.w	r0, r8, r4
1a007978:	1b0a      	subs	r2, r1, r4
1a00797a:	f042 0201 	orr.w	r2, r2, #1
1a00797e:	6098      	str	r0, [r3, #8]
1a007980:	6042      	str	r2, [r0, #4]
1a007982:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a007986:	f003 0301 	and.w	r3, r3, #1
1a00798a:	431c      	orrs	r4, r3
1a00798c:	4648      	mov	r0, r9
1a00798e:	f845 4c04 	str.w	r4, [r5, #-4]
1a007992:	f7fc f9bd 	bl	1a003d10 <__malloc_unlock>
1a007996:	462f      	mov	r7, r5
1a007998:	e732      	b.n	1a007800 <_realloc_r+0xec>
1a00799a:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00799e:	461e      	mov	r6, r3
1a0079a0:	60ca      	str	r2, [r1, #12]
1a0079a2:	eb08 0a03 	add.w	sl, r8, r3
1a0079a6:	6091      	str	r1, [r2, #8]
1a0079a8:	e752      	b.n	1a007850 <_realloc_r+0x13c>
1a0079aa:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a0079ae:	f023 0303 	bic.w	r3, r3, #3
1a0079b2:	441e      	add	r6, r3
1a0079b4:	eb08 0a06 	add.w	sl, r8, r6
1a0079b8:	e74a      	b.n	1a007850 <_realloc_r+0x13c>
1a0079ba:	4629      	mov	r1, r5
1a0079bc:	f7ff fb38 	bl	1a007030 <memmove>
1a0079c0:	e70b      	b.n	1a0077da <_realloc_r+0xc6>
1a0079c2:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a0079c6:	465f      	mov	r7, fp
1a0079c8:	60ca      	str	r2, [r1, #12]
1a0079ca:	6091      	str	r1, [r2, #8]
1a0079cc:	e71c      	b.n	1a007808 <_realloc_r+0xf4>
1a0079ce:	463a      	mov	r2, r7
1a0079d0:	e736      	b.n	1a007840 <_realloc_r+0x12c>
1a0079d2:	4629      	mov	r1, r5
1a0079d4:	4638      	mov	r0, r7
1a0079d6:	461e      	mov	r6, r3
1a0079d8:	46d8      	mov	r8, fp
1a0079da:	f7ff fb29 	bl	1a007030 <memmove>
1a0079de:	463d      	mov	r5, r7
1a0079e0:	e736      	b.n	1a007850 <_realloc_r+0x13c>
1a0079e2:	68ab      	ldr	r3, [r5, #8]
1a0079e4:	6083      	str	r3, [r0, #8]
1a0079e6:	68eb      	ldr	r3, [r5, #12]
1a0079e8:	60c3      	str	r3, [r0, #12]
1a0079ea:	2a24      	cmp	r2, #36	; 0x24
1a0079ec:	d011      	beq.n	1a007a12 <_realloc_r+0x2fe>
1a0079ee:	f105 0210 	add.w	r2, r5, #16
1a0079f2:	f100 0310 	add.w	r3, r0, #16
1a0079f6:	6929      	ldr	r1, [r5, #16]
1a0079f8:	e6ea      	b.n	1a0077d0 <_realloc_r+0xbc>
1a0079fa:	f8cb 1010 	str.w	r1, [fp, #16]
1a0079fe:	68e9      	ldr	r1, [r5, #12]
1a007a00:	f8cb 1014 	str.w	r1, [fp, #20]
1a007a04:	2a24      	cmp	r2, #36	; 0x24
1a007a06:	d00e      	beq.n	1a007a26 <_realloc_r+0x312>
1a007a08:	6929      	ldr	r1, [r5, #16]
1a007a0a:	f10b 0218 	add.w	r2, fp, #24
1a007a0e:	3510      	adds	r5, #16
1a007a10:	e716      	b.n	1a007840 <_realloc_r+0x12c>
1a007a12:	692b      	ldr	r3, [r5, #16]
1a007a14:	6103      	str	r3, [r0, #16]
1a007a16:	696b      	ldr	r3, [r5, #20]
1a007a18:	6143      	str	r3, [r0, #20]
1a007a1a:	69a9      	ldr	r1, [r5, #24]
1a007a1c:	f105 0218 	add.w	r2, r5, #24
1a007a20:	f100 0318 	add.w	r3, r0, #24
1a007a24:	e6d4      	b.n	1a0077d0 <_realloc_r+0xbc>
1a007a26:	692a      	ldr	r2, [r5, #16]
1a007a28:	f8cb 2018 	str.w	r2, [fp, #24]
1a007a2c:	696a      	ldr	r2, [r5, #20]
1a007a2e:	f8cb 201c 	str.w	r2, [fp, #28]
1a007a32:	69a9      	ldr	r1, [r5, #24]
1a007a34:	f10b 0220 	add.w	r2, fp, #32
1a007a38:	3518      	adds	r5, #24
1a007a3a:	e701      	b.n	1a007840 <_realloc_r+0x12c>
1a007a3c:	463a      	mov	r2, r7
1a007a3e:	e776      	b.n	1a00792e <_realloc_r+0x21a>
1a007a40:	4629      	mov	r1, r5
1a007a42:	4638      	mov	r0, r7
1a007a44:	f7ff faf4 	bl	1a007030 <memmove>
1a007a48:	4b0c      	ldr	r3, [pc, #48]	; (1a007a7c <_realloc_r+0x368>)
1a007a4a:	e775      	b.n	1a007938 <_realloc_r+0x224>
1a007a4c:	f8cb 1010 	str.w	r1, [fp, #16]
1a007a50:	68e9      	ldr	r1, [r5, #12]
1a007a52:	f8cb 1014 	str.w	r1, [fp, #20]
1a007a56:	2a24      	cmp	r2, #36	; 0x24
1a007a58:	d004      	beq.n	1a007a64 <_realloc_r+0x350>
1a007a5a:	6929      	ldr	r1, [r5, #16]
1a007a5c:	f10b 0218 	add.w	r2, fp, #24
1a007a60:	3510      	adds	r5, #16
1a007a62:	e764      	b.n	1a00792e <_realloc_r+0x21a>
1a007a64:	692a      	ldr	r2, [r5, #16]
1a007a66:	f8cb 2018 	str.w	r2, [fp, #24]
1a007a6a:	696a      	ldr	r2, [r5, #20]
1a007a6c:	f8cb 201c 	str.w	r2, [fp, #28]
1a007a70:	69a9      	ldr	r1, [r5, #24]
1a007a72:	f10b 0220 	add.w	r2, fp, #32
1a007a76:	3518      	adds	r5, #24
1a007a78:	e759      	b.n	1a00792e <_realloc_r+0x21a>
1a007a7a:	bf00      	nop
1a007a7c:	10000470 	.word	0x10000470

1a007a80 <frexp>:
1a007a80:	ec53 2b10 	vmov	r2, r3, d0
1a007a84:	b570      	push	{r4, r5, r6, lr}
1a007a86:	4e16      	ldr	r6, [pc, #88]	; (1a007ae0 <frexp+0x60>)
1a007a88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a007a8c:	2500      	movs	r5, #0
1a007a8e:	42b1      	cmp	r1, r6
1a007a90:	4604      	mov	r4, r0
1a007a92:	6005      	str	r5, [r0, #0]
1a007a94:	dc21      	bgt.n	1a007ada <frexp+0x5a>
1a007a96:	ee10 6a10 	vmov	r6, s0
1a007a9a:	430e      	orrs	r6, r1
1a007a9c:	d01d      	beq.n	1a007ada <frexp+0x5a>
1a007a9e:	4e11      	ldr	r6, [pc, #68]	; (1a007ae4 <frexp+0x64>)
1a007aa0:	401e      	ands	r6, r3
1a007aa2:	4618      	mov	r0, r3
1a007aa4:	b966      	cbnz	r6, 1a007ac0 <frexp+0x40>
1a007aa6:	4619      	mov	r1, r3
1a007aa8:	2200      	movs	r2, #0
1a007aaa:	ee10 0a10 	vmov	r0, s0
1a007aae:	4b0e      	ldr	r3, [pc, #56]	; (1a007ae8 <frexp+0x68>)
1a007ab0:	f7fa fe2e 	bl	1a002710 <__aeabi_dmul>
1a007ab4:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a007ab8:	4602      	mov	r2, r0
1a007aba:	4608      	mov	r0, r1
1a007abc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a007ac0:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a007ac4:	1509      	asrs	r1, r1, #20
1a007ac6:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a007aca:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a007ace:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a007ad2:	4429      	add	r1, r5
1a007ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a007ad8:	6021      	str	r1, [r4, #0]
1a007ada:	ec43 2b10 	vmov	d0, r2, r3
1a007ade:	bd70      	pop	{r4, r5, r6, pc}
1a007ae0:	7fefffff 	.word	0x7fefffff
1a007ae4:	7ff00000 	.word	0x7ff00000
1a007ae8:	43500000 	.word	0x43500000

1a007aec <strncpy>:
1a007aec:	b470      	push	{r4, r5, r6}
1a007aee:	ea40 0401 	orr.w	r4, r0, r1
1a007af2:	07a3      	lsls	r3, r4, #30
1a007af4:	d127      	bne.n	1a007b46 <strncpy+0x5a>
1a007af6:	2a03      	cmp	r2, #3
1a007af8:	d925      	bls.n	1a007b46 <strncpy+0x5a>
1a007afa:	460b      	mov	r3, r1
1a007afc:	4606      	mov	r6, r0
1a007afe:	4619      	mov	r1, r3
1a007b00:	f853 5b04 	ldr.w	r5, [r3], #4
1a007b04:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a007b08:	ea24 0405 	bic.w	r4, r4, r5
1a007b0c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a007b10:	d106      	bne.n	1a007b20 <strncpy+0x34>
1a007b12:	3a04      	subs	r2, #4
1a007b14:	2a03      	cmp	r2, #3
1a007b16:	f846 5b04 	str.w	r5, [r6], #4
1a007b1a:	4619      	mov	r1, r3
1a007b1c:	d8ef      	bhi.n	1a007afe <strncpy+0x12>
1a007b1e:	b182      	cbz	r2, 1a007b42 <strncpy+0x56>
1a007b20:	4633      	mov	r3, r6
1a007b22:	780c      	ldrb	r4, [r1, #0]
1a007b24:	f803 4b01 	strb.w	r4, [r3], #1
1a007b28:	1e55      	subs	r5, r2, #1
1a007b2a:	b174      	cbz	r4, 1a007b4a <strncpy+0x5e>
1a007b2c:	4432      	add	r2, r6
1a007b2e:	442e      	add	r6, r5
1a007b30:	e005      	b.n	1a007b3e <strncpy+0x52>
1a007b32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a007b36:	1af5      	subs	r5, r6, r3
1a007b38:	f803 4b01 	strb.w	r4, [r3], #1
1a007b3c:	b12c      	cbz	r4, 1a007b4a <strncpy+0x5e>
1a007b3e:	429a      	cmp	r2, r3
1a007b40:	d1f7      	bne.n	1a007b32 <strncpy+0x46>
1a007b42:	bc70      	pop	{r4, r5, r6}
1a007b44:	4770      	bx	lr
1a007b46:	4606      	mov	r6, r0
1a007b48:	e7e9      	b.n	1a007b1e <strncpy+0x32>
1a007b4a:	2d00      	cmp	r5, #0
1a007b4c:	d0f9      	beq.n	1a007b42 <strncpy+0x56>
1a007b4e:	441d      	add	r5, r3
1a007b50:	2200      	movs	r2, #0
1a007b52:	f803 2b01 	strb.w	r2, [r3], #1
1a007b56:	42ab      	cmp	r3, r5
1a007b58:	d1fb      	bne.n	1a007b52 <strncpy+0x66>
1a007b5a:	bc70      	pop	{r4, r5, r6}
1a007b5c:	4770      	bx	lr
1a007b5e:	bf00      	nop

1a007b60 <__sprint_r.part.0>:
1a007b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007b64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a007b66:	049c      	lsls	r4, r3, #18
1a007b68:	4693      	mov	fp, r2
1a007b6a:	d52d      	bpl.n	1a007bc8 <__sprint_r.part.0+0x68>
1a007b6c:	6893      	ldr	r3, [r2, #8]
1a007b6e:	6812      	ldr	r2, [r2, #0]
1a007b70:	b343      	cbz	r3, 1a007bc4 <__sprint_r.part.0+0x64>
1a007b72:	460e      	mov	r6, r1
1a007b74:	4607      	mov	r7, r0
1a007b76:	f102 0908 	add.w	r9, r2, #8
1a007b7a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
1a007b7e:	ea5f 089a 	movs.w	r8, sl, lsr #2
1a007b82:	d015      	beq.n	1a007bb0 <__sprint_r.part.0+0x50>
1a007b84:	3d04      	subs	r5, #4
1a007b86:	2400      	movs	r4, #0
1a007b88:	e001      	b.n	1a007b8e <__sprint_r.part.0+0x2e>
1a007b8a:	45a0      	cmp	r8, r4
1a007b8c:	d00e      	beq.n	1a007bac <__sprint_r.part.0+0x4c>
1a007b8e:	4632      	mov	r2, r6
1a007b90:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a007b94:	4638      	mov	r0, r7
1a007b96:	f000 f8a9 	bl	1a007cec <_fputwc_r>
1a007b9a:	1c43      	adds	r3, r0, #1
1a007b9c:	f104 0401 	add.w	r4, r4, #1
1a007ba0:	d1f3      	bne.n	1a007b8a <__sprint_r.part.0+0x2a>
1a007ba2:	2300      	movs	r3, #0
1a007ba4:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a007ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007bac:	f8db 3008 	ldr.w	r3, [fp, #8]
1a007bb0:	f02a 0a03 	bic.w	sl, sl, #3
1a007bb4:	eba3 030a 	sub.w	r3, r3, sl
1a007bb8:	f8cb 3008 	str.w	r3, [fp, #8]
1a007bbc:	f109 0908 	add.w	r9, r9, #8
1a007bc0:	2b00      	cmp	r3, #0
1a007bc2:	d1da      	bne.n	1a007b7a <__sprint_r.part.0+0x1a>
1a007bc4:	2000      	movs	r0, #0
1a007bc6:	e7ec      	b.n	1a007ba2 <__sprint_r.part.0+0x42>
1a007bc8:	f7fe ffdc 	bl	1a006b84 <__sfvwrite_r>
1a007bcc:	2300      	movs	r3, #0
1a007bce:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a007bd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007bd6:	bf00      	nop

1a007bd8 <__sprint_r>:
1a007bd8:	6893      	ldr	r3, [r2, #8]
1a007bda:	b10b      	cbz	r3, 1a007be0 <__sprint_r+0x8>
1a007bdc:	f7ff bfc0 	b.w	1a007b60 <__sprint_r.part.0>
1a007be0:	b410      	push	{r4}
1a007be2:	4618      	mov	r0, r3
1a007be4:	6053      	str	r3, [r2, #4]
1a007be6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007bea:	4770      	bx	lr

1a007bec <_calloc_r>:
1a007bec:	b510      	push	{r4, lr}
1a007bee:	fb02 f101 	mul.w	r1, r2, r1
1a007bf2:	f7fb fce5 	bl	1a0035c0 <_malloc_r>
1a007bf6:	4604      	mov	r4, r0
1a007bf8:	b168      	cbz	r0, 1a007c16 <_calloc_r+0x2a>
1a007bfa:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a007bfe:	f022 0203 	bic.w	r2, r2, #3
1a007c02:	3a04      	subs	r2, #4
1a007c04:	2a24      	cmp	r2, #36	; 0x24
1a007c06:	d818      	bhi.n	1a007c3a <_calloc_r+0x4e>
1a007c08:	2a13      	cmp	r2, #19
1a007c0a:	d806      	bhi.n	1a007c1a <_calloc_r+0x2e>
1a007c0c:	4602      	mov	r2, r0
1a007c0e:	2300      	movs	r3, #0
1a007c10:	e9c2 3300 	strd	r3, r3, [r2]
1a007c14:	6093      	str	r3, [r2, #8]
1a007c16:	4620      	mov	r0, r4
1a007c18:	bd10      	pop	{r4, pc}
1a007c1a:	2300      	movs	r3, #0
1a007c1c:	2a1b      	cmp	r2, #27
1a007c1e:	e9c0 3300 	strd	r3, r3, [r0]
1a007c22:	d90f      	bls.n	1a007c44 <_calloc_r+0x58>
1a007c24:	2a24      	cmp	r2, #36	; 0x24
1a007c26:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a007c2a:	bf12      	itee	ne
1a007c2c:	f100 0210 	addne.w	r2, r0, #16
1a007c30:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a007c34:	f100 0218 	addeq.w	r2, r0, #24
1a007c38:	e7e9      	b.n	1a007c0e <_calloc_r+0x22>
1a007c3a:	2100      	movs	r1, #0
1a007c3c:	f7fc f812 	bl	1a003c64 <memset>
1a007c40:	4620      	mov	r0, r4
1a007c42:	bd10      	pop	{r4, pc}
1a007c44:	f100 0208 	add.w	r2, r0, #8
1a007c48:	e7e1      	b.n	1a007c0e <_calloc_r+0x22>
1a007c4a:	bf00      	nop

1a007c4c <__fputwc>:
1a007c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a007c50:	b082      	sub	sp, #8
1a007c52:	4680      	mov	r8, r0
1a007c54:	4689      	mov	r9, r1
1a007c56:	4614      	mov	r4, r2
1a007c58:	f000 f87a 	bl	1a007d50 <__locale_mb_cur_max>
1a007c5c:	2801      	cmp	r0, #1
1a007c5e:	d103      	bne.n	1a007c68 <__fputwc+0x1c>
1a007c60:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
1a007c64:	2bfe      	cmp	r3, #254	; 0xfe
1a007c66:	d933      	bls.n	1a007cd0 <__fputwc+0x84>
1a007c68:	464a      	mov	r2, r9
1a007c6a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a007c6e:	a901      	add	r1, sp, #4
1a007c70:	4640      	mov	r0, r8
1a007c72:	f000 f8e1 	bl	1a007e38 <_wcrtomb_r>
1a007c76:	1c42      	adds	r2, r0, #1
1a007c78:	4606      	mov	r6, r0
1a007c7a:	d02f      	beq.n	1a007cdc <__fputwc+0x90>
1a007c7c:	b320      	cbz	r0, 1a007cc8 <__fputwc+0x7c>
1a007c7e:	f89d c004 	ldrb.w	ip, [sp, #4]
1a007c82:	2500      	movs	r5, #0
1a007c84:	f10d 0a04 	add.w	sl, sp, #4
1a007c88:	e009      	b.n	1a007c9e <__fputwc+0x52>
1a007c8a:	6823      	ldr	r3, [r4, #0]
1a007c8c:	1c5a      	adds	r2, r3, #1
1a007c8e:	6022      	str	r2, [r4, #0]
1a007c90:	f883 c000 	strb.w	ip, [r3]
1a007c94:	3501      	adds	r5, #1
1a007c96:	42b5      	cmp	r5, r6
1a007c98:	d216      	bcs.n	1a007cc8 <__fputwc+0x7c>
1a007c9a:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a007c9e:	68a3      	ldr	r3, [r4, #8]
1a007ca0:	3b01      	subs	r3, #1
1a007ca2:	2b00      	cmp	r3, #0
1a007ca4:	60a3      	str	r3, [r4, #8]
1a007ca6:	daf0      	bge.n	1a007c8a <__fputwc+0x3e>
1a007ca8:	69a7      	ldr	r7, [r4, #24]
1a007caa:	42bb      	cmp	r3, r7
1a007cac:	4661      	mov	r1, ip
1a007cae:	4622      	mov	r2, r4
1a007cb0:	4640      	mov	r0, r8
1a007cb2:	db02      	blt.n	1a007cba <__fputwc+0x6e>
1a007cb4:	f1bc 0f0a 	cmp.w	ip, #10
1a007cb8:	d1e7      	bne.n	1a007c8a <__fputwc+0x3e>
1a007cba:	f000 f865 	bl	1a007d88 <__swbuf_r>
1a007cbe:	1c43      	adds	r3, r0, #1
1a007cc0:	d1e8      	bne.n	1a007c94 <__fputwc+0x48>
1a007cc2:	b002      	add	sp, #8
1a007cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007cc8:	4648      	mov	r0, r9
1a007cca:	b002      	add	sp, #8
1a007ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007cd0:	fa5f fc89 	uxtb.w	ip, r9
1a007cd4:	4606      	mov	r6, r0
1a007cd6:	f88d c004 	strb.w	ip, [sp, #4]
1a007cda:	e7d2      	b.n	1a007c82 <__fputwc+0x36>
1a007cdc:	89a3      	ldrh	r3, [r4, #12]
1a007cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007ce2:	81a3      	strh	r3, [r4, #12]
1a007ce4:	b002      	add	sp, #8
1a007ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007cea:	bf00      	nop

1a007cec <_fputwc_r>:
1a007cec:	b530      	push	{r4, r5, lr}
1a007cee:	4605      	mov	r5, r0
1a007cf0:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a007cf2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a007cf6:	07c0      	lsls	r0, r0, #31
1a007cf8:	4614      	mov	r4, r2
1a007cfa:	b083      	sub	sp, #12
1a007cfc:	b29a      	uxth	r2, r3
1a007cfe:	d401      	bmi.n	1a007d04 <_fputwc_r+0x18>
1a007d00:	0590      	lsls	r0, r2, #22
1a007d02:	d51c      	bpl.n	1a007d3e <_fputwc_r+0x52>
1a007d04:	0490      	lsls	r0, r2, #18
1a007d06:	d406      	bmi.n	1a007d16 <_fputwc_r+0x2a>
1a007d08:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a007d0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a007d0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a007d12:	81a3      	strh	r3, [r4, #12]
1a007d14:	6662      	str	r2, [r4, #100]	; 0x64
1a007d16:	4628      	mov	r0, r5
1a007d18:	4622      	mov	r2, r4
1a007d1a:	f7ff ff97 	bl	1a007c4c <__fputwc>
1a007d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a007d20:	07da      	lsls	r2, r3, #31
1a007d22:	4605      	mov	r5, r0
1a007d24:	d402      	bmi.n	1a007d2c <_fputwc_r+0x40>
1a007d26:	89a3      	ldrh	r3, [r4, #12]
1a007d28:	059b      	lsls	r3, r3, #22
1a007d2a:	d502      	bpl.n	1a007d32 <_fputwc_r+0x46>
1a007d2c:	4628      	mov	r0, r5
1a007d2e:	b003      	add	sp, #12
1a007d30:	bd30      	pop	{r4, r5, pc}
1a007d32:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007d34:	f7fb fc42 	bl	1a0035bc <__retarget_lock_release_recursive>
1a007d38:	4628      	mov	r0, r5
1a007d3a:	b003      	add	sp, #12
1a007d3c:	bd30      	pop	{r4, r5, pc}
1a007d3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007d40:	9101      	str	r1, [sp, #4]
1a007d42:	f7fb fc39 	bl	1a0035b8 <__retarget_lock_acquire_recursive>
1a007d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007d4a:	9901      	ldr	r1, [sp, #4]
1a007d4c:	b29a      	uxth	r2, r3
1a007d4e:	e7d9      	b.n	1a007d04 <_fputwc_r+0x18>

1a007d50 <__locale_mb_cur_max>:
1a007d50:	4b01      	ldr	r3, [pc, #4]	; (1a007d58 <__locale_mb_cur_max+0x8>)
1a007d52:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a007d56:	4770      	bx	lr
1a007d58:	10000880 	.word	0x10000880

1a007d5c <__ascii_mbtowc>:
1a007d5c:	b082      	sub	sp, #8
1a007d5e:	b149      	cbz	r1, 1a007d74 <__ascii_mbtowc+0x18>
1a007d60:	b15a      	cbz	r2, 1a007d7a <__ascii_mbtowc+0x1e>
1a007d62:	b16b      	cbz	r3, 1a007d80 <__ascii_mbtowc+0x24>
1a007d64:	7813      	ldrb	r3, [r2, #0]
1a007d66:	600b      	str	r3, [r1, #0]
1a007d68:	7812      	ldrb	r2, [r2, #0]
1a007d6a:	1c10      	adds	r0, r2, #0
1a007d6c:	bf18      	it	ne
1a007d6e:	2001      	movne	r0, #1
1a007d70:	b002      	add	sp, #8
1a007d72:	4770      	bx	lr
1a007d74:	a901      	add	r1, sp, #4
1a007d76:	2a00      	cmp	r2, #0
1a007d78:	d1f3      	bne.n	1a007d62 <__ascii_mbtowc+0x6>
1a007d7a:	4610      	mov	r0, r2
1a007d7c:	b002      	add	sp, #8
1a007d7e:	4770      	bx	lr
1a007d80:	f06f 0001 	mvn.w	r0, #1
1a007d84:	e7f4      	b.n	1a007d70 <__ascii_mbtowc+0x14>
1a007d86:	bf00      	nop

1a007d88 <__swbuf_r>:
1a007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a007d8a:	460d      	mov	r5, r1
1a007d8c:	4614      	mov	r4, r2
1a007d8e:	4606      	mov	r6, r0
1a007d90:	b110      	cbz	r0, 1a007d98 <__swbuf_r+0x10>
1a007d92:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a007d94:	2b00      	cmp	r3, #0
1a007d96:	d043      	beq.n	1a007e20 <__swbuf_r+0x98>
1a007d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007d9c:	69a3      	ldr	r3, [r4, #24]
1a007d9e:	60a3      	str	r3, [r4, #8]
1a007da0:	b291      	uxth	r1, r2
1a007da2:	0708      	lsls	r0, r1, #28
1a007da4:	d51b      	bpl.n	1a007dde <__swbuf_r+0x56>
1a007da6:	6923      	ldr	r3, [r4, #16]
1a007da8:	b1cb      	cbz	r3, 1a007dde <__swbuf_r+0x56>
1a007daa:	b2ed      	uxtb	r5, r5
1a007dac:	0489      	lsls	r1, r1, #18
1a007dae:	462f      	mov	r7, r5
1a007db0:	d522      	bpl.n	1a007df8 <__swbuf_r+0x70>
1a007db2:	6822      	ldr	r2, [r4, #0]
1a007db4:	6961      	ldr	r1, [r4, #20]
1a007db6:	1ad3      	subs	r3, r2, r3
1a007db8:	4299      	cmp	r1, r3
1a007dba:	dd29      	ble.n	1a007e10 <__swbuf_r+0x88>
1a007dbc:	3301      	adds	r3, #1
1a007dbe:	68a1      	ldr	r1, [r4, #8]
1a007dc0:	1c50      	adds	r0, r2, #1
1a007dc2:	3901      	subs	r1, #1
1a007dc4:	60a1      	str	r1, [r4, #8]
1a007dc6:	6020      	str	r0, [r4, #0]
1a007dc8:	7015      	strb	r5, [r2, #0]
1a007dca:	6962      	ldr	r2, [r4, #20]
1a007dcc:	429a      	cmp	r2, r3
1a007dce:	d02a      	beq.n	1a007e26 <__swbuf_r+0x9e>
1a007dd0:	89a3      	ldrh	r3, [r4, #12]
1a007dd2:	07db      	lsls	r3, r3, #31
1a007dd4:	d501      	bpl.n	1a007dda <__swbuf_r+0x52>
1a007dd6:	2d0a      	cmp	r5, #10
1a007dd8:	d025      	beq.n	1a007e26 <__swbuf_r+0x9e>
1a007dda:	4638      	mov	r0, r7
1a007ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a007dde:	4621      	mov	r1, r4
1a007de0:	4630      	mov	r0, r6
1a007de2:	f7fd fea9 	bl	1a005b38 <__swsetup_r>
1a007de6:	bb20      	cbnz	r0, 1a007e32 <__swbuf_r+0xaa>
1a007de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007dec:	6923      	ldr	r3, [r4, #16]
1a007dee:	b291      	uxth	r1, r2
1a007df0:	b2ed      	uxtb	r5, r5
1a007df2:	0489      	lsls	r1, r1, #18
1a007df4:	462f      	mov	r7, r5
1a007df6:	d4dc      	bmi.n	1a007db2 <__swbuf_r+0x2a>
1a007df8:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a007dfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a007dfe:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a007e02:	81a2      	strh	r2, [r4, #12]
1a007e04:	6822      	ldr	r2, [r4, #0]
1a007e06:	6661      	str	r1, [r4, #100]	; 0x64
1a007e08:	6961      	ldr	r1, [r4, #20]
1a007e0a:	1ad3      	subs	r3, r2, r3
1a007e0c:	4299      	cmp	r1, r3
1a007e0e:	dcd5      	bgt.n	1a007dbc <__swbuf_r+0x34>
1a007e10:	4621      	mov	r1, r4
1a007e12:	4630      	mov	r0, r6
1a007e14:	f7fb f9a6 	bl	1a003164 <_fflush_r>
1a007e18:	b958      	cbnz	r0, 1a007e32 <__swbuf_r+0xaa>
1a007e1a:	6822      	ldr	r2, [r4, #0]
1a007e1c:	2301      	movs	r3, #1
1a007e1e:	e7ce      	b.n	1a007dbe <__swbuf_r+0x36>
1a007e20:	f7fb f9fc 	bl	1a00321c <__sinit>
1a007e24:	e7b8      	b.n	1a007d98 <__swbuf_r+0x10>
1a007e26:	4621      	mov	r1, r4
1a007e28:	4630      	mov	r0, r6
1a007e2a:	f7fb f99b 	bl	1a003164 <_fflush_r>
1a007e2e:	2800      	cmp	r0, #0
1a007e30:	d0d3      	beq.n	1a007dda <__swbuf_r+0x52>
1a007e32:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a007e36:	e7d0      	b.n	1a007dda <__swbuf_r+0x52>

1a007e38 <_wcrtomb_r>:
1a007e38:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007e3a:	4c0b      	ldr	r4, [pc, #44]	; (1a007e68 <_wcrtomb_r+0x30>)
1a007e3c:	b085      	sub	sp, #20
1a007e3e:	4606      	mov	r6, r0
1a007e40:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a007e44:	461f      	mov	r7, r3
1a007e46:	b121      	cbz	r1, 1a007e52 <_wcrtomb_r+0x1a>
1a007e48:	47a0      	blx	r4
1a007e4a:	1c43      	adds	r3, r0, #1
1a007e4c:	d006      	beq.n	1a007e5c <_wcrtomb_r+0x24>
1a007e4e:	b005      	add	sp, #20
1a007e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007e52:	460a      	mov	r2, r1
1a007e54:	a901      	add	r1, sp, #4
1a007e56:	47a0      	blx	r4
1a007e58:	1c43      	adds	r3, r0, #1
1a007e5a:	d1f8      	bne.n	1a007e4e <_wcrtomb_r+0x16>
1a007e5c:	2200      	movs	r2, #0
1a007e5e:	238a      	movs	r3, #138	; 0x8a
1a007e60:	603a      	str	r2, [r7, #0]
1a007e62:	6033      	str	r3, [r6, #0]
1a007e64:	b005      	add	sp, #20
1a007e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007e68:	10000880 	.word	0x10000880

1a007e6c <__ascii_wctomb>:
1a007e6c:	b149      	cbz	r1, 1a007e82 <__ascii_wctomb+0x16>
1a007e6e:	2aff      	cmp	r2, #255	; 0xff
1a007e70:	d802      	bhi.n	1a007e78 <__ascii_wctomb+0xc>
1a007e72:	700a      	strb	r2, [r1, #0]
1a007e74:	2001      	movs	r0, #1
1a007e76:	4770      	bx	lr
1a007e78:	238a      	movs	r3, #138	; 0x8a
1a007e7a:	6003      	str	r3, [r0, #0]
1a007e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007e80:	4770      	bx	lr
1a007e82:	4608      	mov	r0, r1
1a007e84:	4770      	bx	lr
1a007e86:	bf00      	nop

1a007e88 <__aeabi_dcmpun>:
1a007e88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a007e8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007e90:	d102      	bne.n	1a007e98 <__aeabi_dcmpun+0x10>
1a007e92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a007e96:	d10a      	bne.n	1a007eae <__aeabi_dcmpun+0x26>
1a007e98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a007e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007ea0:	d102      	bne.n	1a007ea8 <__aeabi_dcmpun+0x20>
1a007ea2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a007ea6:	d102      	bne.n	1a007eae <__aeabi_dcmpun+0x26>
1a007ea8:	f04f 0000 	mov.w	r0, #0
1a007eac:	4770      	bx	lr
1a007eae:	f04f 0001 	mov.w	r0, #1
1a007eb2:	4770      	bx	lr

1a007eb4 <__aeabi_d2iz>:
1a007eb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a007eb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a007ebc:	d215      	bcs.n	1a007eea <__aeabi_d2iz+0x36>
1a007ebe:	d511      	bpl.n	1a007ee4 <__aeabi_d2iz+0x30>
1a007ec0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a007ec4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a007ec8:	d912      	bls.n	1a007ef0 <__aeabi_d2iz+0x3c>
1a007eca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a007ece:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a007ed2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a007ed6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a007eda:	fa23 f002 	lsr.w	r0, r3, r2
1a007ede:	bf18      	it	ne
1a007ee0:	4240      	negne	r0, r0
1a007ee2:	4770      	bx	lr
1a007ee4:	f04f 0000 	mov.w	r0, #0
1a007ee8:	4770      	bx	lr
1a007eea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a007eee:	d105      	bne.n	1a007efc <__aeabi_d2iz+0x48>
1a007ef0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a007ef4:	bf08      	it	eq
1a007ef6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a007efa:	4770      	bx	lr
1a007efc:	f04f 0000 	mov.w	r0, #0
1a007f00:	4770      	bx	lr
1a007f02:	bf00      	nop
1a007f04:	6b736174 	.word	0x6b736174
1a007f08:	6365745f 	.word	0x6365745f
1a007f0c:	0031616c 	.word	0x0031616c
1a007f10:	6b736174 	.word	0x6b736174
1a007f14:	6365745f 	.word	0x6365745f
1a007f18:	0032616c 	.word	0x0032616c

1a007f1c <keys_config>:
1a007f1c:	ffff2524 5f6a736d 00000031 6b736174     $%..msj_1...task
1a007f2c:	64656c5f ffffff00 6c6c614d 4620636f     _led....Malloc F
1a007f3c:	656c6961 6f482064 00216b6f 6c707041     ailed Hook!.Appl
1a007f4c:	74616369 206e6f69 6c6c614d 4620636f     ication Malloc F
1a007f5c:	656c6961 6f482064 0d216b6f 00000000     ailed Hook!.....
1a007f6c:	7362696c 6572662f 6f747265 6f732f73     libs/freertos/so
1a007f7c:	65637275 6f6f682f 632e736b ffffff00     urce/hooks.c....
1a007f8c:	70410a0d 63696c70 6f697461 7453206e     ..Application St
1a007f9c:	206b6361 7265764f 776f6c66 6f202121     ack Overflow!! o
1a007fac:	6154206e 203a6b73 0a0d7325 ffffff00     n Task: %s......
1a007fbc:	41760a0d 72657373 6c614374 2864656c     ..vAssertCalled(
1a007fcc:	200a0d29 4c4c2020 20656e69 626d754e     )..   LLine Numb
1a007fdc:	3d207265 0d642520 2020200a 656c6946     er = %d..   File
1a007fec:	6d614e20 203d2065 0a0d7325 ff000a0d      Name = %s......
1a007ffc:	454c4449 ffffff00                       IDLE....

1a008004 <ExtRateIn>:
1a008004:	00000000                                ....

1a008008 <GpioButtons>:
1a008008:	08000400 09010900                       ........

1a008010 <GpioLeds>:
1a008010:	01050005 0e000205 0c010b01              ............

1a00801c <GpioPorts>:
1a00801c:	03030003 0f050403 05031005 07030603     ................
1a00802c:	ffff0802                                ....

1a008030 <OscRateIn>:
1a008030:	00b71b00                                ....

1a008034 <InitClkStates>:
1a008034:	01010f01                                ....

1a008038 <pinmuxing>:
1a008038:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a008048:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a008058:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a008068:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a008078:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a008088:	00d50301 00d50401 00160107 00560207     ..............V.
1a008098:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0080a8:	00570206                                ..W.

1a0080ac <UART_BClock>:
1a0080ac:	01a201c2 01620182                       ......b.

1a0080b4 <UART_PClock>:
1a0080b4:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0080c4:	ffff00ff                                ....

1a0080c8 <periph_to_base>:
1a0080c8:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0080d8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0080e8:	000100e0 01000100 01200003 00060120     .......... . ...
1a0080f8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a008108:	01820013 00120182 01a201a2 01c20011     ................
1a008118:	001001c2 01e201e2 0202000f 000e0202     ................
1a008128:	02220222 0223000d 001c0223              "."...#.#...

1a008134 <InitClkStates>:
1a008134:	00010100 00010909 0001090a 01010701     ................
1a008144:	00010902 00010906 0101090c 0001090d     ................
1a008154:	0001090e 0001090f 00010910 00010911     ................
1a008164:	00010912 00010913 00011114 00011119     ................
1a008174:	0001111a 0001111b                       ........

1a00817c <gpioPinsInit>:
1a00817c:	02000104 00050701 05010d03 04080100     ................
1a00818c:	02020002 02000304 00000403 04070002     ................
1a00819c:	030c0300 09050402 05040103 04030208     ................
1a0081ac:	04020305 06040504 0802000c 03000b06     ................
1a0081bc:	00090607 07060503 060f0504 03030004     ................
1a0081cc:	02000404 00050404 06040502 04060200     ................
1a0081dc:	0c050408 05040a04 0003010e 14010a00     ................
1a0081ec:	010f0000 0d000012 00001101 0010010c     ................
1a0081fc:	07070300 000f0300 01000001 00000000     ................
1a00820c:	000a0600 08060603 06100504 04030005     ................
1a00821c:	03000106 04090400 04010d05 010b0000     ................
1a00822c:	0200000f 00000001 00010104 02010800     ................
1a00823c:	01090000 09010006 05040002 04010200     ................
1a00824c:	02020105 02020504 0e00000a 01000b02     ................
1a00825c:	000c020b ffff0c01                       ........

1a008264 <_ctype_>:
1a008264:	20202000 20202020 28282020 20282828     .         ((((( 
1a008274:	20202020 20202020 20202020 20202020                     
1a008284:	10108820 10101010 10101010 10101010      ...............
1a008294:	04040410 04040404 10040404 10101010     ................
1a0082a4:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a0082b4:	01010101 01010101 01010101 10101010     ................
1a0082c4:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a0082d4:	02020202 02020202 02020202 10101010     ................
1a0082e4:	00000020 00000000 00000000 00000000      ...............
	...
1a008364:	ffffff00 ffff000a 00464e49 00666e69     ........INF.inf.
1a008374:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
1a008384:	42413938 46454443 00000000 33323130     89ABCDEF....0123
1a008394:	37363534 62613938 66656463 00000000     456789abcdef....
1a0083a4:	6c756e28 0000296c ffff0030              (null)..0...

1a0083b0 <blanks.8693>:
1a0083b0:	20202020 20202020 20202020 20202020                     

1a0083c0 <zeroes.8694>:
1a0083c0:	30303030 30303030 30303030 30303030     0000000000000000
1a0083d0:	004e614e 69666e49 7974696e ffffff00     NaN.Infinity....

1a0083e0 <__mprec_bigtens>:
1a0083e0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a0083f0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a008400:	7f73bf3c 75154fdd                       <.s..O.u

1a008408 <__mprec_tens>:
1a008408:	00000000 3ff00000 00000000 40240000     .......?......$@
1a008418:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a008428:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a008438:	00000000 412e8480 00000000 416312d0     .......A......cA
1a008448:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a008458:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a008468:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a008478:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a008488:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a008498:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a0084a8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a0084b8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a0084c8:	79d99db4 44ea7843                       ...yCx.D

1a0084d0 <p05.7442>:
1a0084d0:	00000005 00000019 0000007d 00000043     ........}...C...
1a0084e0:	49534f50 ffff0058 0000002e              POSIX.......
